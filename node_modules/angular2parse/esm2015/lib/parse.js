import { __decorate, __param } from "tslib";
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { Parser, Lexer } from './angular';
import { ParseVisitorResolver, ParseVisitorCompiler } from './visitors';
import * as i0 from "@angular/core";
export const PIPES_CONFIG = new InjectionToken('PipesConfig');
let Parse = class Parse {
    /**
     * Used to dependency inject the Angular 2 parser.
     */
    constructor(pipesConfigs) {
        this._parser = new Parser(new Lexer());
        this._pipesCache = new Map();
        this._evalCache = new Map();
        this._calcCache = new Map();
        if (pipesConfigs && pipesConfigs.length) {
            pipesConfigs
                .filter(pipes => pipes && pipes.length)
                .forEach(pipes => pipes.forEach((pipeData) => this._pipesCache.set(pipeData.pipeName, pipeData.pipeInstance)));
        }
    }
    eval(expression) {
        if (this._evalCache.has(expression)) {
            return this._evalCache.get(expression);
        }
        const visitor = new ParseVisitorCompiler();
        let ast = this._parser.parseInterpolation(expression, 'Parse');
        if (!ast) {
            ast = this._parser.parseBinding(expression, 'Parse');
        }
        const fnBody = ast.visit(visitor);
        const pipesCache = this._pipesCache;
        const getFn = new Function('context', 'pipesCache', `return ${fnBody};`);
        const evalParse = function evalParse(context) {
            return getFn(context, pipesCache);
        };
        this._evalCache.set(expression, evalParse);
        return evalParse;
    }
    calc(expression) {
        if (this._calcCache.has(expression)) {
            return this._calcCache.get(expression);
        }
        const visitor = new ParseVisitorResolver(this._pipesCache);
        let ast = this._parser.parseInterpolation(expression, 'Parse');
        if (!ast) {
            ast = this._parser.parseBinding(expression, 'Parse');
        }
        const calcParse = function calcParse(context) {
            return ast.visit(visitor, context);
        };
        this._calcCache.set(expression, calcParse);
        return calcParse;
    }
};
Parse.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [PIPES_CONFIG,] }] }
];
Parse.ɵprov = i0.ɵɵdefineInjectable({ factory: function Parse_Factory() { return new Parse(i0.ɵɵinject(PIPES_CONFIG, 8)); }, token: Parse, providedIn: "root" });
Parse = __decorate([
    Injectable({ providedIn: 'root' }),
    __param(0, Optional()), __param(0, Inject(PIPES_CONFIG))
], Parse);
export { Parse };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMnBhcnNlLyIsInNvdXJjZXMiOlsibGliL3BhcnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFpQixNQUFNLFdBQVcsQ0FBQztBQUN6RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxZQUFZLENBQUM7O0FBRXhFLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQVE5RCxJQUFhLEtBQUssR0FBbEIsTUFBYSxLQUFLO0lBTWhCOztPQUVHO0lBRUgsWUFBOEMsWUFBNkI7UUFUbkUsWUFBTyxHQUFXLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMxQyxnQkFBVyxHQUFxQixJQUFJLEdBQUcsRUFBZSxDQUFDO1FBQ3ZELGVBQVUsR0FBMEIsSUFBSSxHQUFHLEVBQW9CLENBQUM7UUFDaEUsZUFBVSxHQUEwQixJQUFJLEdBQUcsRUFBb0IsQ0FBQztRQU90RSxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ3ZDLFlBQVk7aUJBQ1QsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUM7aUJBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsSDtJQUNILENBQUM7SUFFRCxJQUFJLENBQUMsVUFBa0I7UUFDckIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNuQyxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3hDO1FBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1FBRTNDLElBQUksR0FBRyxHQUFrQixJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUU5RSxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ1IsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN0RDtRQUVELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUNwQyxNQUFNLEtBQUssR0FBRyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUV6RSxNQUFNLFNBQVMsR0FBRyxTQUFTLFNBQVMsQ0FBQyxPQUFZO1lBQy9DLE9BQU8sS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNwQyxDQUFDLENBQUM7UUFFRixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFM0MsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQUksQ0FBQyxVQUFrQjtRQUNyQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ25DLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDeEM7UUFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLG9CQUFvQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUUzRCxJQUFJLEdBQUcsR0FBa0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFOUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDdEQ7UUFFRCxNQUFNLFNBQVMsR0FBRyxTQUFTLFNBQVMsQ0FBQyxPQUFZO1lBQy9DLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRTNDLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FDRixDQUFBOzt3Q0F2RGMsUUFBUSxZQUFJLE1BQU0sU0FBQyxZQUFZOzs7QUFWakMsS0FBSztJQURqQixVQUFVLENBQUMsRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFDLENBQUM7SUFXbEIsV0FBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLFdBQUEsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO0dBVmxDLEtBQUssQ0FpRWpCO1NBakVZLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFyc2VyLCBMZXhlciwgQVNUV2l0aFNvdXJjZSB9IGZyb20gJy4vYW5ndWxhcic7XG5pbXBvcnQgeyBQYXJzZVZpc2l0b3JSZXNvbHZlciwgUGFyc2VWaXNpdG9yQ29tcGlsZXIgfSBmcm9tICcuL3Zpc2l0b3JzJztcblxuZXhwb3J0IGNvbnN0IFBJUEVTX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbignUGlwZXNDb25maWcnKTtcblxuZXhwb3J0IGludGVyZmFjZSBQaXBlc0NvbmZpZyB7XG4gIHBpcGVOYW1lOiBzdHJpbmc7XG4gIHBpcGVJbnN0YW5jZTogYW55O1xufVxuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBQYXJzZSB7XG4gIHByaXZhdGUgX3BhcnNlcjogUGFyc2VyID0gbmV3IFBhcnNlcihuZXcgTGV4ZXIoKSk7XG4gIHByaXZhdGUgX3BpcGVzQ2FjaGU6IE1hcDxzdHJpbmcsIGFueT4gPSBuZXcgTWFwPHN0cmluZywgYW55PigpO1xuICBwcml2YXRlIF9ldmFsQ2FjaGU6IE1hcDxzdHJpbmcsIEZ1bmN0aW9uPiA9IG5ldyBNYXA8c3RyaW5nLCBGdW5jdGlvbj4oKTtcbiAgcHJpdmF0ZSBfY2FsY0NhY2hlOiBNYXA8c3RyaW5nLCBGdW5jdGlvbj4gPSBuZXcgTWFwPHN0cmluZywgRnVuY3Rpb24+KCk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZGVwZW5kZW5jeSBpbmplY3QgdGhlIEFuZ3VsYXIgMiBwYXJzZXIuXG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoUElQRVNfQ09ORklHKSBwaXBlc0NvbmZpZ3M6IFBpcGVzQ29uZmlnW11bXSkge1xuICAgIGlmIChwaXBlc0NvbmZpZ3MgJiYgcGlwZXNDb25maWdzLmxlbmd0aCkge1xuICAgICAgcGlwZXNDb25maWdzXG4gICAgICAgIC5maWx0ZXIocGlwZXMgPT4gcGlwZXMgJiYgcGlwZXMubGVuZ3RoKVxuICAgICAgICAuZm9yRWFjaChwaXBlcyA9PiBwaXBlcy5mb3JFYWNoKChwaXBlRGF0YSkgPT4gdGhpcy5fcGlwZXNDYWNoZS5zZXQocGlwZURhdGEucGlwZU5hbWUsIHBpcGVEYXRhLnBpcGVJbnN0YW5jZSkpKTtcbiAgICB9XG4gIH1cblxuICBldmFsKGV4cHJlc3Npb246IHN0cmluZyk6IEZ1bmN0aW9uIHtcbiAgICBpZiAodGhpcy5fZXZhbENhY2hlLmhhcyhleHByZXNzaW9uKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2V2YWxDYWNoZS5nZXQoZXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgY29uc3QgdmlzaXRvciA9IG5ldyBQYXJzZVZpc2l0b3JDb21waWxlcigpO1xuXG4gICAgbGV0IGFzdDogQVNUV2l0aFNvdXJjZSA9IHRoaXMuX3BhcnNlci5wYXJzZUludGVycG9sYXRpb24oZXhwcmVzc2lvbiwgJ1BhcnNlJyk7XG5cbiAgICBpZiAoIWFzdCkge1xuICAgICAgYXN0ID0gdGhpcy5fcGFyc2VyLnBhcnNlQmluZGluZyhleHByZXNzaW9uLCAnUGFyc2UnKTtcbiAgICB9XG5cbiAgICBjb25zdCBmbkJvZHkgPSBhc3QudmlzaXQodmlzaXRvcik7XG4gICAgY29uc3QgcGlwZXNDYWNoZSA9IHRoaXMuX3BpcGVzQ2FjaGU7XG4gICAgY29uc3QgZ2V0Rm4gPSBuZXcgRnVuY3Rpb24oJ2NvbnRleHQnLCAncGlwZXNDYWNoZScsIGByZXR1cm4gJHtmbkJvZHl9O2ApO1xuXG4gICAgY29uc3QgZXZhbFBhcnNlID0gZnVuY3Rpb24gZXZhbFBhcnNlKGNvbnRleHQ6IGFueSk6IGFueSB7XG4gICAgICByZXR1cm4gZ2V0Rm4oY29udGV4dCwgcGlwZXNDYWNoZSk7XG4gICAgfTtcblxuICAgIHRoaXMuX2V2YWxDYWNoZS5zZXQoZXhwcmVzc2lvbiwgZXZhbFBhcnNlKTtcblxuICAgIHJldHVybiBldmFsUGFyc2U7XG4gIH1cblxuICBjYWxjKGV4cHJlc3Npb246IHN0cmluZyk6IEZ1bmN0aW9uIHtcbiAgICBpZiAodGhpcy5fY2FsY0NhY2hlLmhhcyhleHByZXNzaW9uKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2NhbGNDYWNoZS5nZXQoZXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgY29uc3QgdmlzaXRvciA9IG5ldyBQYXJzZVZpc2l0b3JSZXNvbHZlcih0aGlzLl9waXBlc0NhY2hlKTtcblxuICAgIGxldCBhc3Q6IEFTVFdpdGhTb3VyY2UgPSB0aGlzLl9wYXJzZXIucGFyc2VJbnRlcnBvbGF0aW9uKGV4cHJlc3Npb24sICdQYXJzZScpO1xuXG4gICAgaWYgKCFhc3QpIHtcbiAgICAgIGFzdCA9IHRoaXMuX3BhcnNlci5wYXJzZUJpbmRpbmcoZXhwcmVzc2lvbiwgJ1BhcnNlJyk7XG4gICAgfVxuXG4gICAgY29uc3QgY2FsY1BhcnNlID0gZnVuY3Rpb24gY2FsY1BhcnNlKGNvbnRleHQ6IGFueSk6IGFueSB7XG4gICAgICByZXR1cm4gYXN0LnZpc2l0KHZpc2l0b3IsIGNvbnRleHQpO1xuICAgIH07XG5cbiAgICB0aGlzLl9jYWxjQ2FjaGUuc2V0KGV4cHJlc3Npb24sIGNhbGNQYXJzZSk7XG5cbiAgICByZXR1cm4gY2FsY1BhcnNlO1xuICB9XG59XG4iXX0=