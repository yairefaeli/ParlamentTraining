{"version":3,"file":"angular2parse.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://angular2parse/lib/angular/facade/lang.ts","ng://angular2parse/lib/angular/compiler/assertions.ts","ng://angular2parse/lib/angular/compiler/ast.ts","ng://angular2parse/lib/angular/compiler/chars.ts","ng://angular2parse/lib/angular/compiler/interpolation-config.ts","ng://angular2parse/lib/angular/compiler/lexer.ts","ng://angular2parse/lib/angular/compiler/parser.ts","ng://angular2parse/lib/util/binary-operations.ts","ng://angular2parse/lib/util/lang.ts","ng://angular2parse/lib/visitors/parse-visitor-compiler.ts","ng://angular2parse/lib/visitors/parse-visitor-resolver.ts","ng://angular2parse/lib/parse.ts","ng://angular2parse/lib/module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport interface BrowserNodeGlobal {\n    Object: typeof Object;\n    Array: typeof Array;\n    Map: typeof Map;\n    Set: typeof Set;\n    Date: DateConstructor;\n    RegExp: RegExpConstructor;\n    JSON: typeof JSON;\n    Math: any;  // typeof Math;\n    assert(condition: any): void;\n    Reflect: any;\n    getAngularTestability: Function;\n    getAllAngularTestabilities: Function;\n    getAllAngularRootElements: Function;\n    frameworkStabilizers: Array<Function>;\n    setTimeout: Function;\n    clearTimeout: Function;\n    setInterval: Function;\n    clearInterval: Function;\n    encodeURI: Function;\n}\n\n\nexport function getTypeNameForDebugging(type: any): string {\n    return type['name'] || typeof type;\n}\n\nexport function isPresent(obj: any): boolean {\n    return obj != null;\n}\n\nexport function isBlank(obj: any): boolean {\n    return obj == null;\n}\n\nconst STRING_MAP_PROTO = Object.getPrototypeOf({});\nexport function isStrictStringMap(obj: any): boolean {\n    return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;\n}\n\nexport function stringify(token: any): string {\n    if (typeof token === 'string') {\n        return token;\n    }\n\n    if (token == null) {\n        return '' + token;\n    }\n\n    if (token.overriddenName) {\n        return `${token.overriddenName}`;\n    }\n\n    if (token.name) {\n        return `${token.name}`;\n    }\n\n    const res = token.toString();\n    const newLineIndex = res.indexOf('\\n');\n    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\nexport class NumberWrapper {\n    static parseIntAutoRadix(text: string): number {\n        const result: number = parseInt(text);\n        if (isNaN(result)) {\n            throw new Error('Invalid integer literal when parsing ' + text);\n        }\n        return result;\n    }\n\n    static isNumeric(value: any): boolean { return !isNaN(value - parseFloat(value)); }\n}\n\n// JS has NaN !== NaN\nexport function looseIdentical(a: any, b: any): boolean {\n    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n}\n\nexport function isJsObject(o: any): boolean {\n    return o !== null && (typeof o === 'function' || typeof o === 'object');\n}\n\nexport function print(obj: Error | Object) {\n    // tslint:disable-next-line:no-console\n    console.log(obj);\n}\n\nexport function warn(obj: Error | Object) {\n    console.warn(obj);\n}\n\nexport function setValueOnPath(global: any, path: string, value: any) {\n    const parts = path.split('.');\n    let obj: any = global;\n    while (parts.length > 1) {\n        const name = parts.shift();\n        if (obj.hasOwnProperty(name) && obj[name] != null) {\n            obj = obj[name];\n        } else {\n            obj = obj[name] = {};\n        }\n    }\n    if (obj === undefined || obj === null) {\n        obj = {};\n    }\n    obj[parts.shift()] = value;\n}\n\nexport function isPrimitive(obj: any): boolean {\n    return !isJsObject(obj);\n}\n\nexport function escapeRegExp(s: string): string {\n    return s.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$1');\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isBlank, isPresent} from '../facade/lang';\n\nconst isDevMode = () => false;\n\nexport function assertArrayOfStrings(identifier: string, value: any) {\n    if (!isDevMode() || isBlank(value)) {\n        return;\n    }\n    if (!Array.isArray(value)) {\n        throw new Error(`Expected '${identifier}' to be an array of strings.`);\n    }\n    for (let i = 0; i < value.length; i += 1) {\n        if (typeof value[i] !== 'string') {\n            throw new Error(`Expected '${identifier}' to be an array of strings.`);\n        }\n    }\n}\n\nconst INTERPOLATION_BLACKLIST_REGEXPS = [\n    /^\\s*$/,        // empty\n    /[<>]/,         // html tag\n    /^[{}]$/,       // i18n expansion\n    /&(#|[a-z])/i,  // character reference,\n    /^\\/\\//,        // comment\n];\n\nexport function assertInterpolationSymbols(identifier: string, value: any): void {\n    if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {\n        throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n    } else if (isDevMode() && !isBlank(value)) {\n        const start = value[0] as string;\n        const end = value[1] as string;\n        // black list checking\n        INTERPOLATION_BLACKLIST_REGEXPS.forEach(regexp => {\n            if (regexp.test(start) || regexp.test(end)) {\n                throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n            }\n        });\n    }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isBlank} from '../facade/lang';\n\nexport class ParserError {\n    public message: string;\n    constructor(\n        message: string, public input: string, public errLocation: string, public ctxLocation?: any) {\n        this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\n    }\n}\n\nexport class ParseSpan {\n    constructor(public start: number, public end: number) {}\n}\n\nexport class AST {\n    constructor(public span: ParseSpan) {}\n    visit(visitor: AstVisitor, context: any = null): any { return null; }\n    toString(): string { return 'AST'; }\n}\n\n/**\n * Represents a quoted expression of the form:\n *\n * quote = prefix `:` uninterpretedExpression\n * prefix = identifier\n * uninterpretedExpression = arbitrary string\n *\n * A quoted expression is meant to be pre-processed by an AST transformer that\n * converts it into another AST that no longer contains quoted expressions.\n * It is meant to allow third-party developers to extend Angular template\n * expression language. The `uninterpretedExpression` part of the quote is\n * therefore not interpreted by the Angular's own expression parser.\n */\nexport class Quote extends AST {\n    constructor(\n        span: ParseSpan, public prefix: string, public uninterpretedExpression: string,\n        public location: any) {\n        super(span);\n    }\n    visit(visitor: AstVisitor, context: any = null): any { return visitor.visitQuote(this, context); }\n    toString(): string { return 'Quote'; }\n}\n\nexport class EmptyExpr extends AST {\n    visit(visitor: AstVisitor, context: any = null) {\n        // do nothing\n    }\n}\n\nexport class ImplicitReceiver extends AST {\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitImplicitReceiver(this, context);\n    }\n}\n\n/**\n * Multiple expressions separated by a semicolon.\n */\nexport class Chain extends AST {\n    constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any { return visitor.visitChain(this, context); }\n}\n\nexport class Conditional extends AST {\n    constructor(span: ParseSpan, public condition: AST, public trueExp: AST, public falseExp: AST) {\n        super(span);\n    }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitConditional(this, context);\n    }\n}\n\nexport class PropertyRead extends AST {\n    constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitPropertyRead(this, context);\n    }\n}\n\nexport class PropertyWrite extends AST {\n    constructor(span: ParseSpan, public receiver: AST, public name: string, public value: AST) {\n        super(span);\n    }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitPropertyWrite(this, context);\n    }\n}\n\nexport class SafePropertyRead extends AST {\n    constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitSafePropertyRead(this, context);\n    }\n}\n\nexport class KeyedRead extends AST {\n    constructor(span: ParseSpan, public obj: AST, public key: AST) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitKeyedRead(this, context);\n    }\n}\n\nexport class KeyedWrite extends AST {\n    constructor(span: ParseSpan, public obj: AST, public key: AST, public value: AST) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitKeyedWrite(this, context);\n    }\n}\n\nexport class BindingPipe extends AST {\n    constructor(span: ParseSpan, public exp: AST, public name: string, public args: any[]) {\n        super(span);\n    }\n    visit(visitor: AstVisitor, context: any = null): any { return visitor.visitPipe(this, context); }\n}\n\nexport class LiteralPrimitive extends AST {\n    constructor(span: ParseSpan, public value: any) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitLiteralPrimitive(this, context);\n    }\n}\n\nexport class LiteralArray extends AST {\n    constructor(span: ParseSpan, public expressions: any[]) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitLiteralArray(this, context);\n    }\n}\n\nexport class LiteralMap extends AST {\n    constructor(span: ParseSpan, public keys: any[], public values: any[]) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitLiteralMap(this, context);\n    }\n}\n\nexport class Interpolation extends AST {\n    constructor(span: ParseSpan, public strings: any[], public expressions: any[]) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitInterpolation(this, context);\n    }\n}\n\nexport class Binary extends AST {\n    constructor(span: ParseSpan, public operation: string, public left: AST, public right: AST) {\n        super(span);\n    }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitBinary(this, context);\n    }\n}\n\nexport class PrefixNot extends AST {\n    constructor(span: ParseSpan, public expression: AST) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitPrefixNot(this, context);\n    }\n}\n\nexport class MethodCall extends AST {\n    constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n        super(span);\n    }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitMethodCall(this, context);\n    }\n}\n\nexport class SafeMethodCall extends AST {\n    constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\n        super(span);\n    }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitSafeMethodCall(this, context);\n    }\n}\n\nexport class FunctionCall extends AST {\n    constructor(span: ParseSpan, public target: AST, public args: any[]) { super(span); }\n    visit(visitor: AstVisitor, context: any = null): any {\n        return visitor.visitFunctionCall(this, context);\n    }\n}\n\nexport class ASTWithSource extends AST {\n    constructor(\n        public ast: AST, public source: string, public location: string,\n        public errors: ParserError[]) {\n        super(new ParseSpan(0, isBlank(source) ? 0 : source.length));\n    }\n    visit(visitor: AstVisitor, context: any = null): any { return this.ast.visit(visitor, context); }\n    toString(): string { return `${this.source} in ${this.location}`; }\n}\n\nexport class TemplateBinding {\n    constructor(\n        public span: ParseSpan, public key: string, public keyIsVar: boolean, public name: string,\n        public expression: ASTWithSource) {}\n}\n\nexport interface AstVisitor {\n    visitBinary(ast: Binary, context: any): any;\n    visitChain(ast: Chain, context: any): any;\n    visitConditional(ast: Conditional, context: any): any;\n    visitFunctionCall(ast: FunctionCall, context: any): any;\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\n    visitInterpolation(ast: Interpolation, context: any): any;\n    visitKeyedRead(ast: KeyedRead, context: any): any;\n    visitKeyedWrite(ast: KeyedWrite, context: any): any;\n    visitLiteralArray(ast: LiteralArray, context: any): any;\n    visitLiteralMap(ast: LiteralMap, context: any): any;\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\n    visitMethodCall(ast: MethodCall, context: any): any;\n    visitPipe(ast: BindingPipe, context: any): any;\n    visitPrefixNot(ast: PrefixNot, context: any): any;\n    visitPropertyRead(ast: PropertyRead, context: any): any;\n    visitPropertyWrite(ast: PropertyWrite, context: any): any;\n    visitQuote(ast: Quote, context: any): any;\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\n}\n\nexport class RecursiveAstVisitor implements AstVisitor {\n    visitBinary(ast: Binary, context: any): any {\n        ast.left.visit(this);\n        ast.right.visit(this);\n        return null;\n    }\n    visitChain(ast: Chain, context: any): any { return this.visitAll(ast.expressions, context); }\n    visitConditional(ast: Conditional, context: any): any {\n        ast.condition.visit(this);\n        ast.trueExp.visit(this);\n        ast.falseExp.visit(this);\n        return null;\n    }\n    visitPipe(ast: BindingPipe, context: any): any {\n        ast.exp.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    }\n    visitFunctionCall(ast: FunctionCall, context: any): any {\n        ast.target.visit(this);\n        this.visitAll(ast.args, context);\n        return null;\n    }\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): any { return null; }\n    visitInterpolation(ast: Interpolation, context: any): any {\n        return this.visitAll(ast.expressions, context);\n    }\n    visitKeyedRead(ast: KeyedRead, context: any): any {\n        ast.obj.visit(this);\n        ast.key.visit(this);\n        return null;\n    }\n    visitKeyedWrite(ast: KeyedWrite, context: any): any {\n        ast.obj.visit(this);\n        ast.key.visit(this);\n        ast.value.visit(this);\n        return null;\n    }\n    visitLiteralArray(ast: LiteralArray, context: any): any {\n        return this.visitAll(ast.expressions, context);\n    }\n    visitLiteralMap(ast: LiteralMap, context: any): any { return this.visitAll(ast.values, context); }\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any { return null; }\n    visitMethodCall(ast: MethodCall, context: any): any {\n        ast.receiver.visit(this);\n        return this.visitAll(ast.args, context);\n    }\n    visitPrefixNot(ast: PrefixNot, context: any): any {\n        ast.expression.visit(this);\n        return null;\n    }\n    visitPropertyRead(ast: PropertyRead, context: any): any {\n        ast.receiver.visit(this);\n        return null;\n    }\n    visitPropertyWrite(ast: PropertyWrite, context: any): any {\n        ast.receiver.visit(this);\n        ast.value.visit(this);\n        return null;\n    }\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): any {\n        ast.receiver.visit(this);\n        return null;\n    }\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): any {\n        ast.receiver.visit(this);\n        return this.visitAll(ast.args, context);\n    }\n    visitAll(asts: AST[], context: any): any {\n        asts.forEach(ast => ast.visit(this, context));\n        return null;\n    }\n    visitQuote(ast: Quote, context: any): any { return null; }\n}\n\nexport class AstTransformer implements AstVisitor {\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\n\n    visitInterpolation(ast: Interpolation, context: any): AST {\n        return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\n    }\n\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST {\n        return new LiteralPrimitive(ast.span, ast.value);\n    }\n\n    visitPropertyRead(ast: PropertyRead, context: any): AST {\n        return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n    }\n\n    visitPropertyWrite(ast: PropertyWrite, context: any): AST {\n        return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);\n    }\n\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\n        return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\n    }\n\n    visitMethodCall(ast: MethodCall, context: any): AST {\n        return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n    }\n\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\n        return new SafeMethodCall(\n            ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\n    }\n\n    visitFunctionCall(ast: FunctionCall, context: any): AST {\n        return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));\n    }\n\n    visitLiteralArray(ast: LiteralArray, context: any): AST {\n        return new LiteralArray(ast.span, this.visitAll(ast.expressions));\n    }\n\n    visitLiteralMap(ast: LiteralMap, context: any): AST {\n        return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\n    }\n\n    visitBinary(ast: Binary, context: any): AST {\n        return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\n    }\n\n    visitPrefixNot(ast: PrefixNot, context: any): AST {\n        return new PrefixNot(ast.span, ast.expression.visit(this));\n    }\n\n    visitConditional(ast: Conditional, context: any): AST {\n        return new Conditional(\n            ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\n    }\n\n    visitPipe(ast: BindingPipe, context: any): AST {\n        return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\n    }\n\n    visitKeyedRead(ast: KeyedRead, context: any): AST {\n        return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\n    }\n\n    visitKeyedWrite(ast: KeyedWrite, context: any): AST {\n        return new KeyedWrite(\n            ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\n    }\n\n    visitAll(asts: any[]): any[] {\n        const res = new Array(asts.length);\n        for (let i = 0; i < asts.length; ++i) {\n            res[i] = asts[i].visit(this);\n        }\n        return res;\n    }\n\n    visitChain(ast: Chain, context: any): AST {\n        return new Chain(ast.span, this.visitAll(ast.expressions));\n    }\n\n    visitQuote(ast: Quote, context: any): AST {\n        return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\n    }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const $EOF = 0;\nexport const $TAB = 9;\nexport const $LF = 10;\nexport const $VTAB = 11;\nexport const $FF = 12;\nexport const $CR = 13;\nexport const $SPACE = 32;\nexport const $BANG = 33;\nexport const $DQ = 34;\nexport const $HASH = 35;\nexport const $$ = 36;\nexport const $PERCENT = 37;\nexport const $AMPERSAND = 38;\nexport const $SQ = 39;\nexport const $LPAREN = 40;\nexport const $RPAREN = 41;\nexport const $STAR = 42;\nexport const $PLUS = 43;\nexport const $COMMA = 44;\nexport const $MINUS = 45;\nexport const $PERIOD = 46;\nexport const $SLASH = 47;\nexport const $COLON = 58;\nexport const $SEMICOLON = 59;\nexport const $LT = 60;\nexport const $EQ = 61;\nexport const $GT = 62;\nexport const $QUESTION = 63;\n\nexport const $0 = 48;\nexport const $9 = 57;\n\nexport const $A = 65;\nexport const $E = 69;\nexport const $F = 70;\nexport const $X = 88;\nexport const $Z = 90;\n\nexport const $LBRACKET = 91;\nexport const $BACKSLASH = 92;\nexport const $RBRACKET = 93;\nexport const $CARET = 94;\nexport const $_ = 95;\n\nexport const $a = 97;\nexport const $e = 101;\nexport const $f = 102;\nexport const $n = 110;\nexport const $r = 114;\nexport const $t = 116;\nexport const $u = 117;\nexport const $v = 118;\nexport const $x = 120;\nexport const $z = 122;\n\nexport const $LBRACE = 123;\nexport const $BAR = 124;\nexport const $RBRACE = 125;\nexport const $NBSP = 160;\n\nexport const $PIPE = 124;\nexport const $TILDA = 126;\nexport const $AT = 64;\n\nexport const $BT = 96;\n\nexport function isWhitespace(code: number): boolean {\n    return (code >= $TAB && code <= $SPACE) || (code == $NBSP);\n}\n\nexport function isDigit(code: number): boolean {\n    return $0 <= code && code <= $9;\n}\n\nexport function isAsciiLetter(code: number): boolean {\n    return code >= $a && code <= $z || code >= $A && code <= $Z;\n}\n\nexport function isAsciiHexDigit(code: number): boolean {\n    return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {assertInterpolationSymbols} from './assertions';\n\nexport class InterpolationConfig {\n    static fromArray(markers: [string, string]): InterpolationConfig {\n        if (!markers) {\n            return DEFAULT_INTERPOLATION_CONFIG;\n        }\n\n        assertInterpolationSymbols('interpolation', markers);\n        return new InterpolationConfig(markers[0], markers[1]);\n    }\n\n    constructor(public start: string, public end: string){};\n}\n\nexport const DEFAULT_INTERPOLATION_CONFIG: InterpolationConfig =\n    new InterpolationConfig('{{', '}}');","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as chars from './chars';\nimport {NumberWrapper} from '../facade/lang';\n\nexport enum TokenType {\n    Character,\n    Identifier,\n    Keyword,\n    String,\n    Operator,\n    Number,\n    Error\n}\n\nconst KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\n\nexport class Lexer {\n    tokenize(text: string): Token[] {\n        const scanner = new _Scanner(text);\n        const tokens: Token[] = [];\n        let token = scanner.scanToken();\n        while (token != null) {\n            tokens.push(token);\n            token = scanner.scanToken();\n        }\n        return tokens;\n    }\n}\n\nexport class Token {\n    constructor(\n        public index: number, public type: TokenType, public numValue: number,\n        public strValue: string) {}\n\n    isCharacter(code: number): boolean {\n        return this.type == TokenType.Character && this.numValue == code;\n    }\n\n    isNumber(): boolean { return this.type == TokenType.Number; }\n\n    isString(): boolean { return this.type == TokenType.String; }\n\n    isOperator(operater: string): boolean {\n        return this.type == TokenType.Operator && this.strValue == operater;\n    }\n\n    isIdentifier(): boolean { return this.type == TokenType.Identifier; }\n\n    isKeyword(): boolean { return this.type == TokenType.Keyword; }\n\n    isKeywordLet(): boolean { return this.type == TokenType.Keyword && this.strValue == 'let'; }\n\n    isKeywordNull(): boolean { return this.type == TokenType.Keyword && this.strValue == 'null'; }\n\n    isKeywordUndefined(): boolean {\n        return this.type == TokenType.Keyword && this.strValue == 'undefined';\n    }\n\n    isKeywordTrue(): boolean { return this.type == TokenType.Keyword && this.strValue == 'true'; }\n\n    isKeywordFalse(): boolean { return this.type == TokenType.Keyword && this.strValue == 'false'; }\n\n    isKeywordThis(): boolean { return this.type == TokenType.Keyword && this.strValue == 'this'; }\n\n    isError(): boolean { return this.type == TokenType.Error; }\n\n    toNumber(): number { return this.type == TokenType.Number ? this.numValue : -1; }\n\n    toString(): string {\n        switch (this.type) {\n            case TokenType.Character:\n            case TokenType.Identifier:\n            case TokenType.Keyword:\n            case TokenType.Operator:\n            case TokenType.String:\n            case TokenType.Error:\n                return this.strValue;\n            case TokenType.Number:\n                return this.numValue.toString();\n            default:\n                return null;\n        }\n    }\n}\n\nfunction newCharacterToken(index: number, code: number): Token {\n    return new Token(index, TokenType.Character, code, String.fromCharCode(code));\n}\n\nfunction newIdentifierToken(index: number, text: string): Token {\n    return new Token(index, TokenType.Identifier, 0, text);\n}\n\nfunction newKeywordToken(index: number, text: string): Token {\n    return new Token(index, TokenType.Keyword, 0, text);\n}\n\nfunction newOperatorToken(index: number, text: string): Token {\n    return new Token(index, TokenType.Operator, 0, text);\n}\n\nfunction newStringToken(index: number, text: string): Token {\n    return new Token(index, TokenType.String, 0, text);\n}\n\nfunction newNumberToken(index: number, n: number): Token {\n    return new Token(index, TokenType.Number, n, '');\n}\n\nfunction newErrorToken(index: number, message: string): Token {\n    return new Token(index, TokenType.Error, 0, message);\n}\n\nexport const EOF: Token = new Token(-1, TokenType.Character, 0, '');\n\nclass _Scanner {\n    length: number;\n    peek: number = 0;\n    index: number = -1;\n\n    constructor(public input: string) {\n        this.length = input.length;\n        this.advance();\n    }\n\n    advance() {\n        this.peek = ++this.index >= this.length ? chars.$EOF : this.input.charCodeAt(this.index);\n    }\n\n    scanToken(): Token {\n        const input = this.input, length = this.length;\n        let peek = this.peek, index = this.index;\n\n        // Skip whitespace.\n        while (peek <= chars.$SPACE) {\n            if (++index >= length) {\n                peek = chars.$EOF;\n                break;\n            } else {\n                peek = input.charCodeAt(index);\n            }\n        }\n\n        this.peek = peek;\n        this.index = index;\n\n        if (index >= length) {\n            return null;\n        }\n\n        // Handle identifiers and numbers.\n        if (isIdentifierStart(peek)) return this.scanIdentifier();\n        if (chars.isDigit(peek)) return this.scanNumber(index);\n\n        const start: number = index;\n        switch (peek) {\n            case chars.$PERIOD:\n                this.advance();\n                return chars.isDigit(this.peek) ? this.scanNumber(start) :\n                    newCharacterToken(start, chars.$PERIOD);\n            case chars.$LPAREN:\n            case chars.$RPAREN:\n            case chars.$LBRACE:\n            case chars.$RBRACE:\n            case chars.$LBRACKET:\n            case chars.$RBRACKET:\n            case chars.$COMMA:\n            case chars.$COLON:\n            case chars.$SEMICOLON:\n                return this.scanCharacter(start, peek);\n            case chars.$SQ:\n            case chars.$DQ:\n                return this.scanString();\n            case chars.$HASH:\n            case chars.$PLUS:\n            case chars.$MINUS:\n            case chars.$STAR:\n            case chars.$SLASH:\n            case chars.$PERCENT:\n            case chars.$CARET:\n                return this.scanOperator(start, String.fromCharCode(peek));\n            case chars.$QUESTION:\n                return this.scanComplexOperator(start, '?', chars.$PERIOD, '.');\n            case chars.$LT:\n            case chars.$GT:\n                return this.scanComplexOperator(start, String.fromCharCode(peek), chars.$EQ, '=');\n            case chars.$BANG:\n            case chars.$EQ:\n                return this.scanComplexOperator(\n                    start, String.fromCharCode(peek), chars.$EQ, '=', chars.$EQ, '=');\n            case chars.$AMPERSAND:\n                return this.scanComplexOperator(start, '&', chars.$AMPERSAND, '&');\n            case chars.$BAR:\n                return this.scanComplexOperator(start, '|', chars.$BAR, '|');\n            case chars.$NBSP:\n                while (chars.isWhitespace(this.peek)) this.advance();\n                return this.scanToken();\n        }\n\n        this.advance();\n        return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);\n    }\n\n    scanCharacter(start: number, code: number): Token {\n        this.advance();\n        return newCharacterToken(start, code);\n    }\n\n\n    scanOperator(start: number, str: string): Token {\n        this.advance();\n        return newOperatorToken(start, str);\n    }\n\n    /**\n     * Tokenize a 2/3 char long operator\n     *\n     * @param start start index in the expression\n     * @param one first symbol (always part of the operator)\n     * @param twoCode code point for the second symbol\n     * @param two second symbol (part of the operator when the second code point matches)\n     * @param threeCode code point for the third symbol\n     * @param three third symbol (part of the operator when provided and matches source expression)\n     * @returns {Token}\n     */\n    scanComplexOperator(\n        start: number, one: string, twoCode: number, two: string, threeCode?: number,\n        three?: string): Token {\n        this.advance();\n        let str: string = one;\n        if (this.peek == twoCode) {\n            this.advance();\n            str += two;\n        }\n        if (threeCode != null && this.peek == threeCode) {\n            this.advance();\n            str += three;\n        }\n        return newOperatorToken(start, str);\n    }\n\n    scanIdentifier(): Token {\n        const start: number = this.index;\n        this.advance();\n        while (isIdentifierPart(this.peek)) this.advance();\n        const str: string = this.input.substring(start, this.index);\n        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :\n            newIdentifierToken(start, str);\n    }\n\n    scanNumber(start: number): Token {\n        let simple: boolean = (this.index === start);\n        this.advance();  // Skip initial digit.\n        while (true) {\n            if (chars.isDigit(this.peek)) {\n                // Do nothing.\n            } else if (this.peek == chars.$PERIOD) {\n                simple = false;\n            } else if (isExponentStart(this.peek)) {\n                this.advance();\n                if (isExponentSign(this.peek)) this.advance();\n                if (!chars.isDigit(this.peek)) return this.error('Invalid exponent', -1);\n                simple = false;\n            } else {\n                break;\n            }\n            this.advance();\n        }\n        const str: string = this.input.substring(start, this.index);\n        const value: number = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);\n        return newNumberToken(start, value);\n    }\n\n    scanString(): Token {\n        const start: number = this.index;\n        const quote: number = this.peek;\n        this.advance();  // Skip initial quote.\n\n        let buffer: string = '';\n        let marker: number = this.index;\n        const input: string = this.input;\n\n        while (this.peek != quote) {\n            if (this.peek == chars.$BACKSLASH) {\n                buffer += input.substring(marker, this.index);\n                this.advance();\n                let unescapedCode: number;\n                // Workaround for TS2.1-introduced type strictness\n                this.peek = this.peek;\n                if (this.peek == chars.$u) {\n                    // 4 character hex code for unicode character.\n                    const hex: string = input.substring(this.index + 1, this.index + 5);\n                    if (/^[0-9a-f]+$/i.test(hex)) {\n                        unescapedCode = parseInt(hex, 16);\n                    } else {\n                        return this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\n                    }\n                    for (let i: number = 0; i < 5; i++) {\n                        this.advance();\n                    }\n                } else {\n                    unescapedCode = unescape(this.peek);\n                    this.advance();\n                }\n                buffer += String.fromCharCode(unescapedCode);\n                marker = this.index;\n            } else if (this.peek == chars.$EOF) {\n                return this.error('Unterminated quote', 0);\n            } else {\n                this.advance();\n            }\n        }\n\n        const last: string = input.substring(marker, this.index);\n        this.advance();  // Skip terminating quote.\n\n        return newStringToken(start, buffer + last);\n    }\n\n    error(message: string, offset: number): Token {\n        const position: number = this.index + offset;\n        return newErrorToken(\n            position, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\n    }\n}\n\nfunction isIdentifierStart(code: number): boolean {\n    return (chars.$a <= code && code <= chars.$z) || (chars.$A <= code && code <= chars.$Z) ||\n        (code == chars.$_) || (code == chars.$$);\n}\n\nexport function isIdentifier(input: string): boolean {\n    if (input.length == 0) return false;\n    const scanner = new _Scanner(input);\n    if (!isIdentifierStart(scanner.peek)) return false;\n    scanner.advance();\n    while (scanner.peek !== chars.$EOF) {\n        if (!isIdentifierPart(scanner.peek)) return false;\n        scanner.advance();\n    }\n    return true;\n}\n\nfunction isIdentifierPart(code: number): boolean {\n    return chars.isAsciiLetter(code) || chars.isDigit(code) || (code == chars.$_) ||\n        (code == chars.$$);\n}\n\nfunction isExponentStart(code: number): boolean {\n    return code == chars.$e || code == chars.$E;\n}\n\nfunction isExponentSign(code: number): boolean {\n    return code == chars.$MINUS || code == chars.$PLUS;\n}\n\nexport function isQuote(code: number): boolean {\n    return code === chars.$SQ || code === chars.$DQ || code === chars.$BT;\n}\n\nfunction unescape(code: number): number {\n    switch (code) {\n        case chars.$n:\n            return chars.$LF;\n        case chars.$f:\n            return chars.$FF;\n        case chars.$r:\n            return chars.$CR;\n        case chars.$t:\n            return chars.$TAB;\n        case chars.$v:\n            return chars.$VTAB;\n        default:\n            return code;\n    }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as chars from './chars';\nimport {escapeRegExp, isBlank, isPresent} from '../facade/lang';\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from './interpolation-config';\n\nimport {AST, ASTWithSource, AstVisitor, Binary, BindingPipe, Chain, Conditional, EmptyExpr, FunctionCall, ImplicitReceiver, Interpolation, KeyedRead, KeyedWrite, LiteralArray, LiteralMap, LiteralPrimitive, MethodCall, ParseSpan, ParserError, PrefixNot, PropertyRead, PropertyWrite, Quote, SafeMethodCall, SafePropertyRead, TemplateBinding} from './ast';\nimport {EOF, Lexer, Token, TokenType, isIdentifier, isQuote} from './lexer';\n\n\nexport class SplitInterpolation {\n    constructor(public strings: string[], public expressions: string[], public offsets: number[]) {}\n}\n\nexport class TemplateBindingParseResult {\n    constructor(\n        public templateBindings: TemplateBinding[], public warnings: string[],\n        public errors: ParserError[]) {}\n}\n\nfunction _createInterpolateRegExp(config: InterpolationConfig): RegExp {\n    const pattern = escapeRegExp(config.start) + '([\\\\s\\\\S]*?)' + escapeRegExp(config.end);\n    return new RegExp(pattern, 'g');\n}\n\nexport class Parser {\n    private errors: ParserError[] = [];\n\n    constructor(private _lexer: Lexer) {}\n\n    parseAction(\n        input: string, location: any,\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource {\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        const sourceToLex = this._stripComments(input);\n        const tokens = this._lexer.tokenize(this._stripComments(input));\n        const ast = new _ParseAST(\n            input, location, tokens, sourceToLex.length, true, this.errors,\n            input.length - sourceToLex.length)\n            .parseChain();\n        return new ASTWithSource(ast, input, location, this.errors);\n    }\n\n    parseBinding(\n        input: string, location: any,\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource {\n        const ast = this._parseBindingAst(input, location, interpolationConfig);\n        return new ASTWithSource(ast, input, location, this.errors);\n    }\n\n    parseSimpleBinding(\n        input: string, location: string,\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource {\n        const ast = this._parseBindingAst(input, location, interpolationConfig);\n        const errors = SimpleExpressionChecker.check(ast);\n        if (errors.length > 0) {\n            this._reportError(\n                `Host binding expression cannot contain ${errors.join(' ')}`, input, location);\n        }\n        return new ASTWithSource(ast, input, location, this.errors);\n    }\n\n    private _reportError(message: string, input: string, errLocation: string, ctxLocation?: any) {\n        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\n    }\n\n    private _parseBindingAst(\n        input: string, location: string, interpolationConfig: InterpolationConfig): AST {\n        // Quotes expressions use 3rd-party expression language. We don't want to use\n        // our lexer or parser for that, so we check for that ahead of time.\n        const quote = this._parseQuote(input, location);\n\n        if (isPresent(quote)) {\n            return quote;\n        }\n\n        this._checkNoInterpolation(input, location, interpolationConfig);\n        const sourceToLex = this._stripComments(input);\n        const tokens = this._lexer.tokenize(sourceToLex);\n        return new _ParseAST(\n            input, location, tokens, sourceToLex.length, false, this.errors,\n            input.length - sourceToLex.length)\n            .parseChain();\n    }\n\n    private _parseQuote(input: string, location: any): AST {\n        if (isBlank(input)) return null;\n        const prefixSeparatorIndex = input.indexOf(':');\n        if (prefixSeparatorIndex == -1) return null;\n        const prefix = input.substring(0, prefixSeparatorIndex).trim();\n        if (!isIdentifier(prefix)) return null;\n        const uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\n        return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);\n    }\n\n    parseTemplateBindings(prefixToken: string, input: string, location: any):\n    TemplateBindingParseResult {\n        const tokens = this._lexer.tokenize(input);\n        if (prefixToken) {\n            // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).\n            const prefixTokens = this._lexer.tokenize(prefixToken).map(t => {\n                t.index = 0;\n                return t;\n            });\n            tokens.unshift(...prefixTokens);\n        }\n        return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)\n            .parseTemplateBindings();\n    }\n\n    parseInterpolation(\n        input: string, location: any,\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource {\n        const split = this.splitInterpolation(input, location, interpolationConfig);\n        if (split == null) return null;\n\n        const expressions: AST[] = [];\n\n        for (let i = 0; i < split.expressions.length; ++i) {\n            const expressionText = split.expressions[i];\n            const sourceToLex = this._stripComments(expressionText);\n            const tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));\n            const ast = new _ParseAST(\n                input, location, tokens, sourceToLex.length, false, this.errors,\n                split.offsets[i] + (expressionText.length - sourceToLex.length))\n                .parseChain();\n            expressions.push(ast);\n        }\n\n        return new ASTWithSource(\n            new Interpolation(\n                new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions),\n            input, location, this.errors);\n    }\n\n    splitInterpolation(\n        input: string, location: string,\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): SplitInterpolation {\n        const regexp = _createInterpolateRegExp(interpolationConfig);\n        const parts = input.split(regexp);\n        if (parts.length <= 1) {\n            return null;\n        }\n        const strings: string[] = [];\n        const expressions: string[] = [];\n        const offsets: number[] = [];\n        let offset = 0;\n        for (let i = 0; i < parts.length; i++) {\n            const part: string = parts[i];\n            if (i % 2 === 0) {\n                // fixed string\n                strings.push(part);\n                offset += part.length;\n            } else if (part.trim().length > 0) {\n                offset += interpolationConfig.start.length;\n                expressions.push(part);\n                offsets.push(offset);\n                offset += part.length + interpolationConfig.end.length;\n            } else {\n                this._reportError(\n                    'Blank expressions are not allowed in interpolated strings', input,\n                    `at column ${this._findInterpolationErrorColumn(parts, i, interpolationConfig)} in`,\n                    location);\n                expressions.push('$implict');\n                offsets.push(offset);\n            }\n        }\n        return new SplitInterpolation(strings, expressions, offsets);\n    }\n\n    wrapLiteralPrimitive(input: string, location: any): ASTWithSource {\n        return new ASTWithSource(\n            new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input,\n            location, this.errors);\n    }\n\n    private _stripComments(input: string): string {\n        const i = this._commentStart(input);\n        return isPresent(i) ? input.substring(0, i).trim() : input;\n    }\n\n    private _commentStart(input: string): number {\n        let outerQuote: number = null;\n        for (let i = 0; i < input.length - 1; i++) {\n            const char = input.charCodeAt(i);\n            const nextChar = input.charCodeAt(i + 1);\n\n            if (char === chars.$SLASH && nextChar == chars.$SLASH && isBlank(outerQuote)) return i;\n\n            if (outerQuote === char) {\n                outerQuote = null;\n            } else if (isBlank(outerQuote) && isQuote(char)) {\n                outerQuote = char;\n            }\n        }\n        return null;\n    }\n\n    private _checkNoInterpolation(\n        input: string, location: any, interpolationConfig: InterpolationConfig): void {\n        const regexp = _createInterpolateRegExp(interpolationConfig);\n        const parts = input.split(regexp);\n        if (parts.length > 1) {\n            this._reportError(\n                `Got interpolation (${interpolationConfig.start}${interpolationConfig.end}) where expression was expected`,\n                input,\n                `at column ${this._findInterpolationErrorColumn(parts, 1, interpolationConfig)} in`,\n                location);\n        }\n    }\n\n    private _findInterpolationErrorColumn(\n        parts: string[], partInErrIdx: number, interpolationConfig: InterpolationConfig): number {\n        let errLocation = '';\n        for (let j = 0; j < partInErrIdx; j++) {\n            errLocation += j % 2 === 0 ?\n                parts[j] :\n                `${interpolationConfig.start}${parts[j]}${interpolationConfig.end}`;\n        }\n\n        return errLocation.length;\n    }\n}\n\nexport class _ParseAST {\n    private rparensExpected = 0;\n    private rbracketsExpected = 0;\n    private rbracesExpected = 0;\n\n    index: number = 0;\n\n    constructor(\n        public input: string, public location: any, public tokens: Token[],\n        public inputLength: number, public parseAction: boolean, private errors: ParserError[],\n        private offset: number) {}\n\n    peek(offset: number): Token {\n        const i = this.index + offset;\n        return i < this.tokens.length ? this.tokens[i] : EOF;\n    }\n\n    get next(): Token { return this.peek(0); }\n\n    get inputIndex(): number {\n        return (this.index < this.tokens.length) ? this.next.index + this.offset :\n            this.inputLength + this.offset;\n    }\n\n    span(start: number) { return new ParseSpan(start, this.inputIndex); }\n\n    advance() { this.index++; }\n\n    optionalCharacter(code: number): boolean {\n        if (this.next.isCharacter(code)) {\n            this.advance();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    peekKeywordLet(): boolean { return this.next.isKeywordLet(); }\n\n    expectCharacter(code: number) {\n        if (this.optionalCharacter(code)) return;\n        this.error(`Missing expected ${String.fromCharCode(code)}`);\n    }\n\n    optionalOperator(op: string): boolean {\n        if (this.next.isOperator(op)) {\n            this.advance();\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    expectOperator(operator: string) {\n        if (this.optionalOperator(operator)) return;\n        this.error(`Missing expected operator ${operator}`);\n    }\n\n    expectIdentifierOrKeyword(): string {\n        const n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword()) {\n            this.error(`Unexpected token ${n}, expected identifier or keyword`);\n            return '';\n        }\n        this.advance();\n        return n.toString();\n    }\n\n    expectIdentifierOrKeywordOrString(): string {\n        const n = this.next;\n        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\n            this.error(`Unexpected token ${n}, expected identifier, keyword, or string`);\n            return '';\n        }\n        this.advance();\n        return n.toString();\n    }\n\n    parseChain(): AST {\n        const exprs: AST[] = [];\n        const start = this.inputIndex;\n        while (this.index < this.tokens.length) {\n            const expr = this.parsePipe();\n            exprs.push(expr);\n\n            if (this.optionalCharacter(chars.$SEMICOLON)) {\n                if (!this.parseAction) {\n                    this.error('Binding expression cannot contain chained expression');\n                }\n                while (this.optionalCharacter(chars.$SEMICOLON)) {\n                }  // read all semicolons\n            } else if (this.index < this.tokens.length) {\n                this.error(`Unexpected token '${this.next}'`);\n            }\n        }\n        if (exprs.length == 0) return new EmptyExpr(this.span(start));\n        if (exprs.length == 1) return exprs[0];\n        return new Chain(this.span(start), exprs);\n    }\n\n    parsePipe(): AST {\n        let result = this.parseExpression();\n        if (this.optionalOperator('|')) {\n            if (this.parseAction) {\n                this.error('Cannot have a pipe in an action expression');\n            }\n\n            do {\n                const name = this.expectIdentifierOrKeyword();\n                const args: AST[] = [];\n                while (this.optionalCharacter(chars.$COLON)) {\n                    args.push(this.parseExpression());\n                }\n                result = new BindingPipe(this.span(result.span.start), result, name, args);\n            } while (this.optionalOperator('|'));\n        }\n\n        return result;\n    }\n\n    parseExpression(): AST { return this.parseConditional(); }\n\n    parseConditional(): AST {\n        const start = this.inputIndex;\n        const result = this.parseLogicalOr();\n\n        if (this.optionalOperator('?')) {\n            const yes = this.parsePipe();\n            let no: AST;\n            if (!this.optionalCharacter(chars.$COLON)) {\n                const end = this.inputIndex;\n                const expression = this.input.substring(start, end);\n                this.error(`Conditional expression ${expression} requires all 3 expressions`);\n                no = new EmptyExpr(this.span(start));\n            } else {\n                no = this.parsePipe();\n            }\n            return new Conditional(this.span(start), result, yes, no);\n        } else {\n            return result;\n        }\n    }\n\n    parseLogicalOr(): AST {\n        // '||'\n        let result = this.parseLogicalAnd();\n        while (this.optionalOperator('||')) {\n            const right = this.parseLogicalAnd();\n            result = new Binary(this.span(result.span.start), '||', result, right);\n        }\n        return result;\n    }\n\n    parseLogicalAnd(): AST {\n        // '&&'\n        let result = this.parseEquality();\n        while (this.optionalOperator('&&')) {\n            const right = this.parseEquality();\n            result = new Binary(this.span(result.span.start), '&&', result, right);\n        }\n        return result;\n    }\n\n    parseEquality(): AST {\n        // '==','!=','===','!=='\n        let result = this.parseRelational();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '==':\n                case '===':\n                case '!=':\n                case '!==':\n                    this.advance();\n                    const right = this.parseRelational();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n\n    parseRelational(): AST {\n        // '<', '>', '<=', '>='\n        let result = this.parseAdditive();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '<':\n                case '>':\n                case '<=':\n                case '>=':\n                    this.advance();\n                    const right = this.parseAdditive();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n\n    parseAdditive(): AST {\n        // '+', '-'\n        let result = this.parseMultiplicative();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '+':\n                case '-':\n                    this.advance();\n                    let right = this.parseMultiplicative();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n\n    parseMultiplicative(): AST {\n        // '*', '%', '/'\n        let result = this.parsePrefix();\n        while (this.next.type == TokenType.Operator) {\n            const operator = this.next.strValue;\n            switch (operator) {\n                case '*':\n                case '%':\n                case '/':\n                    this.advance();\n                    let right = this.parsePrefix();\n                    result = new Binary(this.span(result.span.start), operator, result, right);\n                    continue;\n            }\n            break;\n        }\n        return result;\n    }\n\n    parsePrefix(): AST {\n        if (this.next.type == TokenType.Operator) {\n            const start = this.inputIndex;\n            const operator = this.next.strValue;\n            let result: AST;\n            switch (operator) {\n                case '+':\n                    this.advance();\n                    return this.parsePrefix();\n                case '-':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new Binary(\n                        this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0),\n                        result);\n                case '!':\n                    this.advance();\n                    result = this.parsePrefix();\n                    return new PrefixNot(this.span(start), result);\n            }\n        }\n        return this.parseCallChain();\n    }\n\n    parseCallChain(): AST {\n        let result = this.parsePrimary();\n        while (true) {\n            if (this.optionalCharacter(chars.$PERIOD)) {\n                result = this.parseAccessMemberOrMethodCall(result, false);\n\n            } else if (this.optionalOperator('?.')) {\n                result = this.parseAccessMemberOrMethodCall(result, true);\n\n            } else if (this.optionalCharacter(chars.$LBRACKET)) {\n                this.rbracketsExpected++;\n                const key = this.parsePipe();\n                this.rbracketsExpected--;\n                this.expectCharacter(chars.$RBRACKET);\n                if (this.optionalOperator('=')) {\n                    const value = this.parseConditional();\n                    result = new KeyedWrite(this.span(result.span.start), result, key, value);\n                } else {\n                    result = new KeyedRead(this.span(result.span.start), result, key);\n                }\n\n            } else if (this.optionalCharacter(chars.$LPAREN)) {\n                this.rparensExpected++;\n                const args = this.parseCallArguments();\n                this.rparensExpected--;\n                this.expectCharacter(chars.$RPAREN);\n                result = new FunctionCall(this.span(result.span.start), result, args);\n\n            } else {\n                return result;\n            }\n        }\n    }\n\n    parsePrimary(): AST {\n        const start = this.inputIndex;\n        if (this.optionalCharacter(chars.$LPAREN)) {\n            this.rparensExpected++;\n            const result = this.parsePipe();\n            this.rparensExpected--;\n            this.expectCharacter(chars.$RPAREN);\n            return result;\n\n        } else if (this.next.isKeywordNull()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), null);\n\n        } else if (this.next.isKeywordUndefined()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), void 0);\n\n        } else if (this.next.isKeywordTrue()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), true);\n\n        } else if (this.next.isKeywordFalse()) {\n            this.advance();\n            return new LiteralPrimitive(this.span(start), false);\n\n        } else if (this.next.isKeywordThis()) {\n            this.advance();\n            return new ImplicitReceiver(this.span(start));\n\n        } else if (this.optionalCharacter(chars.$LBRACKET)) {\n            this.rbracketsExpected++;\n            const elements = this.parseExpressionList(chars.$RBRACKET);\n            this.rbracketsExpected--;\n            this.expectCharacter(chars.$RBRACKET);\n            return new LiteralArray(this.span(start), elements);\n\n        } else if (this.next.isCharacter(chars.$LBRACE)) {\n            return this.parseLiteralMap();\n\n        } else if (this.next.isIdentifier()) {\n            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);\n\n        } else if (this.next.isNumber()) {\n            const value = this.next.toNumber();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), value);\n\n        } else if (this.next.isString()) {\n            const literalValue = this.next.toString();\n            this.advance();\n            return new LiteralPrimitive(this.span(start), literalValue);\n\n        } else if (this.index >= this.tokens.length) {\n            this.error(`Unexpected end of expression: ${this.input}`);\n            return new EmptyExpr(this.span(start));\n        } else {\n            this.error(`Unexpected token ${this.next}`);\n            return new EmptyExpr(this.span(start));\n        }\n    }\n\n    parseExpressionList(terminator: number): AST[] {\n        const result: AST[] = [];\n        if (!this.next.isCharacter(terminator)) {\n            do {\n                result.push(this.parsePipe());\n            } while (this.optionalCharacter(chars.$COMMA));\n        }\n        return result;\n    }\n\n    parseLiteralMap(): LiteralMap {\n        const keys: string[] = [];\n        const values: AST[] = [];\n        const start = this.inputIndex;\n        this.expectCharacter(chars.$LBRACE);\n        if (!this.optionalCharacter(chars.$RBRACE)) {\n            this.rbracesExpected++;\n            do {\n                const key = this.expectIdentifierOrKeywordOrString();\n                keys.push(key);\n                this.expectCharacter(chars.$COLON);\n                values.push(this.parsePipe());\n            } while (this.optionalCharacter(chars.$COMMA));\n            this.rbracesExpected--;\n            this.expectCharacter(chars.$RBRACE);\n        }\n        return new LiteralMap(this.span(start), keys, values);\n    }\n\n    parseAccessMemberOrMethodCall(receiver: AST, isSafe: boolean = false): AST {\n        const start = receiver.span.start;\n        const id = this.expectIdentifierOrKeyword();\n\n        if (this.optionalCharacter(chars.$LPAREN)) {\n            this.rparensExpected++;\n            const args = this.parseCallArguments();\n            this.expectCharacter(chars.$RPAREN);\n            this.rparensExpected--;\n            const span = this.span(start);\n            return isSafe ? new SafeMethodCall(span, receiver, id, args) :\n                new MethodCall(span, receiver, id, args);\n\n        } else {\n            if (isSafe) {\n                if (this.optionalOperator('=')) {\n                    this.error('The \\'?.\\' operator cannot be used in the assignment');\n                    return new EmptyExpr(this.span(start));\n                } else {\n                    return new SafePropertyRead(this.span(start), receiver, id);\n                }\n            } else {\n                if (this.optionalOperator('=')) {\n                    if (!this.parseAction) {\n                        this.error('Bindings cannot contain assignments');\n                        return new EmptyExpr(this.span(start));\n                    }\n\n                    const value = this.parseConditional();\n                    return new PropertyWrite(this.span(start), receiver, id, value);\n                } else {\n                    return new PropertyRead(this.span(start), receiver, id);\n                }\n            }\n        }\n    }\n\n    parseCallArguments(): BindingPipe[] {\n        if (this.next.isCharacter(chars.$RPAREN)) return [];\n        const positionals: AST[] = [];\n        do {\n            positionals.push(this.parsePipe());\n        } while (this.optionalCharacter(chars.$COMMA));\n        return positionals as BindingPipe[];\n    }\n\n    /**\n     * An identifier, a keyword, a string with an optional `-` inbetween.\n     */\n    expectTemplateBindingKey(): string {\n        let result = '';\n        let operatorFound = false;\n        do {\n            result += this.expectIdentifierOrKeywordOrString();\n            operatorFound = this.optionalOperator('-');\n            if (operatorFound) {\n                result += '-';\n            }\n        } while (operatorFound);\n\n        return result.toString();\n    }\n\n    parseTemplateBindings(): TemplateBindingParseResult {\n        const bindings: TemplateBinding[] = [];\n        let prefix: string = null;\n        const warnings: string[] = [];\n        while (this.index < this.tokens.length) {\n            const start = this.inputIndex;\n            const keyIsVar: boolean = this.peekKeywordLet();\n            if (keyIsVar) {\n                this.advance();\n            }\n            let key = this.expectTemplateBindingKey();\n            if (!keyIsVar) {\n                if (prefix == null) {\n                    prefix = key;\n                } else {\n                    key = prefix + key[0].toUpperCase() + key.substring(1);\n                }\n            }\n            this.optionalCharacter(chars.$COLON);\n            let name: string = null;\n            let expression: ASTWithSource = null;\n            if (keyIsVar) {\n                if (this.optionalOperator('=')) {\n                    name = this.expectTemplateBindingKey();\n                } else {\n                    name = '\\$implicit';\n                }\n            } else if (this.next !== EOF && !this.peekKeywordLet()) {\n                const start = this.inputIndex;\n                const ast = this.parsePipe();\n                const source = this.input.substring(start - this.offset, this.inputIndex - this.offset);\n                expression = new ASTWithSource(ast, source, this.location, this.errors);\n            }\n            bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name, expression));\n            if (!this.optionalCharacter(chars.$SEMICOLON)) {\n                this.optionalCharacter(chars.$COMMA);\n            }\n        }\n        return new TemplateBindingParseResult(bindings, warnings, this.errors);\n    }\n\n    error(message: string, index: number = null) {\n        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\n        this.skip();\n    }\n\n    private locationText(index: number = null) {\n        if (isBlank(index)) index = this.index;\n        return (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :\n            `at the end of the expression`;\n    }\n\n    // Error recovery should skip tokens until it encounters a recovery point. skip() treats\n    // the end of input and a ';' as unconditionally a recovery point. It also treats ')',\n    // '}' and ']' as conditional recovery points if one of calling productions is expecting\n    // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing\n    // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because\n    // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols\n    // must be conditional as they must be skipped if none of the calling productions are not\n    // expecting the closing token else we will never make progress in the case of an\n    // extraneous group closing symbol (such as a stray ')'). This is not the case for ';' because\n    // parseChain() is always the root production and it expects a ';'.\n\n    // If a production expects one of these token it increments the corresponding nesting count,\n    // and then decrements it just prior to checking if the token is in the input.\n    private skip() {\n        let n = this.next;\n        while (this.index < this.tokens.length && !n.isCharacter(chars.$SEMICOLON) &&\n        (this.rparensExpected <= 0 || !n.isCharacter(chars.$RPAREN)) &&\n        (this.rbracesExpected <= 0 || !n.isCharacter(chars.$RBRACE)) &&\n        (this.rbracketsExpected <= 0 || !n.isCharacter(chars.$RBRACKET))) {\n            if (this.next.isError()) {\n                this.errors.push(\n                    new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\n            }\n            this.advance();\n            n = this.next;\n        }\n    }\n}\n\nclass SimpleExpressionChecker implements AstVisitor {\n    static check(ast: AST): string[] {\n        const s = new SimpleExpressionChecker();\n        ast.visit(s);\n        return s.errors;\n    }\n\n    errors: string[] = [];\n\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any) {}\n\n    visitInterpolation(ast: Interpolation, context: any) {}\n\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any) {}\n\n    visitPropertyRead(ast: PropertyRead, context: any) {}\n\n    visitPropertyWrite(ast: PropertyWrite, context: any) {}\n\n    visitSafePropertyRead(ast: SafePropertyRead, context: any) {}\n\n    visitMethodCall(ast: MethodCall, context: any) {}\n\n    visitSafeMethodCall(ast: SafeMethodCall, context: any) {}\n\n    visitFunctionCall(ast: FunctionCall, context: any) {}\n\n    visitLiteralArray(ast: LiteralArray, context: any) { this.visitAll(ast.expressions); }\n\n    visitLiteralMap(ast: LiteralMap, context: any) { this.visitAll(ast.values); }\n\n    visitBinary(ast: Binary, context: any) {}\n\n    visitPrefixNot(ast: PrefixNot, context: any) {}\n\n    visitConditional(ast: Conditional, context: any) {}\n\n    visitPipe(ast: BindingPipe, context: any) { this.errors.push('pipes'); }\n\n    visitKeyedRead(ast: KeyedRead, context: any) {}\n\n    visitKeyedWrite(ast: KeyedWrite, context: any) {}\n\n    visitAll(asts: any[]): any[] { return asts.map(node => node.visit(this)); }\n\n    visitChain(ast: Chain, context: any) {}\n\n    visitQuote(ast: Quote, context: any) {}\n}","export const BinaryOperations = new Map<string, any>([\n    ['==', (left: any, right: any) => left == right],\n    ['===', (left: any, right: any) => left === right],\n    ['!=', (left: any, right: any) => left != right],\n    ['!==', (left: any, right: any) => left !== right],\n    ['&&', (left: any, right: any) => left && right],\n    ['||', (left: any, right: any) => left || right],\n    ['+', (left: any, right: any) => left + right],\n    ['-', (left: any, right: any) => left - right],\n    ['/', (left: any, right: any) => left / right],\n    ['*', (left: any, right: any) => left * right],\n    ['%', (left: any, right: any) => left % right],\n    ['<', (left: any, right: any) => left < right],\n    ['<=', (left: any, right: any) => left <= right],\n    ['>', (left: any, right: any) => left > right],\n    ['>=', (left: any, right: any) => left >= right],\n]);","export function compileToJSON(json: any) {\n    return JSON.stringify(json).replace(/\"/g, '');\n}\n\nexport function isPresent(obj: any) {\n    return obj !== null && obj !== undefined;\n}\n\nexport function isJsObject(obj: any) {\n    return obj !== null && (typeof obj === 'function' || typeof obj === 'object');\n}\n\nexport function isFunction(val: any) {\n    return typeof val === 'function';\n}","import {\n    AST,\n    RecursiveAstVisitor,\n    PropertyRead,\n    MethodCall,\n    KeyedRead,\n    ImplicitReceiver,\n    LiteralPrimitive,\n    Binary,\n    Chain,\n    Conditional,\n    BindingPipe,\n    FunctionCall,\n    Interpolation,\n    KeyedWrite,\n    LiteralArray,\n    LiteralMap,\n    PrefixNot,\n    PropertyWrite,\n    SafePropertyRead,\n    SafeMethodCall,\n    Quote\n} from '../angular';\nimport { compileToJSON } from '../util';\n\nexport class ParseVisitorCompiler extends RecursiveAstVisitor {\n\n    visitBinary(ast: Binary): any {\n        const left = ast.left.visit(this);\n        const right = ast.right.visit(this);\n\n        return `${left} ${ast.operation} ${right}`;\n    }\n\n    // TODO\n    visitChain(ast: Chain): any {\n        return compileToJSON(this.visitAll(ast.expressions));\n    }\n\n    visitConditional(ast: Conditional): any {\n        const condition = ast.condition.visit(this);\n        const trueExp = ast.trueExp.visit(this);\n        const falseExp = ast.falseExp.visit(this);\n\n        return `${condition} ? ${trueExp} : ${falseExp}`;\n    }\n\n    visitPipe(ast: BindingPipe): any {\n        const pipe = ast.name;\n        const args = this.visitAll(ast.args);\n        const value = ast.exp.visit(this);\n        args.unshift(value);\n\n        return `pipesCache.get('${pipe}').transform.apply(null, ${compileToJSON(args)})`;\n    }\n\n    // TODO\n    visitFunctionCall(ast: FunctionCall): any {\n        const target = ast.target.visit(this);\n        const args = compileToJSON(this.visitAll(ast.args));\n\n        return `${target}.apply(${target}, ${args})`;\n    }\n\n    visitImplicitReceiver(ast: ImplicitReceiver): any {\n        return `context`;\n    }\n\n    visitInterpolation(ast: Interpolation): any {\n        return this.visitAll(ast.expressions)[0];\n    }\n\n    visitKeyedRead(ast: KeyedRead): any {\n        const obj = ast.obj.visit(this);\n        const key = ast.key.visit(this);\n\n        return `${obj}[${key}]`;\n    }\n\n    visitKeyedWrite(ast: KeyedWrite): any {\n        return null;\n    }\n\n    visitLiteralArray(ast: LiteralArray): any {\n        return compileToJSON(this.visitAll(ast.expressions));\n    }\n\n    visitLiteralMap(ast: LiteralMap): any {\n        const result = {};\n        const keys = ast.keys;\n        const values = this.visitAll(ast.values);\n\n        for (let i = 0, length = keys.length; i < length; i++) {\n            result[keys[i]] = values[i];\n        }\n\n        return compileToJSON(result);\n    }\n\n    visitLiteralPrimitive(ast: LiteralPrimitive): any {\n        return typeof ast.value === 'string' ? `'${ast.value}'` : ast.value;\n    }\n\n    visitMethodCall(ast: MethodCall): any {\n        const methodName = ast.name;\n        const receiver = ast.receiver.visit(this);\n        const args = compileToJSON(this.visitAll(ast.args));\n\n        return `${receiver}['${methodName}'].apply(${receiver}, ${args})`;\n    }\n\n    visitPrefixNot(ast: PrefixNot): any {\n        return ast.expression.visit(this);\n    }\n\n    visitPropertyRead(ast: PropertyRead): any {\n        const property = ast.name;\n        const receiver = ast.receiver.visit(this);\n\n        return `${receiver}['${property}']`;\n    }\n\n    visitPropertyWrite(ast: PropertyWrite): any {\n        return null;\n    }\n\n    visitSafePropertyRead(ast: SafePropertyRead): any {\n        const property = ast.name;\n        const receiver = ast.receiver.visit(this);\n\n        return `${receiver}['${property}']`;\n    }\n\n    visitSafeMethodCall(ast: SafeMethodCall): any {\n        const methodName = ast.name;\n        const receiver = ast.receiver.visit(this);\n        const args = compileToJSON(this.visitAll(ast.args));\n\n        return `${receiver}['${methodName}'].apply(${receiver}, ${args})`;\n    }\n\n    visitAll(asts: AST[]): any {\n        return asts.map(ast => ast.visit(this));\n    }\n\n    visitQuote(ast: Quote): any {\n        return null;\n    }\n}","import {\n    AST,\n    RecursiveAstVisitor,\n    PropertyRead,\n    MethodCall,\n    KeyedRead,\n    ImplicitReceiver,\n    LiteralPrimitive,\n    Binary,\n    Chain,\n    Conditional,\n    BindingPipe,\n    FunctionCall,\n    Interpolation,\n    KeyedWrite,\n    LiteralArray,\n    LiteralMap,\n    PrefixNot,\n    PropertyWrite,\n    SafePropertyRead,\n    SafeMethodCall,\n    Quote\n} from '../angular';\nimport * as util from '../util';\nimport { BinaryOperations } from '../util/binary-operations';\n\nexport class ParseVisitorResolver extends RecursiveAstVisitor {\n\n    constructor(private pipes: Map<string, any>) {\n        super();\n    };\n\n    visitBinary(ast: Binary, context: any): any {\n        const execFn = BinaryOperations.get(ast.operation);\n\n        if (!execFn) {\n            throw new Error(`Parse ERROR: on visitBinary, unknown operator ${ast.operation}`);\n        }\n\n        return execFn(ast.left.visit(this, context), ast.right.visit(this, context));\n    }\n\n    // TODO\n    visitChain(ast: Chain, context: any): any {\n        return this.visitAll(ast.expressions, context);\n    }\n\n    visitConditional(ast: Conditional, context: any): any {\n        if (ast.condition.visit(this, context)) {\n            return ast.trueExp.visit(this, context);\n        }\n        else if (util.isPresent(ast.falseExp)) {\n            return ast.falseExp.visit(this, context);\n        }\n\n        return null;\n    }\n\n    visitPipe(ast: BindingPipe, context: any): any {\n        const pipe = this.pipes.get(ast.name);\n\n        if (!pipe) {\n            throw new Error(`pipe ${ast.name} not found.`);\n        }\n\n        if (!pipe.transform) {\n            throw new Error(`Parse ERROR: on visitPipe, transform method doesn't exist on pipe ${ast.name}.`);\n        }\n\n        const value = ast.exp.visit(this, context);\n        const pipeArgs = this.visitAll(ast.args, context);\n\n        pipeArgs.unshift(value);\n\n        return pipe.transform.apply(null, pipeArgs);\n    }\n\n    // TODO\n    visitFunctionCall(ast: FunctionCall, context: any): any {\n        const target = ast.target.visit(this, context);\n\n        if (!util.isFunction(target)) {\n            throw new Error(`Parse ERROR: on visitFunctionCall, target is not a function.`);\n        }\n\n        const args = this.visitAll(ast.args, context);\n        return target.apply(target, args);\n    }\n\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): any {\n        return context;\n    }\n\n    visitInterpolation(ast: Interpolation, context: any): any {\n        return this.visitAll(ast.expressions, context)[0];\n    }\n\n    visitKeyedRead(ast: KeyedRead, context: any): any {\n        const obj = ast.obj.visit(this, context);\n        const key = ast.key.visit(this, context);\n        return obj[key];\n    }\n\n    visitKeyedWrite(ast: KeyedWrite, context: any): any {\n        const obj = ast.obj.visit(this, context);\n        const key = ast.key.visit(this, context);\n        const value = ast.value.visit(this, context);\n        obj[key] = value;\n        return null;\n    }\n\n    visitLiteralArray(ast: LiteralArray, context: any): any {\n        return this.visitAll(ast.expressions, context);\n    }\n\n    visitLiteralMap(ast: LiteralMap, context: any): any {\n        const result = {};\n        const keys = ast.keys;\n        const values = this.visitAll(ast.values, context);\n\n        for (let i = 0, length = keys.length; i < length; i++) {\n            result[keys[i]] = values[i];\n        }\n\n        return result;\n    }\n\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any {\n        return ast.value;\n    }\n\n    visitMethodCall(ast: MethodCall, context: any): any {\n        const receiver = ast.receiver.visit(this, context);\n\n        if (!util.isJsObject(receiver)) {\n            throw new Error(`Parse ERROR: on visitMethodCall, invalid method receiver.`);\n        }\n\n        const method = receiver[ast.name];\n\n        if (!util.isFunction(method)) {\n            throw new Error(`Parse ERROR: on visitMethodCall, method ${ast.name} doesn't exist on receiver.`);\n        }\n\n        const args = this.visitAll(ast.args, context);\n        return method.apply(receiver, args);\n    }\n\n    visitPrefixNot(ast: PrefixNot, context: any): any {\n        return ast.expression.visit(this, context);\n    }\n\n    visitPropertyRead(ast: PropertyRead, context: any): any {\n        const receiver = ast.receiver.visit(this, context);\n\n        if (!util.isJsObject(receiver)) {\n            throw new Error(`Parse ERROR: on visitPropertyRead, invalid property receiver.`);\n        }\n\n        return receiver[ast.name];\n    }\n\n    visitPropertyWrite(ast: PropertyWrite, context: any): any {\n        const receiver = ast.receiver.visit(this, context);\n\n        if (!util.isJsObject(receiver)) {\n            throw new Error(`Parse ERROR: on visitPropertyRead, invalid property receiver.`);\n        }\n\n        receiver[ast.name] = ast.value.visit(this, context);\n        return null;\n    }\n\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): any {\n        const receiver = ast.receiver.visit(this, context);\n\n        if (!util.isJsObject(receiver)) {\n            throw new Error(`Parse ERROR: on visitSafePropertyRead, invalid property receiver.`);\n        }\n\n        return receiver[ast.name];\n    }\n\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): any {\n        const receiver = ast.receiver.visit(this, context);\n\n        if (!util.isJsObject(receiver)) {\n            throw new Error(`Parse ERROR: on visitSafeMethodCall, invalid method receiver.`);\n        }\n\n        const method = receiver[ast.name];\n\n        if (!util.isFunction(method)) {\n            throw new Error(`Parse ERROR: on visitSafeMethodCall, method ${ast.name} doesn't exist on receiver.`);\n        }\n\n        const args = this.visitAll(ast.args, context);\n        return method.apply(receiver, args);\n    }\n\n    visitAll(asts: AST[], context: any): any {\n        return asts.map(ast => ast.visit(this, context));\n    }\n\n    visitQuote(ast: Quote, context: any): any {\n        throw new Error(`Parse ERROR: on visitQuote, quote expression not allowed.`);\n    }\n}","import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';\nimport { Parser, Lexer, ASTWithSource } from './angular';\nimport { ParseVisitorResolver, ParseVisitorCompiler } from './visitors';\n\nexport const PIPES_CONFIG = new InjectionToken('PipesConfig');\n\nexport interface PipesConfig {\n  pipeName: string;\n  pipeInstance: any;\n}\n\n@Injectable({providedIn: 'root'})\nexport class Parse {\n  private _parser: Parser = new Parser(new Lexer());\n  private _pipesCache: Map<string, any> = new Map<string, any>();\n  private _evalCache: Map<string, Function> = new Map<string, Function>();\n  private _calcCache: Map<string, Function> = new Map<string, Function>();\n\n  /**\n   * Used to dependency inject the Angular 2 parser.\n   */\n\n  constructor(@Optional() @Inject(PIPES_CONFIG) pipesConfigs: PipesConfig[][]) {\n    if (pipesConfigs && pipesConfigs.length) {\n      pipesConfigs\n        .filter(pipes => pipes && pipes.length)\n        .forEach(pipes => pipes.forEach((pipeData) => this._pipesCache.set(pipeData.pipeName, pipeData.pipeInstance)));\n    }\n  }\n\n  eval(expression: string): Function {\n    if (this._evalCache.has(expression)) {\n      return this._evalCache.get(expression);\n    }\n\n    const visitor = new ParseVisitorCompiler();\n\n    let ast: ASTWithSource = this._parser.parseInterpolation(expression, 'Parse');\n\n    if (!ast) {\n      ast = this._parser.parseBinding(expression, 'Parse');\n    }\n\n    const fnBody = ast.visit(visitor);\n    const pipesCache = this._pipesCache;\n    const getFn = new Function('context', 'pipesCache', `return ${fnBody};`);\n\n    const evalParse = function evalParse(context: any): any {\n      return getFn(context, pipesCache);\n    };\n\n    this._evalCache.set(expression, evalParse);\n\n    return evalParse;\n  }\n\n  calc(expression: string): Function {\n    if (this._calcCache.has(expression)) {\n      return this._calcCache.get(expression);\n    }\n\n    const visitor = new ParseVisitorResolver(this._pipesCache);\n\n    let ast: ASTWithSource = this._parser.parseInterpolation(expression, 'Parse');\n\n    if (!ast) {\n      ast = this._parser.parseBinding(expression, 'Parse');\n    }\n\n    const calcParse = function calcParse(context: any): any {\n      return ast.visit(visitor, context);\n    };\n\n    this._calcCache.set(expression, calcParse);\n\n    return calcParse;\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { Parse, PIPES_CONFIG, PipesConfig } from './parse';\n\n@NgModule()\nexport class Angular2ParseModule {\n  static forRoot(pipesConfigMap: PipesConfig[]): ModuleWithProviders {\n    return {\n      ngModule: Angular2ParseModule,\n      providers: [{provide: PIPES_CONFIG, multi: true, useValue: pipesConfigMap || []}]\n    };\n  }\n}\n"],"names":["chars.$EOF","chars.$SPACE","chars.isDigit","chars.$PERIOD","chars.$LPAREN","chars.$RPAREN","chars.$LBRACE","chars.$RBRACE","chars.$LBRACKET","chars.$RBRACKET","chars.$COMMA","chars.$COLON","chars.$SEMICOLON","chars.$SQ","chars.$DQ","chars.$HASH","chars.$PLUS","chars.$MINUS","chars.$STAR","chars.$SLASH","chars.$PERCENT","chars.$CARET","chars.$QUESTION","chars.$LT","chars.$GT","chars.$EQ","chars.$BANG","chars.$AMPERSAND","chars.$BAR","chars.$NBSP","chars.isWhitespace","chars.$BACKSLASH","chars.$u","chars.$a","chars.$z","chars.$A","chars.$Z","chars.$_","chars.$$","chars.isAsciiLetter","chars.$e","chars.$E","chars.$BT","chars.$n","chars.$LF","chars.$f","chars.$FF","chars.$r","chars.$CR","chars.$t","chars.$TAB","chars.$v","chars.$VTAB","isPresent","isJsObject","util.isPresent","util.isFunction","util.isJsObject","InjectionToken","Optional","Inject","Injectable","NgModule"],"mappings":"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"}