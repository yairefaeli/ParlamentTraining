{"version":3,"sources":["../src/angular/compiler/assertions.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH,OAAO,EAAC,OAAO,EAAE,SAAS,EAAC,MAAM,gBAAgB,CAAC;AAElD,IAAM,SAAS,GAAG,cAAM,OAAA,KAAK,EAAL,CAAK,CAAC;AAE9B,MAAM,+BAA+B,UAAkB,EAAE,KAAU;IAC/D,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC;IACX,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,MAAM,IAAI,KAAK,CAAC,eAAa,UAAU,iCAA8B,CAAC,CAAC;IAC3E,CAAC;IACD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QACvC,EAAE,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,eAAa,UAAU,iCAA8B,CAAC,CAAC;QAC3E,CAAC;IACL,CAAC;AACL,CAAC;AAED,IAAM,+BAA+B,GAAG;IACpC,OAAO;IACP,MAAM;IACN,QAAQ;IACR,aAAa;IACb,OAAO;CACV,CAAC;AAEF,MAAM,qCAAqC,UAAkB,EAAE,KAAU;IACrE,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,MAAM,IAAI,KAAK,CAAC,eAAa,UAAU,oCAAiC,CAAC,CAAC;IAC9E,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxC,IAAM,OAAK,GAAG,KAAK,CAAC,CAAC,CAAW,CAAC;QACjC,IAAM,KAAG,GAAG,KAAK,CAAC,CAAC,CAAW,CAAC;QAC/B,sBAAsB;QACtB,+BAA+B,CAAC,OAAO,CAAC,UAAA,MAAM;YAC1C,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAG,CAAC,CAAC,CAAC,CAAC;gBACzC,MAAM,IAAI,KAAK,CAAC,OAAK,OAAK,YAAO,KAAG,+CAA4C,CAAC,CAAC;YACtF,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;AACL,CAAC","file":"assertions.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\r\nimport {isBlank, isPresent} from '../facade/lang';\r\n\r\nconst isDevMode = () => false;\r\n\r\nexport function assertArrayOfStrings(identifier: string, value: any) {\r\n    if (!isDevMode() || isBlank(value)) {\r\n        return;\r\n    }\r\n    if (!Array.isArray(value)) {\r\n        throw new Error(`Expected '${identifier}' to be an array of strings.`);\r\n    }\r\n    for (let i = 0; i < value.length; i += 1) {\r\n        if (typeof value[i] !== 'string') {\r\n            throw new Error(`Expected '${identifier}' to be an array of strings.`);\r\n        }\r\n    }\r\n}\r\n\r\nconst INTERPOLATION_BLACKLIST_REGEXPS = [\r\n    /^\\s*$/,        // empty\r\n    /[<>]/,         // html tag\r\n    /^[{}]$/,       // i18n expansion\r\n    /&(#|[a-z])/i,  // character reference,\r\n    /^\\/\\//,        // comment\r\n];\r\n\r\nexport function assertInterpolationSymbols(identifier: string, value: any): void {\r\n    if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {\r\n        throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\r\n    } else if (isDevMode() && !isBlank(value)) {\r\n        const start = value[0] as string;\r\n        const end = value[1] as string;\r\n        // black list checking\r\n        INTERPOLATION_BLACKLIST_REGEXPS.forEach(regexp => {\r\n            if (regexp.test(start) || regexp.test(end)) {\r\n                throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\r\n            }\r\n        });\r\n    }\r\n}"]}