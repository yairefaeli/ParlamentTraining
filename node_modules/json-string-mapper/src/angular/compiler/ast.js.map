{"version":3,"sources":["../src/angular/compiler/ast.ts"],"names":[],"mappings":"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","file":"ast.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n\r\nimport {isBlank} from '../facade/lang';\r\n\r\nexport class ParserError {\r\n    public message: string;\r\n    constructor(\r\n        message: string, public input: string, public errLocation: string, public ctxLocation?: any) {\r\n        this.message = `Parser Error: ${message} ${errLocation} [${input}] in ${ctxLocation}`;\r\n    }\r\n}\r\n\r\nexport class ParseSpan {\r\n    constructor(public start: number, public end: number) {}\r\n}\r\n\r\nexport class AST {\r\n    constructor(public span: ParseSpan) {}\r\n    visit(visitor: AstVisitor, context: any = null): any { return null; }\r\n    toString(): string { return 'AST'; }\r\n}\r\n\r\n/**\r\n * Represents a quoted expression of the form:\r\n *\r\n * quote = prefix `:` uninterpretedExpression\r\n * prefix = identifier\r\n * uninterpretedExpression = arbitrary string\r\n *\r\n * A quoted expression is meant to be pre-processed by an AST transformer that\r\n * converts it into another AST that no longer contains quoted expressions.\r\n * It is meant to allow third-party developers to extend Angular template\r\n * expression language. The `uninterpretedExpression` part of the quote is\r\n * therefore not interpreted by the Angular's own expression parser.\r\n */\r\nexport class Quote extends AST {\r\n    constructor(\r\n        span: ParseSpan, public prefix: string, public uninterpretedExpression: string,\r\n        public location: any) {\r\n        super(span);\r\n    }\r\n    visit(visitor: AstVisitor, context: any = null): any { return visitor.visitQuote(this, context); }\r\n    toString(): string { return 'Quote'; }\r\n}\r\n\r\nexport class EmptyExpr extends AST {\r\n    visit(visitor: AstVisitor, context: any = null) {\r\n        // do nothing\r\n    }\r\n}\r\n\r\nexport class ImplicitReceiver extends AST {\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitImplicitReceiver(this, context);\r\n    }\r\n}\r\n\r\n/**\r\n * Multiple expressions separated by a semicolon.\r\n */\r\nexport class Chain extends AST {\r\n    constructor(span: ParseSpan, public expressions: any[]) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any { return visitor.visitChain(this, context); }\r\n}\r\n\r\nexport class Conditional extends AST {\r\n    constructor(span: ParseSpan, public condition: AST, public trueExp: AST, public falseExp: AST) {\r\n        super(span);\r\n    }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitConditional(this, context);\r\n    }\r\n}\r\n\r\nexport class PropertyRead extends AST {\r\n    constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitPropertyRead(this, context);\r\n    }\r\n}\r\n\r\nexport class PropertyWrite extends AST {\r\n    constructor(span: ParseSpan, public receiver: AST, public name: string, public value: AST) {\r\n        super(span);\r\n    }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitPropertyWrite(this, context);\r\n    }\r\n}\r\n\r\nexport class SafePropertyRead extends AST {\r\n    constructor(span: ParseSpan, public receiver: AST, public name: string) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitSafePropertyRead(this, context);\r\n    }\r\n}\r\n\r\nexport class KeyedRead extends AST {\r\n    constructor(span: ParseSpan, public obj: AST, public key: AST) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitKeyedRead(this, context);\r\n    }\r\n}\r\n\r\nexport class KeyedWrite extends AST {\r\n    constructor(span: ParseSpan, public obj: AST, public key: AST, public value: AST) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitKeyedWrite(this, context);\r\n    }\r\n}\r\n\r\nexport class BindingPipe extends AST {\r\n    constructor(span: ParseSpan, public exp: AST, public name: string, public args: any[]) {\r\n        super(span);\r\n    }\r\n    visit(visitor: AstVisitor, context: any = null): any { return visitor.visitPipe(this, context); }\r\n}\r\n\r\nexport class LiteralPrimitive extends AST {\r\n    constructor(span: ParseSpan, public value: any) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitLiteralPrimitive(this, context);\r\n    }\r\n}\r\n\r\nexport class LiteralArray extends AST {\r\n    constructor(span: ParseSpan, public expressions: any[]) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitLiteralArray(this, context);\r\n    }\r\n}\r\n\r\nexport class LiteralMap extends AST {\r\n    constructor(span: ParseSpan, public keys: any[], public values: any[]) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitLiteralMap(this, context);\r\n    }\r\n}\r\n\r\nexport class Interpolation extends AST {\r\n    constructor(span: ParseSpan, public strings: any[], public expressions: any[]) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitInterpolation(this, context);\r\n    }\r\n}\r\n\r\nexport class Binary extends AST {\r\n    constructor(span: ParseSpan, public operation: string, public left: AST, public right: AST) {\r\n        super(span);\r\n    }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitBinary(this, context);\r\n    }\r\n}\r\n\r\nexport class PrefixNot extends AST {\r\n    constructor(span: ParseSpan, public expression: AST) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitPrefixNot(this, context);\r\n    }\r\n}\r\n\r\nexport class MethodCall extends AST {\r\n    constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\r\n        super(span);\r\n    }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitMethodCall(this, context);\r\n    }\r\n}\r\n\r\nexport class SafeMethodCall extends AST {\r\n    constructor(span: ParseSpan, public receiver: AST, public name: string, public args: any[]) {\r\n        super(span);\r\n    }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitSafeMethodCall(this, context);\r\n    }\r\n}\r\n\r\nexport class FunctionCall extends AST {\r\n    constructor(span: ParseSpan, public target: AST, public args: any[]) { super(span); }\r\n    visit(visitor: AstVisitor, context: any = null): any {\r\n        return visitor.visitFunctionCall(this, context);\r\n    }\r\n}\r\n\r\nexport class ASTWithSource extends AST {\r\n    constructor(\r\n        public ast: AST, public source: string, public location: string,\r\n        public errors: ParserError[]) {\r\n        super(new ParseSpan(0, isBlank(source) ? 0 : source.length));\r\n    }\r\n    visit(visitor: AstVisitor, context: any = null): any { return this.ast.visit(visitor, context); }\r\n    toString(): string { return `${this.source} in ${this.location}`; }\r\n}\r\n\r\nexport class TemplateBinding {\r\n    constructor(\r\n        public span: ParseSpan, public key: string, public keyIsVar: boolean, public name: string,\r\n        public expression: ASTWithSource) {}\r\n}\r\n\r\nexport interface AstVisitor {\r\n    visitBinary(ast: Binary, context: any): any;\r\n    visitChain(ast: Chain, context: any): any;\r\n    visitConditional(ast: Conditional, context: any): any;\r\n    visitFunctionCall(ast: FunctionCall, context: any): any;\r\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): any;\r\n    visitInterpolation(ast: Interpolation, context: any): any;\r\n    visitKeyedRead(ast: KeyedRead, context: any): any;\r\n    visitKeyedWrite(ast: KeyedWrite, context: any): any;\r\n    visitLiteralArray(ast: LiteralArray, context: any): any;\r\n    visitLiteralMap(ast: LiteralMap, context: any): any;\r\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any;\r\n    visitMethodCall(ast: MethodCall, context: any): any;\r\n    visitPipe(ast: BindingPipe, context: any): any;\r\n    visitPrefixNot(ast: PrefixNot, context: any): any;\r\n    visitPropertyRead(ast: PropertyRead, context: any): any;\r\n    visitPropertyWrite(ast: PropertyWrite, context: any): any;\r\n    visitQuote(ast: Quote, context: any): any;\r\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): any;\r\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): any;\r\n}\r\n\r\nexport class RecursiveAstVisitor implements AstVisitor {\r\n    visitBinary(ast: Binary, context: any): any {\r\n        ast.left.visit(this);\r\n        ast.right.visit(this);\r\n        return null;\r\n    }\r\n    visitChain(ast: Chain, context: any): any { return this.visitAll(ast.expressions, context); }\r\n    visitConditional(ast: Conditional, context: any): any {\r\n        ast.condition.visit(this);\r\n        ast.trueExp.visit(this);\r\n        ast.falseExp.visit(this);\r\n        return null;\r\n    }\r\n    visitPipe(ast: BindingPipe, context: any): any {\r\n        ast.exp.visit(this);\r\n        this.visitAll(ast.args, context);\r\n        return null;\r\n    }\r\n    visitFunctionCall(ast: FunctionCall, context: any): any {\r\n        ast.target.visit(this);\r\n        this.visitAll(ast.args, context);\r\n        return null;\r\n    }\r\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): any { return null; }\r\n    visitInterpolation(ast: Interpolation, context: any): any {\r\n        return this.visitAll(ast.expressions, context);\r\n    }\r\n    visitKeyedRead(ast: KeyedRead, context: any): any {\r\n        ast.obj.visit(this);\r\n        ast.key.visit(this);\r\n        return null;\r\n    }\r\n    visitKeyedWrite(ast: KeyedWrite, context: any): any {\r\n        ast.obj.visit(this);\r\n        ast.key.visit(this);\r\n        ast.value.visit(this);\r\n        return null;\r\n    }\r\n    visitLiteralArray(ast: LiteralArray, context: any): any {\r\n        return this.visitAll(ast.expressions, context);\r\n    }\r\n    visitLiteralMap(ast: LiteralMap, context: any): any { return this.visitAll(ast.values, context); }\r\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): any { return null; }\r\n    visitMethodCall(ast: MethodCall, context: any): any {\r\n        ast.receiver.visit(this);\r\n        return this.visitAll(ast.args, context);\r\n    }\r\n    visitPrefixNot(ast: PrefixNot, context: any): any {\r\n        ast.expression.visit(this);\r\n        return null;\r\n    }\r\n    visitPropertyRead(ast: PropertyRead, context: any): any {\r\n        ast.receiver.visit(this);\r\n        return null;\r\n    }\r\n    visitPropertyWrite(ast: PropertyWrite, context: any): any {\r\n        ast.receiver.visit(this);\r\n        ast.value.visit(this);\r\n        return null;\r\n    }\r\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): any {\r\n        ast.receiver.visit(this);\r\n        return null;\r\n    }\r\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): any {\r\n        ast.receiver.visit(this);\r\n        return this.visitAll(ast.args, context);\r\n    }\r\n    visitAll(asts: AST[], context: any): any {\r\n        asts.forEach(ast => ast.visit(this, context));\r\n        return null;\r\n    }\r\n    visitQuote(ast: Quote, context: any): any { return null; }\r\n}\r\n\r\nexport class AstTransformer implements AstVisitor {\r\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any): AST { return ast; }\r\n\r\n    visitInterpolation(ast: Interpolation, context: any): AST {\r\n        return new Interpolation(ast.span, ast.strings, this.visitAll(ast.expressions));\r\n    }\r\n\r\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any): AST {\r\n        return new LiteralPrimitive(ast.span, ast.value);\r\n    }\r\n\r\n    visitPropertyRead(ast: PropertyRead, context: any): AST {\r\n        return new PropertyRead(ast.span, ast.receiver.visit(this), ast.name);\r\n    }\r\n\r\n    visitPropertyWrite(ast: PropertyWrite, context: any): AST {\r\n        return new PropertyWrite(ast.span, ast.receiver.visit(this), ast.name, ast.value);\r\n    }\r\n\r\n    visitSafePropertyRead(ast: SafePropertyRead, context: any): AST {\r\n        return new SafePropertyRead(ast.span, ast.receiver.visit(this), ast.name);\r\n    }\r\n\r\n    visitMethodCall(ast: MethodCall, context: any): AST {\r\n        return new MethodCall(ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\r\n    }\r\n\r\n    visitSafeMethodCall(ast: SafeMethodCall, context: any): AST {\r\n        return new SafeMethodCall(\r\n            ast.span, ast.receiver.visit(this), ast.name, this.visitAll(ast.args));\r\n    }\r\n\r\n    visitFunctionCall(ast: FunctionCall, context: any): AST {\r\n        return new FunctionCall(ast.span, ast.target.visit(this), this.visitAll(ast.args));\r\n    }\r\n\r\n    visitLiteralArray(ast: LiteralArray, context: any): AST {\r\n        return new LiteralArray(ast.span, this.visitAll(ast.expressions));\r\n    }\r\n\r\n    visitLiteralMap(ast: LiteralMap, context: any): AST {\r\n        return new LiteralMap(ast.span, ast.keys, this.visitAll(ast.values));\r\n    }\r\n\r\n    visitBinary(ast: Binary, context: any): AST {\r\n        return new Binary(ast.span, ast.operation, ast.left.visit(this), ast.right.visit(this));\r\n    }\r\n\r\n    visitPrefixNot(ast: PrefixNot, context: any): AST {\r\n        return new PrefixNot(ast.span, ast.expression.visit(this));\r\n    }\r\n\r\n    visitConditional(ast: Conditional, context: any): AST {\r\n        return new Conditional(\r\n            ast.span, ast.condition.visit(this), ast.trueExp.visit(this), ast.falseExp.visit(this));\r\n    }\r\n\r\n    visitPipe(ast: BindingPipe, context: any): AST {\r\n        return new BindingPipe(ast.span, ast.exp.visit(this), ast.name, this.visitAll(ast.args));\r\n    }\r\n\r\n    visitKeyedRead(ast: KeyedRead, context: any): AST {\r\n        return new KeyedRead(ast.span, ast.obj.visit(this), ast.key.visit(this));\r\n    }\r\n\r\n    visitKeyedWrite(ast: KeyedWrite, context: any): AST {\r\n        return new KeyedWrite(\r\n            ast.span, ast.obj.visit(this), ast.key.visit(this), ast.value.visit(this));\r\n    }\r\n\r\n    visitAll(asts: any[]): any[] {\r\n        const res = new Array(asts.length);\r\n        for (let i = 0; i < asts.length; ++i) {\r\n            res[i] = asts[i].visit(this);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    visitChain(ast: Chain, context: any): AST {\r\n        return new Chain(ast.span, this.visitAll(ast.expressions));\r\n    }\r\n\r\n    visitQuote(ast: Quote, context: any): AST {\r\n        return new Quote(ast.span, ast.prefix, ast.uninterpretedExpression, ast.location);\r\n    }\r\n}"]}