{"version":3,"sources":["../src/angular/compiler/parser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,KAAK,MAAM,SAAS,CAAC;AACjC,OAAO,EAAC,YAAY,EAAE,OAAO,EAAE,SAAS,EAAC,MAAM,gBAAgB,CAAC;AAChE,OAAO,EAAC,4BAA4B,EAAsB,MAAM,wBAAwB,CAAC;AAEzF,OAAO,EAAM,aAAa,EAAc,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,YAAY,EAAE,gBAAgB,EAAE,aAAa,EAAE,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,gBAAgB,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,YAAY,EAAE,aAAa,EAAE,KAAK,EAAE,cAAc,EAAE,gBAAgB,EAAE,eAAe,EAAC,MAAM,OAAO,CAAC;AACjW,OAAO,EAAC,GAAG,EAAgB,SAAS,EAAE,YAAY,EAAE,OAAO,EAAC,MAAM,SAAS,CAAC;AAG5E;IACI,4BAAmB,OAAiB,EAAS,WAAqB,EAAS,OAAiB;QAAzE,YAAO,GAAP,OAAO,CAAU;QAAS,gBAAW,GAAX,WAAW,CAAU;QAAS,YAAO,GAAP,OAAO,CAAU;IAAG,CAAC;IACpG,yBAAC;AAAD,CAFA,AAEC,IAAA;;AAED;IACI,oCACW,gBAAmC,EAAS,QAAkB,EAC9D,MAAqB;QADrB,qBAAgB,GAAhB,gBAAgB,CAAmB;QAAS,aAAQ,GAAR,QAAQ,CAAU;QAC9D,WAAM,GAAN,MAAM,CAAe;IAAG,CAAC;IACxC,iCAAC;AAAD,CAJA,AAIC,IAAA;;AAED,kCAAkC,MAA2B;IACzD,IAAM,OAAO,GAAG,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,cAAc,GAAG,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;IACvF,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AACpC,CAAC;AAED;IAGI,gBAAoB,MAAa;QAAb,WAAM,GAAN,MAAM,CAAO;QAFzB,WAAM,GAAkB,EAAE,CAAC;IAEC,CAAC;IAErC,4BAAW,GAAX,UACI,KAAa,EAAE,QAAa,EAC5B,mBAAuE;QAAvE,oCAAA,EAAA,kDAAuE;QACvE,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QACjE,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;QAChE,IAAM,GAAG,GAAG,IAAI,SAAS,CACrB,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAC9D,KAAK,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;aACjC,UAAU,EAAE,CAAC;QAClB,MAAM,CAAC,IAAI,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAChE,CAAC;IAED,6BAAY,GAAZ,UACI,KAAa,EAAE,QAAa,EAC5B,mBAAuE;QAAvE,oCAAA,EAAA,kDAAuE;QACvE,IAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QACxE,MAAM,CAAC,IAAI,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAChE,CAAC;IAED,mCAAkB,GAAlB,UACI,KAAa,EAAE,QAAgB,EAC/B,mBAAuE;QAAvE,oCAAA,EAAA,kDAAuE;QACvE,IAAM,GAAG,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QACxE,IAAM,MAAM,GAAG,uBAAuB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,YAAY,CACb,4CAA0C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QACvF,CAAC;QACD,MAAM,CAAC,IAAI,aAAa,CAAC,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAChE,CAAC;IAEO,6BAAY,GAApB,UAAqB,OAAe,EAAE,KAAa,EAAE,WAAmB,EAAE,WAAiB;QACvF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;IAChF,CAAC;IAEO,iCAAgB,GAAxB,UACI,KAAa,EAAE,QAAgB,EAAE,mBAAwC;QACzE,6EAA6E;QAC7E,oEAAoE;QACpE,IAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAEhD,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAED,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QACjE,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,SAAS,CAChB,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAC/D,KAAK,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;aACjC,UAAU,EAAE,CAAC;IACtB,CAAC;IAEO,4BAAW,GAAnB,UAAoB,KAAa,EAAE,QAAa;QAC5C,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAChC,IAAM,oBAAoB,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChD,EAAE,CAAC,CAAC,oBAAoB,IAAI,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAC5C,IAAM,MAAM,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,oBAAoB,CAAC,CAAC,IAAI,EAAE,CAAC;QAC/D,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QACvC,IAAM,uBAAuB,GAAG,KAAK,CAAC,SAAS,CAAC,oBAAoB,GAAG,CAAC,CAAC,CAAC;QAC1E,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,uBAAuB,EAAE,QAAQ,CAAC,CAAC;IAChG,CAAC;IAED,sCAAqB,GAArB,UAAsB,WAAmB,EAAE,KAAa,EAAE,QAAa;QAEnE,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC3C,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACd,4FAA4F;YAC5F,IAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC;gBACxD,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC;gBACZ,MAAM,CAAC,CAAC,CAAC;YACb,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,OAAO,OAAd,MAAM,EAAY,YAAY,EAAE;QACpC,CAAC;QACD,MAAM,CAAC,IAAI,SAAS,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;aAC7E,qBAAqB,EAAE,CAAC;IACjC,CAAC;IAED,mCAAkB,GAAlB,UACI,KAAa,EAAE,QAAa,EAC5B,mBAAuE;QAAvE,oCAAA,EAAA,kDAAuE;QACvE,IAAM,KAAK,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QAC5E,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QAE/B,IAAM,WAAW,GAAU,EAAE,CAAC;QAE9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;YAChD,IAAM,cAAc,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;YACxD,IAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/E,IAAM,GAAG,GAAG,IAAI,SAAS,CACrB,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,EAC/D,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;iBAC/D,UAAU,EAAE,CAAC;YAClB,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;QAED,MAAM,CAAC,IAAI,aAAa,CACpB,IAAI,aAAa,CACb,IAAI,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,OAAO,EAAE,WAAW,CAAC,EACpF,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,mCAAkB,GAAlB,UACI,KAAa,EAAE,QAAgB,EAC/B,mBAAuE;QAAvE,oCAAA,EAAA,kDAAuE;QACvE,IAAM,MAAM,GAAG,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;QAC7D,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAClC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,IAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,IAAM,WAAW,GAAa,EAAE,CAAC;QACjC,IAAM,OAAO,GAAa,EAAE,CAAC;QAC7B,IAAI,MAAM,GAAG,CAAC,CAAC;QACf,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,IAAM,IAAI,GAAW,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACd,eAAe;gBACf,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACnB,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC;YAC1B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,IAAI,mBAAmB,CAAC,KAAK,CAAC,MAAM,CAAC;gBAC3C,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACvB,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrB,MAAM,IAAI,IAAI,CAAC,MAAM,GAAG,mBAAmB,CAAC,GAAG,CAAC,MAAM,CAAC;YAC3D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,YAAY,CACb,2DAA2D,EAAE,KAAK,EAClE,eAAa,IAAI,CAAC,6BAA6B,CAAC,KAAK,EAAE,CAAC,EAAE,mBAAmB,CAAC,QAAK,EACnF,QAAQ,CAAC,CAAC;gBACd,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC7B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,kBAAkB,CAAC,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;IACjE,CAAC;IAED,qCAAoB,GAApB,UAAqB,KAAa,EAAE,QAAa;QAC7C,MAAM,CAAC,IAAI,aAAa,CACpB,IAAI,gBAAgB,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,EACvF,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAEO,+BAAc,GAAtB,UAAuB,KAAa;QAChC,IAAM,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC;IAC/D,CAAC;IAEO,8BAAa,GAArB,UAAsB,KAAa;QAC/B,IAAI,UAAU,GAAW,IAAI,CAAC;QAC9B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACxC,IAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACjC,IAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAEzC,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM,IAAI,QAAQ,IAAI,KAAK,CAAC,MAAM,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC;gBAAC,MAAM,CAAC,CAAC,CAAC;YAEvF,EAAE,CAAC,CAAC,UAAU,KAAK,IAAI,CAAC,CAAC,CAAC;gBACtB,UAAU,GAAG,IAAI,CAAC;YACtB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC9C,UAAU,GAAG,IAAI,CAAC;YACtB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEO,sCAAqB,GAA7B,UACI,KAAa,EAAE,QAAa,EAAE,mBAAwC;QACtE,IAAM,MAAM,GAAG,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;QAC7D,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAClC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,YAAY,CACb,wBAAsB,mBAAmB,CAAC,KAAK,GAAG,mBAAmB,CAAC,GAAG,oCAAiC,EAC1G,KAAK,EACL,eAAa,IAAI,CAAC,6BAA6B,CAAC,KAAK,EAAE,CAAC,EAAE,mBAAmB,CAAC,QAAK,EACnF,QAAQ,CAAC,CAAC;QAClB,CAAC;IACL,CAAC;IAEO,8CAA6B,GAArC,UACI,KAAe,EAAE,YAAoB,EAAE,mBAAwC;QAC/E,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,WAAW,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;gBACtB,KAAK,CAAC,CAAC,CAAC;gBACR,KAAG,mBAAmB,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,mBAAmB,CAAC,GAAK,CAAC;QAC5E,CAAC;QAED,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC;IAC9B,CAAC;IACL,aAAC;AAAD,CArMA,AAqMC,IAAA;;AAED;IAOI,mBACW,KAAa,EAAS,QAAa,EAAS,MAAe,EAC3D,WAAmB,EAAS,WAAoB,EAAU,MAAqB,EAC9E,MAAc;QAFf,UAAK,GAAL,KAAK,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAK;QAAS,WAAM,GAAN,MAAM,CAAS;QAC3D,gBAAW,GAAX,WAAW,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAS;QAAU,WAAM,GAAN,MAAM,CAAe;QAC9E,WAAM,GAAN,MAAM,CAAQ;QATlB,oBAAe,GAAG,CAAC,CAAC;QACpB,sBAAiB,GAAG,CAAC,CAAC;QACtB,oBAAe,GAAG,CAAC,CAAC;QAE5B,UAAK,GAAW,CAAC,CAAC;IAKW,CAAC;IAE9B,wBAAI,GAAJ,UAAK,MAAc;QACf,IAAM,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QAC9B,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACzD,CAAC;IAED,sBAAI,2BAAI;aAAR,cAAoB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;;OAAA;IAE1C,sBAAI,iCAAU;aAAd;YACI,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM;gBACpE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;QACvC,CAAC;;;OAAA;IAED,wBAAI,GAAJ,UAAK,KAAa,IAAI,MAAM,CAAC,IAAI,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAErE,2BAAO,GAAP,cAAY,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAE3B,qCAAiB,GAAjB,UAAkB,IAAY;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;IAED,kCAAc,GAAd,cAA4B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IAE9D,mCAAe,GAAf,UAAgB,IAAY;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC;QACzC,IAAI,CAAC,KAAK,CAAC,sBAAoB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAG,CAAC,CAAC;IAChE,CAAC;IAED,oCAAgB,GAAhB,UAAiB,EAAU;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;IACL,CAAC;IAED,kCAAc,GAAd,UAAe,QAAgB;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAAC,MAAM,CAAC;QAC5C,IAAI,CAAC,KAAK,CAAC,+BAA6B,QAAU,CAAC,CAAC;IACxD,CAAC;IAED,6CAAyB,GAAzB;QACI,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QACpB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACtC,IAAI,CAAC,KAAK,CAAC,sBAAoB,CAAC,qCAAkC,CAAC,CAAC;YACpE,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACxB,CAAC;IAED,qDAAiC,GAAjC;QACI,IAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QACpB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,KAAK,CAAC,sBAAoB,CAAC,8CAA2C,CAAC,CAAC;YAC7E,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACxB,CAAC;IAED,8BAAU,GAAV;QACI,IAAM,KAAK,GAAU,EAAE,CAAC;QACxB,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;QAC9B,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACrC,IAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC9B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;gBACvE,CAAC;gBACD,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC;gBAClD,CAAC,CAAE,sBAAsB;YAC7B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,KAAK,CAAC,uBAAqB,IAAI,CAAC,IAAI,MAAG,CAAC,CAAC;YAClD,CAAC;QACL,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACvC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;IAED,6BAAS,GAAT;QACI,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnB,IAAI,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAC7D,CAAC;YAED,GAAG,CAAC;gBACA,IAAM,MAAI,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;gBAC9C,IAAM,IAAI,GAAU,EAAE,CAAC;gBACvB,OAAO,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;oBAC1C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;gBACtC,CAAC;gBACD,MAAM,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,MAAI,EAAE,IAAI,CAAC,CAAC;YAC/E,CAAC,QAAQ,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE;QACzC,CAAC;QAED,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,mCAAe,GAAf,cAAyB,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAE1D,oCAAgB,GAAhB;QACI,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;QAC9B,IAAM,MAAM,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAErC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC7B,IAAI,EAAE,SAAK,CAAC;YACZ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxC,IAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC5B,IAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBACpD,IAAI,CAAC,KAAK,CAAC,4BAA0B,UAAU,gCAA6B,CAAC,CAAC;gBAC9E,EAAE,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACzC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC1B,CAAC;YACD,MAAM,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;QAC9D,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;IACL,CAAC;IAED,kCAAc,GAAd;QACI,OAAO;QACP,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YACrC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAC3E,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,mCAAe,GAAf;QACI,OAAO;QACP,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YACnC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAC3E,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,iCAAa,GAAb;QACI,wBAAwB;QACxB,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACpC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;YAC1C,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YACpC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,IAAI,CAAC;gBACV,KAAK,KAAK,CAAC;gBACX,KAAK,IAAI,CAAC;gBACV,KAAK,KAAK;oBACN,IAAI,CAAC,OAAO,EAAE,CAAC;oBACf,IAAM,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;oBACrC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;oBAC3E,QAAQ,CAAC;YACjB,CAAC;YACD,KAAK,CAAC;QACV,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,mCAAe,GAAf;QACI,uBAAuB;QACvB,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;YAC1C,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YACpC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,GAAG,CAAC;gBACT,KAAK,GAAG,CAAC;gBACT,KAAK,IAAI,CAAC;gBACV,KAAK,IAAI;oBACL,IAAI,CAAC,OAAO,EAAE,CAAC;oBACf,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;oBACnC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;oBAC3E,QAAQ,CAAC;YACjB,CAAC;YACD,KAAK,CAAC;QACV,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,iCAAa,GAAb;QACI,WAAW;QACX,IAAI,MAAM,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;QACxC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;YAC1C,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YACpC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,GAAG,CAAC;gBACT,KAAK,GAAG;oBACJ,IAAI,CAAC,OAAO,EAAE,CAAC;oBACf,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;oBACvC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;oBAC3E,QAAQ,CAAC;YACjB,CAAC;YACD,KAAK,CAAC;QACV,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,uCAAmB,GAAnB;QACI,gBAAgB;QAChB,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,QAAQ,EAAE,CAAC;YAC1C,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YACpC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,GAAG,CAAC;gBACT,KAAK,GAAG,CAAC;gBACT,KAAK,GAAG;oBACJ,IAAI,CAAC,OAAO,EAAE,CAAC;oBACf,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;oBAC/B,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;oBAC3E,QAAQ,CAAC;YACjB,CAAC;YACD,KAAK,CAAC;QACV,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,+BAAW,GAAX;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;YACvC,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;YAC9B,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;YACpC,IAAI,MAAM,SAAK,CAAC;YAChB,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACf,KAAK,GAAG;oBACJ,IAAI,CAAC,OAAO,EAAE,CAAC;oBACf,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC9B,KAAK,GAAG;oBACJ,IAAI,CAAC,OAAO,EAAE,CAAC;oBACf,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;oBAC5B,MAAM,CAAC,IAAI,MAAM,CACb,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,IAAI,gBAAgB,CAAC,IAAI,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,EAChF,MAAM,CAAC,CAAC;gBAChB,KAAK,GAAG;oBACJ,IAAI,CAAC,OAAO,EAAE,CAAC;oBACf,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;oBAC5B,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;YACvD,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;IACjC,CAAC;IAED,kCAAc,GAAd;QACI,IAAI,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACjC,OAAO,IAAI,EAAE,CAAC;YACV,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACxC,MAAM,GAAG,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAE/D,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACrC,MAAM,GAAG,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAE9D,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;gBAC7B,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACzB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBACtC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBACtC,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;gBAC9E,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;gBACtE,CAAC;YAEL,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC/C,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBACvC,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACpC,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;YAE1E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC;QACL,CAAC;IACL,CAAC;IAED,gCAAY,GAAZ;QACI,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAChC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC;QAElB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;QAExD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;QAE1D,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;QAExD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QAEzD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAElD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC3D,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,CAAC;QAExD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;QAElC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,IAAI,CAAC,6BAA6B,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAE7F,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAC9B,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;QAEzD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YAC9B,IAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC1C,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,CAAC;QAEhE,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,KAAK,CAAC,mCAAiC,IAAI,CAAC,KAAO,CAAC,CAAC;YAC1D,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3C,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,KAAK,CAAC,sBAAoB,IAAI,CAAC,IAAM,CAAC,CAAC;YAC5C,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IAED,uCAAmB,GAAnB,UAAoB,UAAkB;QAClC,IAAM,MAAM,GAAU,EAAE,CAAC;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACrC,GAAG,CAAC;gBACA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAClC,CAAC,QAAQ,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;QACnD,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAED,mCAAe,GAAf;QACI,IAAM,IAAI,GAAa,EAAE,CAAC;QAC1B,IAAM,MAAM,GAAU,EAAE,CAAC;QACzB,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;QAC9B,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,GAAG,CAAC;gBACA,IAAM,GAAG,GAAG,IAAI,CAAC,iCAAiC,EAAE,CAAC;gBACrD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACf,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;YAClC,CAAC,QAAQ,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YAC/C,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;QACD,MAAM,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAC1D,CAAC;IAED,iDAA6B,GAA7B,UAA8B,QAAa,EAAE,MAAuB;QAAvB,uBAAA,EAAA,cAAuB;QAChE,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;QAClC,IAAM,EAAE,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAE5C,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACvC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACpC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,MAAM,CAAC,MAAM,GAAG,IAAI,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,CAAC;gBACxD,IAAI,UAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;QAEjD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACT,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7B,IAAI,CAAC,KAAK,CAAC,sDAAsD,CAAC,CAAC;oBACnE,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC3C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAChE,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;wBACpB,IAAI,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;wBAClD,MAAM,CAAC,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC3C,CAAC;oBAED,IAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBACtC,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;gBACpE,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;gBAC5D,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAED,sCAAkB,GAAlB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QACpD,IAAM,WAAW,GAAU,EAAE,CAAC;QAC9B,GAAG,CAAC;YACA,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QACvC,CAAC,QAAQ,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;QAC/C,MAAM,CAAC,WAA4B,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,4CAAwB,GAAxB;QACI,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,aAAa,GAAG,KAAK,CAAC;QAC1B,GAAG,CAAC;YACA,MAAM,IAAI,IAAI,CAAC,iCAAiC,EAAE,CAAC;YACnD,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAC3C,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;gBAChB,MAAM,IAAI,GAAG,CAAC;YAClB,CAAC;QACL,CAAC,QAAQ,aAAa,EAAE;QAExB,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IAC7B,CAAC;IAED,yCAAqB,GAArB;QACI,IAAM,QAAQ,GAAsB,EAAE,CAAC;QACvC,IAAI,MAAM,GAAW,IAAI,CAAC;QAC1B,IAAM,QAAQ,GAAa,EAAE,CAAC;QAC9B,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACrC,IAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC;YAC9B,IAAM,QAAQ,GAAY,IAAI,CAAC,cAAc,EAAE,CAAC;YAChD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;YACD,IAAI,GAAG,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAC1C,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACZ,EAAE,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC;oBACjB,MAAM,GAAG,GAAG,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,GAAG,GAAG,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBAC3D,CAAC;YACL,CAAC;YACD,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACrC,IAAI,MAAI,GAAW,IAAI,CAAC;YACxB,IAAI,UAAU,GAAkB,IAAI,CAAC;YACrC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACX,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC7B,MAAI,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;gBAC3C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAI,GAAG,YAAY,CAAC;gBACxB,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;gBACrD,IAAM,OAAK,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC9B,IAAM,GAAG,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;gBAC7B,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAK,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;gBACxF,UAAU,GAAG,IAAI,aAAa,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAC5E,CAAC;YACD,QAAQ,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAI,EAAE,UAAU,CAAC,CAAC,CAAC;YACtF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACzC,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,0BAA0B,CAAC,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC3E,CAAC;IAED,yBAAK,GAAL,UAAM,OAAe,EAAE,KAAoB;QAApB,sBAAA,EAAA,YAAoB;QACvC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAChG,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAEO,gCAAY,GAApB,UAAqB,KAAoB;QAApB,sBAAA,EAAA,YAAoB;QACrC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACvC,MAAM,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,gBAAa,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,CAAC,SAAK;YAChF,8BAA8B,CAAC;IACvC,CAAC;IAED,wFAAwF;IACxF,sFAAsF;IACtF,wFAAwF;IACxF,8FAA8F;IAC9F,4FAA4F;IAC5F,2FAA2F;IAC3F,yFAAyF;IACzF,iFAAiF;IACjF,8FAA8F;IAC9F,mEAAmE;IAEnE,4FAA4F;IAC5F,8EAA8E;IACtE,wBAAI,GAAZ;QACI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QAClB,OAAO,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC;YAC1E,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC5D,CAAC,IAAI,CAAC,eAAe,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC5D,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC;YAC/D,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC/F,CAAC;YACD,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;IACL,CAAC;IACL,gBAAC;AAAD,CAlhBA,AAkhBC,IAAA;;AAED;IAAA;QAOI,WAAM,GAAa,EAAE,CAAC;IAyC1B,CAAC;IA/CU,6BAAK,GAAZ,UAAa,GAAQ;QACjB,IAAM,CAAC,GAAG,IAAI,uBAAuB,EAAE,CAAC;QACxC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACb,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;IACpB,CAAC;IAID,uDAAqB,GAArB,UAAsB,GAAqB,EAAE,OAAY,IAAG,CAAC;IAE7D,oDAAkB,GAAlB,UAAmB,GAAkB,EAAE,OAAY,IAAG,CAAC;IAEvD,uDAAqB,GAArB,UAAsB,GAAqB,EAAE,OAAY,IAAG,CAAC;IAE7D,mDAAiB,GAAjB,UAAkB,GAAiB,EAAE,OAAY,IAAG,CAAC;IAErD,oDAAkB,GAAlB,UAAmB,GAAkB,EAAE,OAAY,IAAG,CAAC;IAEvD,uDAAqB,GAArB,UAAsB,GAAqB,EAAE,OAAY,IAAG,CAAC;IAE7D,iDAAe,GAAf,UAAgB,GAAe,EAAE,OAAY,IAAG,CAAC;IAEjD,qDAAmB,GAAnB,UAAoB,GAAmB,EAAE,OAAY,IAAG,CAAC;IAEzD,mDAAiB,GAAjB,UAAkB,GAAiB,EAAE,OAAY,IAAG,CAAC;IAErD,mDAAiB,GAAjB,UAAkB,GAAiB,EAAE,OAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAEtF,iDAAe,GAAf,UAAgB,GAAe,EAAE,OAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAE7E,6CAAW,GAAX,UAAY,GAAW,EAAE,OAAY,IAAG,CAAC;IAEzC,gDAAc,GAAd,UAAe,GAAc,EAAE,OAAY,IAAG,CAAC;IAE/C,kDAAgB,GAAhB,UAAiB,GAAgB,EAAE,OAAY,IAAG,CAAC;IAEnD,2CAAS,GAAT,UAAU,GAAgB,EAAE,OAAY,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAExE,gDAAc,GAAd,UAAe,GAAc,EAAE,OAAY,IAAG,CAAC;IAE/C,iDAAe,GAAf,UAAgB,GAAe,EAAE,OAAY,IAAG,CAAC;IAEjD,0CAAQ,GAAR,UAAS,IAAW;QAApB,iBAA2E;QAA5C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,EAAhB,CAAgB,CAAC,CAAC;IAAC,CAAC;IAE3E,4CAAU,GAAV,UAAW,GAAU,EAAE,OAAY,IAAG,CAAC;IAEvC,4CAAU,GAAV,UAAW,GAAU,EAAE,OAAY,IAAG,CAAC;IAC3C,8BAAC;AAAD,CAhDA,AAgDC,IAAA","file":"parser.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport * as chars from './chars';\r\nimport {escapeRegExp, isBlank, isPresent} from '../facade/lang';\r\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from './interpolation-config';\r\n\r\nimport {AST, ASTWithSource, AstVisitor, Binary, BindingPipe, Chain, Conditional, EmptyExpr, FunctionCall, ImplicitReceiver, Interpolation, KeyedRead, KeyedWrite, LiteralArray, LiteralMap, LiteralPrimitive, MethodCall, ParseSpan, ParserError, PrefixNot, PropertyRead, PropertyWrite, Quote, SafeMethodCall, SafePropertyRead, TemplateBinding} from './ast';\r\nimport {EOF, Lexer, Token, TokenType, isIdentifier, isQuote} from './lexer';\r\n\r\n\r\nexport class SplitInterpolation {\r\n    constructor(public strings: string[], public expressions: string[], public offsets: number[]) {}\r\n}\r\n\r\nexport class TemplateBindingParseResult {\r\n    constructor(\r\n        public templateBindings: TemplateBinding[], public warnings: string[],\r\n        public errors: ParserError[]) {}\r\n}\r\n\r\nfunction _createInterpolateRegExp(config: InterpolationConfig): RegExp {\r\n    const pattern = escapeRegExp(config.start) + '([\\\\s\\\\S]*?)' + escapeRegExp(config.end);\r\n    return new RegExp(pattern, 'g');\r\n}\r\n\r\nexport class Parser {\r\n    private errors: ParserError[] = [];\r\n\r\n    constructor(private _lexer: Lexer) {}\r\n\r\n    parseAction(\r\n        input: string, location: any,\r\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource {\r\n        this._checkNoInterpolation(input, location, interpolationConfig);\r\n        const sourceToLex = this._stripComments(input);\r\n        const tokens = this._lexer.tokenize(this._stripComments(input));\r\n        const ast = new _ParseAST(\r\n            input, location, tokens, sourceToLex.length, true, this.errors,\r\n            input.length - sourceToLex.length)\r\n            .parseChain();\r\n        return new ASTWithSource(ast, input, location, this.errors);\r\n    }\r\n\r\n    parseBinding(\r\n        input: string, location: any,\r\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource {\r\n        const ast = this._parseBindingAst(input, location, interpolationConfig);\r\n        return new ASTWithSource(ast, input, location, this.errors);\r\n    }\r\n\r\n    parseSimpleBinding(\r\n        input: string, location: string,\r\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource {\r\n        const ast = this._parseBindingAst(input, location, interpolationConfig);\r\n        const errors = SimpleExpressionChecker.check(ast);\r\n        if (errors.length > 0) {\r\n            this._reportError(\r\n                `Host binding expression cannot contain ${errors.join(' ')}`, input, location);\r\n        }\r\n        return new ASTWithSource(ast, input, location, this.errors);\r\n    }\r\n\r\n    private _reportError(message: string, input: string, errLocation: string, ctxLocation?: any) {\r\n        this.errors.push(new ParserError(message, input, errLocation, ctxLocation));\r\n    }\r\n\r\n    private _parseBindingAst(\r\n        input: string, location: string, interpolationConfig: InterpolationConfig): AST {\r\n        // Quotes expressions use 3rd-party expression language. We don't want to use\r\n        // our lexer or parser for that, so we check for that ahead of time.\r\n        const quote = this._parseQuote(input, location);\r\n\r\n        if (isPresent(quote)) {\r\n            return quote;\r\n        }\r\n\r\n        this._checkNoInterpolation(input, location, interpolationConfig);\r\n        const sourceToLex = this._stripComments(input);\r\n        const tokens = this._lexer.tokenize(sourceToLex);\r\n        return new _ParseAST(\r\n            input, location, tokens, sourceToLex.length, false, this.errors,\r\n            input.length - sourceToLex.length)\r\n            .parseChain();\r\n    }\r\n\r\n    private _parseQuote(input: string, location: any): AST {\r\n        if (isBlank(input)) return null;\r\n        const prefixSeparatorIndex = input.indexOf(':');\r\n        if (prefixSeparatorIndex == -1) return null;\r\n        const prefix = input.substring(0, prefixSeparatorIndex).trim();\r\n        if (!isIdentifier(prefix)) return null;\r\n        const uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);\r\n        return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);\r\n    }\r\n\r\n    parseTemplateBindings(prefixToken: string, input: string, location: any):\r\n    TemplateBindingParseResult {\r\n        const tokens = this._lexer.tokenize(input);\r\n        if (prefixToken) {\r\n            // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).\r\n            const prefixTokens = this._lexer.tokenize(prefixToken).map(t => {\r\n                t.index = 0;\r\n                return t;\r\n            });\r\n            tokens.unshift(...prefixTokens);\r\n        }\r\n        return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)\r\n            .parseTemplateBindings();\r\n    }\r\n\r\n    parseInterpolation(\r\n        input: string, location: any,\r\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ASTWithSource {\r\n        const split = this.splitInterpolation(input, location, interpolationConfig);\r\n        if (split == null) return null;\r\n\r\n        const expressions: AST[] = [];\r\n\r\n        for (let i = 0; i < split.expressions.length; ++i) {\r\n            const expressionText = split.expressions[i];\r\n            const sourceToLex = this._stripComments(expressionText);\r\n            const tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));\r\n            const ast = new _ParseAST(\r\n                input, location, tokens, sourceToLex.length, false, this.errors,\r\n                split.offsets[i] + (expressionText.length - sourceToLex.length))\r\n                .parseChain();\r\n            expressions.push(ast);\r\n        }\r\n\r\n        return new ASTWithSource(\r\n            new Interpolation(\r\n                new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions),\r\n            input, location, this.errors);\r\n    }\r\n\r\n    splitInterpolation(\r\n        input: string, location: string,\r\n        interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): SplitInterpolation {\r\n        const regexp = _createInterpolateRegExp(interpolationConfig);\r\n        const parts = input.split(regexp);\r\n        if (parts.length <= 1) {\r\n            return null;\r\n        }\r\n        const strings: string[] = [];\r\n        const expressions: string[] = [];\r\n        const offsets: number[] = [];\r\n        let offset = 0;\r\n        for (let i = 0; i < parts.length; i++) {\r\n            const part: string = parts[i];\r\n            if (i % 2 === 0) {\r\n                // fixed string\r\n                strings.push(part);\r\n                offset += part.length;\r\n            } else if (part.trim().length > 0) {\r\n                offset += interpolationConfig.start.length;\r\n                expressions.push(part);\r\n                offsets.push(offset);\r\n                offset += part.length + interpolationConfig.end.length;\r\n            } else {\r\n                this._reportError(\r\n                    'Blank expressions are not allowed in interpolated strings', input,\r\n                    `at column ${this._findInterpolationErrorColumn(parts, i, interpolationConfig)} in`,\r\n                    location);\r\n                expressions.push('$implict');\r\n                offsets.push(offset);\r\n            }\r\n        }\r\n        return new SplitInterpolation(strings, expressions, offsets);\r\n    }\r\n\r\n    wrapLiteralPrimitive(input: string, location: any): ASTWithSource {\r\n        return new ASTWithSource(\r\n            new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input,\r\n            location, this.errors);\r\n    }\r\n\r\n    private _stripComments(input: string): string {\r\n        const i = this._commentStart(input);\r\n        return isPresent(i) ? input.substring(0, i).trim() : input;\r\n    }\r\n\r\n    private _commentStart(input: string): number {\r\n        let outerQuote: number = null;\r\n        for (let i = 0; i < input.length - 1; i++) {\r\n            const char = input.charCodeAt(i);\r\n            const nextChar = input.charCodeAt(i + 1);\r\n\r\n            if (char === chars.$SLASH && nextChar == chars.$SLASH && isBlank(outerQuote)) return i;\r\n\r\n            if (outerQuote === char) {\r\n                outerQuote = null;\r\n            } else if (isBlank(outerQuote) && isQuote(char)) {\r\n                outerQuote = char;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private _checkNoInterpolation(\r\n        input: string, location: any, interpolationConfig: InterpolationConfig): void {\r\n        const regexp = _createInterpolateRegExp(interpolationConfig);\r\n        const parts = input.split(regexp);\r\n        if (parts.length > 1) {\r\n            this._reportError(\r\n                `Got interpolation (${interpolationConfig.start}${interpolationConfig.end}) where expression was expected`,\r\n                input,\r\n                `at column ${this._findInterpolationErrorColumn(parts, 1, interpolationConfig)} in`,\r\n                location);\r\n        }\r\n    }\r\n\r\n    private _findInterpolationErrorColumn(\r\n        parts: string[], partInErrIdx: number, interpolationConfig: InterpolationConfig): number {\r\n        let errLocation = '';\r\n        for (let j = 0; j < partInErrIdx; j++) {\r\n            errLocation += j % 2 === 0 ?\r\n                parts[j] :\r\n                `${interpolationConfig.start}${parts[j]}${interpolationConfig.end}`;\r\n        }\r\n\r\n        return errLocation.length;\r\n    }\r\n}\r\n\r\nexport class _ParseAST {\r\n    private rparensExpected = 0;\r\n    private rbracketsExpected = 0;\r\n    private rbracesExpected = 0;\r\n\r\n    index: number = 0;\r\n\r\n    constructor(\r\n        public input: string, public location: any, public tokens: Token[],\r\n        public inputLength: number, public parseAction: boolean, private errors: ParserError[],\r\n        private offset: number) {}\r\n\r\n    peek(offset: number): Token {\r\n        const i = this.index + offset;\r\n        return i < this.tokens.length ? this.tokens[i] : EOF;\r\n    }\r\n\r\n    get next(): Token { return this.peek(0); }\r\n\r\n    get inputIndex(): number {\r\n        return (this.index < this.tokens.length) ? this.next.index + this.offset :\r\n            this.inputLength + this.offset;\r\n    }\r\n\r\n    span(start: number) { return new ParseSpan(start, this.inputIndex); }\r\n\r\n    advance() { this.index++; }\r\n\r\n    optionalCharacter(code: number): boolean {\r\n        if (this.next.isCharacter(code)) {\r\n            this.advance();\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    peekKeywordLet(): boolean { return this.next.isKeywordLet(); }\r\n\r\n    expectCharacter(code: number) {\r\n        if (this.optionalCharacter(code)) return;\r\n        this.error(`Missing expected ${String.fromCharCode(code)}`);\r\n    }\r\n\r\n    optionalOperator(op: string): boolean {\r\n        if (this.next.isOperator(op)) {\r\n            this.advance();\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    expectOperator(operator: string) {\r\n        if (this.optionalOperator(operator)) return;\r\n        this.error(`Missing expected operator ${operator}`);\r\n    }\r\n\r\n    expectIdentifierOrKeyword(): string {\r\n        const n = this.next;\r\n        if (!n.isIdentifier() && !n.isKeyword()) {\r\n            this.error(`Unexpected token ${n}, expected identifier or keyword`);\r\n            return '';\r\n        }\r\n        this.advance();\r\n        return n.toString();\r\n    }\r\n\r\n    expectIdentifierOrKeywordOrString(): string {\r\n        const n = this.next;\r\n        if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {\r\n            this.error(`Unexpected token ${n}, expected identifier, keyword, or string`);\r\n            return '';\r\n        }\r\n        this.advance();\r\n        return n.toString();\r\n    }\r\n\r\n    parseChain(): AST {\r\n        const exprs: AST[] = [];\r\n        const start = this.inputIndex;\r\n        while (this.index < this.tokens.length) {\r\n            const expr = this.parsePipe();\r\n            exprs.push(expr);\r\n\r\n            if (this.optionalCharacter(chars.$SEMICOLON)) {\r\n                if (!this.parseAction) {\r\n                    this.error('Binding expression cannot contain chained expression');\r\n                }\r\n                while (this.optionalCharacter(chars.$SEMICOLON)) {\r\n                }  // read all semicolons\r\n            } else if (this.index < this.tokens.length) {\r\n                this.error(`Unexpected token '${this.next}'`);\r\n            }\r\n        }\r\n        if (exprs.length == 0) return new EmptyExpr(this.span(start));\r\n        if (exprs.length == 1) return exprs[0];\r\n        return new Chain(this.span(start), exprs);\r\n    }\r\n\r\n    parsePipe(): AST {\r\n        let result = this.parseExpression();\r\n        if (this.optionalOperator('|')) {\r\n            if (this.parseAction) {\r\n                this.error('Cannot have a pipe in an action expression');\r\n            }\r\n\r\n            do {\r\n                const name = this.expectIdentifierOrKeyword();\r\n                const args: AST[] = [];\r\n                while (this.optionalCharacter(chars.$COLON)) {\r\n                    args.push(this.parseExpression());\r\n                }\r\n                result = new BindingPipe(this.span(result.span.start), result, name, args);\r\n            } while (this.optionalOperator('|'));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    parseExpression(): AST { return this.parseConditional(); }\r\n\r\n    parseConditional(): AST {\r\n        const start = this.inputIndex;\r\n        const result = this.parseLogicalOr();\r\n\r\n        if (this.optionalOperator('?')) {\r\n            const yes = this.parsePipe();\r\n            let no: AST;\r\n            if (!this.optionalCharacter(chars.$COLON)) {\r\n                const end = this.inputIndex;\r\n                const expression = this.input.substring(start, end);\r\n                this.error(`Conditional expression ${expression} requires all 3 expressions`);\r\n                no = new EmptyExpr(this.span(start));\r\n            } else {\r\n                no = this.parsePipe();\r\n            }\r\n            return new Conditional(this.span(start), result, yes, no);\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    parseLogicalOr(): AST {\r\n        // '||'\r\n        let result = this.parseLogicalAnd();\r\n        while (this.optionalOperator('||')) {\r\n            const right = this.parseLogicalAnd();\r\n            result = new Binary(this.span(result.span.start), '||', result, right);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    parseLogicalAnd(): AST {\r\n        // '&&'\r\n        let result = this.parseEquality();\r\n        while (this.optionalOperator('&&')) {\r\n            const right = this.parseEquality();\r\n            result = new Binary(this.span(result.span.start), '&&', result, right);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    parseEquality(): AST {\r\n        // '==','!=','===','!=='\r\n        let result = this.parseRelational();\r\n        while (this.next.type == TokenType.Operator) {\r\n            const operator = this.next.strValue;\r\n            switch (operator) {\r\n                case '==':\r\n                case '===':\r\n                case '!=':\r\n                case '!==':\r\n                    this.advance();\r\n                    const right = this.parseRelational();\r\n                    result = new Binary(this.span(result.span.start), operator, result, right);\r\n                    continue;\r\n            }\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    parseRelational(): AST {\r\n        // '<', '>', '<=', '>='\r\n        let result = this.parseAdditive();\r\n        while (this.next.type == TokenType.Operator) {\r\n            const operator = this.next.strValue;\r\n            switch (operator) {\r\n                case '<':\r\n                case '>':\r\n                case '<=':\r\n                case '>=':\r\n                    this.advance();\r\n                    const right = this.parseAdditive();\r\n                    result = new Binary(this.span(result.span.start), operator, result, right);\r\n                    continue;\r\n            }\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    parseAdditive(): AST {\r\n        // '+', '-'\r\n        let result = this.parseMultiplicative();\r\n        while (this.next.type == TokenType.Operator) {\r\n            const operator = this.next.strValue;\r\n            switch (operator) {\r\n                case '+':\r\n                case '-':\r\n                    this.advance();\r\n                    let right = this.parseMultiplicative();\r\n                    result = new Binary(this.span(result.span.start), operator, result, right);\r\n                    continue;\r\n            }\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    parseMultiplicative(): AST {\r\n        // '*', '%', '/'\r\n        let result = this.parsePrefix();\r\n        while (this.next.type == TokenType.Operator) {\r\n            const operator = this.next.strValue;\r\n            switch (operator) {\r\n                case '*':\r\n                case '%':\r\n                case '/':\r\n                    this.advance();\r\n                    let right = this.parsePrefix();\r\n                    result = new Binary(this.span(result.span.start), operator, result, right);\r\n                    continue;\r\n            }\r\n            break;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    parsePrefix(): AST {\r\n        if (this.next.type == TokenType.Operator) {\r\n            const start = this.inputIndex;\r\n            const operator = this.next.strValue;\r\n            let result: AST;\r\n            switch (operator) {\r\n                case '+':\r\n                    this.advance();\r\n                    return this.parsePrefix();\r\n                case '-':\r\n                    this.advance();\r\n                    result = this.parsePrefix();\r\n                    return new Binary(\r\n                        this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0),\r\n                        result);\r\n                case '!':\r\n                    this.advance();\r\n                    result = this.parsePrefix();\r\n                    return new PrefixNot(this.span(start), result);\r\n            }\r\n        }\r\n        return this.parseCallChain();\r\n    }\r\n\r\n    parseCallChain(): AST {\r\n        let result = this.parsePrimary();\r\n        while (true) {\r\n            if (this.optionalCharacter(chars.$PERIOD)) {\r\n                result = this.parseAccessMemberOrMethodCall(result, false);\r\n\r\n            } else if (this.optionalOperator('?.')) {\r\n                result = this.parseAccessMemberOrMethodCall(result, true);\r\n\r\n            } else if (this.optionalCharacter(chars.$LBRACKET)) {\r\n                this.rbracketsExpected++;\r\n                const key = this.parsePipe();\r\n                this.rbracketsExpected--;\r\n                this.expectCharacter(chars.$RBRACKET);\r\n                if (this.optionalOperator('=')) {\r\n                    const value = this.parseConditional();\r\n                    result = new KeyedWrite(this.span(result.span.start), result, key, value);\r\n                } else {\r\n                    result = new KeyedRead(this.span(result.span.start), result, key);\r\n                }\r\n\r\n            } else if (this.optionalCharacter(chars.$LPAREN)) {\r\n                this.rparensExpected++;\r\n                const args = this.parseCallArguments();\r\n                this.rparensExpected--;\r\n                this.expectCharacter(chars.$RPAREN);\r\n                result = new FunctionCall(this.span(result.span.start), result, args);\r\n\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    parsePrimary(): AST {\r\n        const start = this.inputIndex;\r\n        if (this.optionalCharacter(chars.$LPAREN)) {\r\n            this.rparensExpected++;\r\n            const result = this.parsePipe();\r\n            this.rparensExpected--;\r\n            this.expectCharacter(chars.$RPAREN);\r\n            return result;\r\n\r\n        } else if (this.next.isKeywordNull()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), null);\r\n\r\n        } else if (this.next.isKeywordUndefined()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), void 0);\r\n\r\n        } else if (this.next.isKeywordTrue()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), true);\r\n\r\n        } else if (this.next.isKeywordFalse()) {\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), false);\r\n\r\n        } else if (this.next.isKeywordThis()) {\r\n            this.advance();\r\n            return new ImplicitReceiver(this.span(start));\r\n\r\n        } else if (this.optionalCharacter(chars.$LBRACKET)) {\r\n            this.rbracketsExpected++;\r\n            const elements = this.parseExpressionList(chars.$RBRACKET);\r\n            this.rbracketsExpected--;\r\n            this.expectCharacter(chars.$RBRACKET);\r\n            return new LiteralArray(this.span(start), elements);\r\n\r\n        } else if (this.next.isCharacter(chars.$LBRACE)) {\r\n            return this.parseLiteralMap();\r\n\r\n        } else if (this.next.isIdentifier()) {\r\n            return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);\r\n\r\n        } else if (this.next.isNumber()) {\r\n            const value = this.next.toNumber();\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), value);\r\n\r\n        } else if (this.next.isString()) {\r\n            const literalValue = this.next.toString();\r\n            this.advance();\r\n            return new LiteralPrimitive(this.span(start), literalValue);\r\n\r\n        } else if (this.index >= this.tokens.length) {\r\n            this.error(`Unexpected end of expression: ${this.input}`);\r\n            return new EmptyExpr(this.span(start));\r\n        } else {\r\n            this.error(`Unexpected token ${this.next}`);\r\n            return new EmptyExpr(this.span(start));\r\n        }\r\n    }\r\n\r\n    parseExpressionList(terminator: number): AST[] {\r\n        const result: AST[] = [];\r\n        if (!this.next.isCharacter(terminator)) {\r\n            do {\r\n                result.push(this.parsePipe());\r\n            } while (this.optionalCharacter(chars.$COMMA));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    parseLiteralMap(): LiteralMap {\r\n        const keys: string[] = [];\r\n        const values: AST[] = [];\r\n        const start = this.inputIndex;\r\n        this.expectCharacter(chars.$LBRACE);\r\n        if (!this.optionalCharacter(chars.$RBRACE)) {\r\n            this.rbracesExpected++;\r\n            do {\r\n                const key = this.expectIdentifierOrKeywordOrString();\r\n                keys.push(key);\r\n                this.expectCharacter(chars.$COLON);\r\n                values.push(this.parsePipe());\r\n            } while (this.optionalCharacter(chars.$COMMA));\r\n            this.rbracesExpected--;\r\n            this.expectCharacter(chars.$RBRACE);\r\n        }\r\n        return new LiteralMap(this.span(start), keys, values);\r\n    }\r\n\r\n    parseAccessMemberOrMethodCall(receiver: AST, isSafe: boolean = false): AST {\r\n        const start = receiver.span.start;\r\n        const id = this.expectIdentifierOrKeyword();\r\n\r\n        if (this.optionalCharacter(chars.$LPAREN)) {\r\n            this.rparensExpected++;\r\n            const args = this.parseCallArguments();\r\n            this.expectCharacter(chars.$RPAREN);\r\n            this.rparensExpected--;\r\n            const span = this.span(start);\r\n            return isSafe ? new SafeMethodCall(span, receiver, id, args) :\r\n                new MethodCall(span, receiver, id, args);\r\n\r\n        } else {\r\n            if (isSafe) {\r\n                if (this.optionalOperator('=')) {\r\n                    this.error('The \\'?.\\' operator cannot be used in the assignment');\r\n                    return new EmptyExpr(this.span(start));\r\n                } else {\r\n                    return new SafePropertyRead(this.span(start), receiver, id);\r\n                }\r\n            } else {\r\n                if (this.optionalOperator('=')) {\r\n                    if (!this.parseAction) {\r\n                        this.error('Bindings cannot contain assignments');\r\n                        return new EmptyExpr(this.span(start));\r\n                    }\r\n\r\n                    const value = this.parseConditional();\r\n                    return new PropertyWrite(this.span(start), receiver, id, value);\r\n                } else {\r\n                    return new PropertyRead(this.span(start), receiver, id);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    parseCallArguments(): BindingPipe[] {\r\n        if (this.next.isCharacter(chars.$RPAREN)) return [];\r\n        const positionals: AST[] = [];\r\n        do {\r\n            positionals.push(this.parsePipe());\r\n        } while (this.optionalCharacter(chars.$COMMA));\r\n        return positionals as BindingPipe[];\r\n    }\r\n\r\n    /**\r\n     * An identifier, a keyword, a string with an optional `-` inbetween.\r\n     */\r\n    expectTemplateBindingKey(): string {\r\n        let result = '';\r\n        let operatorFound = false;\r\n        do {\r\n            result += this.expectIdentifierOrKeywordOrString();\r\n            operatorFound = this.optionalOperator('-');\r\n            if (operatorFound) {\r\n                result += '-';\r\n            }\r\n        } while (operatorFound);\r\n\r\n        return result.toString();\r\n    }\r\n\r\n    parseTemplateBindings(): TemplateBindingParseResult {\r\n        const bindings: TemplateBinding[] = [];\r\n        let prefix: string = null;\r\n        const warnings: string[] = [];\r\n        while (this.index < this.tokens.length) {\r\n            const start = this.inputIndex;\r\n            const keyIsVar: boolean = this.peekKeywordLet();\r\n            if (keyIsVar) {\r\n                this.advance();\r\n            }\r\n            let key = this.expectTemplateBindingKey();\r\n            if (!keyIsVar) {\r\n                if (prefix == null) {\r\n                    prefix = key;\r\n                } else {\r\n                    key = prefix + key[0].toUpperCase() + key.substring(1);\r\n                }\r\n            }\r\n            this.optionalCharacter(chars.$COLON);\r\n            let name: string = null;\r\n            let expression: ASTWithSource = null;\r\n            if (keyIsVar) {\r\n                if (this.optionalOperator('=')) {\r\n                    name = this.expectTemplateBindingKey();\r\n                } else {\r\n                    name = '\\$implicit';\r\n                }\r\n            } else if (this.next !== EOF && !this.peekKeywordLet()) {\r\n                const start = this.inputIndex;\r\n                const ast = this.parsePipe();\r\n                const source = this.input.substring(start - this.offset, this.inputIndex - this.offset);\r\n                expression = new ASTWithSource(ast, source, this.location, this.errors);\r\n            }\r\n            bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name, expression));\r\n            if (!this.optionalCharacter(chars.$SEMICOLON)) {\r\n                this.optionalCharacter(chars.$COMMA);\r\n            }\r\n        }\r\n        return new TemplateBindingParseResult(bindings, warnings, this.errors);\r\n    }\r\n\r\n    error(message: string, index: number = null) {\r\n        this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));\r\n        this.skip();\r\n    }\r\n\r\n    private locationText(index: number = null) {\r\n        if (isBlank(index)) index = this.index;\r\n        return (index < this.tokens.length) ? `at column ${this.tokens[index].index + 1} in` :\r\n            `at the end of the expression`;\r\n    }\r\n\r\n    // Error recovery should skip tokens until it encounters a recovery point. skip() treats\r\n    // the end of input and a ';' as unconditionally a recovery point. It also treats ')',\r\n    // '}' and ']' as conditional recovery points if one of calling productions is expecting\r\n    // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing\r\n    // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because\r\n    // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols\r\n    // must be conditional as they must be skipped if none of the calling productions are not\r\n    // expecting the closing token else we will never make progress in the case of an\r\n    // extraneous group closing symbol (such as a stray ')'). This is not the case for ';' because\r\n    // parseChain() is always the root production and it expects a ';'.\r\n\r\n    // If a production expects one of these token it increments the corresponding nesting count,\r\n    // and then decrements it just prior to checking if the token is in the input.\r\n    private skip() {\r\n        let n = this.next;\r\n        while (this.index < this.tokens.length && !n.isCharacter(chars.$SEMICOLON) &&\r\n        (this.rparensExpected <= 0 || !n.isCharacter(chars.$RPAREN)) &&\r\n        (this.rbracesExpected <= 0 || !n.isCharacter(chars.$RBRACE)) &&\r\n        (this.rbracketsExpected <= 0 || !n.isCharacter(chars.$RBRACKET))) {\r\n            if (this.next.isError()) {\r\n                this.errors.push(\r\n                    new ParserError(this.next.toString(), this.input, this.locationText(), this.location));\r\n            }\r\n            this.advance();\r\n            n = this.next;\r\n        }\r\n    }\r\n}\r\n\r\nclass SimpleExpressionChecker implements AstVisitor {\r\n    static check(ast: AST): string[] {\r\n        const s = new SimpleExpressionChecker();\r\n        ast.visit(s);\r\n        return s.errors;\r\n    }\r\n\r\n    errors: string[] = [];\r\n\r\n    visitImplicitReceiver(ast: ImplicitReceiver, context: any) {}\r\n\r\n    visitInterpolation(ast: Interpolation, context: any) {}\r\n\r\n    visitLiteralPrimitive(ast: LiteralPrimitive, context: any) {}\r\n\r\n    visitPropertyRead(ast: PropertyRead, context: any) {}\r\n\r\n    visitPropertyWrite(ast: PropertyWrite, context: any) {}\r\n\r\n    visitSafePropertyRead(ast: SafePropertyRead, context: any) {}\r\n\r\n    visitMethodCall(ast: MethodCall, context: any) {}\r\n\r\n    visitSafeMethodCall(ast: SafeMethodCall, context: any) {}\r\n\r\n    visitFunctionCall(ast: FunctionCall, context: any) {}\r\n\r\n    visitLiteralArray(ast: LiteralArray, context: any) { this.visitAll(ast.expressions); }\r\n\r\n    visitLiteralMap(ast: LiteralMap, context: any) { this.visitAll(ast.values); }\r\n\r\n    visitBinary(ast: Binary, context: any) {}\r\n\r\n    visitPrefixNot(ast: PrefixNot, context: any) {}\r\n\r\n    visitConditional(ast: Conditional, context: any) {}\r\n\r\n    visitPipe(ast: BindingPipe, context: any) { this.errors.push('pipes'); }\r\n\r\n    visitKeyedRead(ast: KeyedRead, context: any) {}\r\n\r\n    visitKeyedWrite(ast: KeyedWrite, context: any) {}\r\n\r\n    visitAll(asts: any[]): any[] { return asts.map(node => node.visit(this)); }\r\n\r\n    visitChain(ast: Chain, context: any) {}\r\n\r\n    visitQuote(ast: Quote, context: any) {}\r\n}"]}