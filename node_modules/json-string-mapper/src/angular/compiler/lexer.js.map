{"version":3,"sources":["../src/angular/compiler/lexer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,KAAK,MAAM,SAAS,CAAC;AACjC,OAAO,EAAC,aAAa,EAAC,MAAM,gBAAgB,CAAC;AAE7C,MAAM,CAAN,IAAY,SAQX;AARD,WAAY,SAAS;IACjB,mDAAS,CAAA;IACT,qDAAU,CAAA;IACV,+CAAO,CAAA;IACP,6CAAM,CAAA;IACN,iDAAQ,CAAA;IACR,6CAAM,CAAA;IACN,2CAAK,CAAA;AACT,CAAC,EARW,SAAS,KAAT,SAAS,QAQpB;AAED,IAAM,QAAQ,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AAE5F;IAAA;IAWA,CAAC;IAVG,wBAAQ,GAAR,UAAS,IAAY;QACjB,IAAM,OAAO,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;QACnC,IAAM,MAAM,GAAY,EAAE,CAAC;QAC3B,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;QAChC,OAAO,KAAK,IAAI,IAAI,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnB,KAAK,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;QAChC,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IACL,YAAC;AAAD,CAXA,AAWC,IAAA;;AAED;IACI,eACW,KAAa,EAAS,IAAe,EAAS,QAAgB,EAC9D,QAAgB;QADhB,UAAK,GAAL,KAAK,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAW;QAAS,aAAQ,GAAR,QAAQ,CAAQ;QAC9D,aAAQ,GAAR,QAAQ,CAAQ;IAAG,CAAC;IAE/B,2BAAW,GAAX,UAAY,IAAY;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC;IACrE,CAAC;IAED,wBAAQ,GAAR,cAAsB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IAE7D,wBAAQ,GAAR,cAAsB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IAE7D,0BAAU,GAAV,UAAW,QAAgB;QACvB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC;IACxE,CAAC;IAED,4BAAY,GAAZ,cAA0B,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;IAErE,yBAAS,GAAT,cAAuB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IAE/D,4BAAY,GAAZ,cAA0B,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC;IAE5F,6BAAa,GAAb,cAA2B,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC;IAE9F,kCAAkB,GAAlB;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,WAAW,CAAC;IAC1E,CAAC;IAED,6BAAa,GAAb,cAA2B,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC;IAE9F,8BAAc,GAAd,cAA4B,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC;IAEhG,6BAAa,GAAb,cAA2B,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,IAAI,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC;IAE9F,uBAAO,GAAP,cAAqB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAE3D,wBAAQ,GAAR,cAAqB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEjF,wBAAQ,GAAR;QACI,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAChB,KAAK,SAAS,CAAC,SAAS,CAAC;YACzB,KAAK,SAAS,CAAC,UAAU,CAAC;YAC1B,KAAK,SAAS,CAAC,OAAO,CAAC;YACvB,KAAK,SAAS,CAAC,QAAQ,CAAC;YACxB,KAAK,SAAS,CAAC,MAAM,CAAC;YACtB,KAAK,SAAS,CAAC,KAAK;gBAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACzB,KAAK,SAAS,CAAC,MAAM;gBACjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACpC;gBACI,MAAM,CAAC,IAAI,CAAC;QACpB,CAAC;IACL,CAAC;IACL,YAAC;AAAD,CAtDA,AAsDC,IAAA;;AAED,2BAA2B,KAAa,EAAE,IAAY;IAClD,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;AAClF,CAAC;AAED,4BAA4B,KAAa,EAAE,IAAY;IACnD,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,UAAU,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AAC3D,CAAC;AAED,yBAAyB,KAAa,EAAE,IAAY;IAChD,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACxD,CAAC;AAED,0BAA0B,KAAa,EAAE,IAAY;IACjD,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACzD,CAAC;AAED,wBAAwB,KAAa,EAAE,IAAY;IAC/C,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACvD,CAAC;AAED,wBAAwB,KAAa,EAAE,CAAS;IAC5C,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AACrD,CAAC;AAED,uBAAuB,KAAa,EAAE,OAAe;IACjD,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,CAAC,IAAM,GAAG,GAAU,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AAEpE;IAKI,kBAAmB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;QAHhC,SAAI,GAAW,CAAC,CAAC;QACjB,UAAK,GAAW,CAAC,CAAC,CAAC;QAGf,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAC,OAAO,EAAE,CAAC;IACnB,CAAC;IAED,0BAAO,GAAP;QACI,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7F,CAAC;IAED,4BAAS,GAAT;QACI,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC/C,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAEzC,mBAAmB;QACnB,OAAO,IAAI,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;YAC1B,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;gBAClB,KAAK,CAAC;YACV,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACnC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,EAAE,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,kCAAkC;QAClC,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1D,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAEvD,IAAM,KAAK,GAAW,KAAK,CAAC;QAC5B,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,KAAK,KAAK,CAAC,OAAO;gBACd,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;oBACpD,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAChD,KAAK,KAAK,CAAC,OAAO,CAAC;YACnB,KAAK,KAAK,CAAC,OAAO,CAAC;YACnB,KAAK,KAAK,CAAC,OAAO,CAAC;YACnB,KAAK,KAAK,CAAC,OAAO,CAAC;YACnB,KAAK,KAAK,CAAC,SAAS,CAAC;YACrB,KAAK,KAAK,CAAC,SAAS,CAAC;YACrB,KAAK,KAAK,CAAC,MAAM,CAAC;YAClB,KAAK,KAAK,CAAC,MAAM,CAAC;YAClB,KAAK,KAAK,CAAC,UAAU;gBACjB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3C,KAAK,KAAK,CAAC,GAAG,CAAC;YACf,KAAK,KAAK,CAAC,GAAG;gBACV,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YAC7B,KAAK,KAAK,CAAC,KAAK,CAAC;YACjB,KAAK,KAAK,CAAC,KAAK,CAAC;YACjB,KAAK,KAAK,CAAC,MAAM,CAAC;YAClB,KAAK,KAAK,CAAC,KAAK,CAAC;YACjB,KAAK,KAAK,CAAC,MAAM,CAAC;YAClB,KAAK,KAAK,CAAC,QAAQ,CAAC;YACpB,KAAK,KAAK,CAAC,MAAM;gBACb,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/D,KAAK,KAAK,CAAC,SAAS;gBAChB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;YACpE,KAAK,KAAK,CAAC,GAAG,CAAC;YACf,KAAK,KAAK,CAAC,GAAG;gBACV,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YACtF,KAAK,KAAK,CAAC,KAAK,CAAC;YACjB,KAAK,KAAK,CAAC,GAAG;gBACV,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAC3B,KAAK,EAAE,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;YAC1E,KAAK,KAAK,CAAC,UAAU;gBACjB,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;YACvE,KAAK,KAAK,CAAC,IAAI;gBACX,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACjE,KAAK,KAAK,CAAC,KAAK;gBACZ,OAAO,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC;oBAAE,IAAI,CAAC,OAAO,EAAE,CAAC;gBACrD,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QAChC,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,2BAAyB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,MAAG,EAAE,CAAC,CAAC,CAAC;IAChF,CAAC;IAED,gCAAa,GAAb,UAAc,KAAa,EAAE,IAAY;QACrC,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,MAAM,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAGD,+BAAY,GAAZ,UAAa,KAAa,EAAE,GAAW;QACnC,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACxC,CAAC;IAED;;;;;;;;;;OAUG;IACH,sCAAmB,GAAnB,UACI,KAAa,EAAE,GAAW,EAAE,OAAe,EAAE,GAAW,EAAE,SAAkB,EAC5E,KAAc;QACd,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,GAAG,GAAW,GAAG,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,GAAG,IAAI,GAAG,CAAC;QACf,CAAC;QACD,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,GAAG,IAAI,KAAK,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,gBAAgB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACxC,CAAC;IAED,iCAAc,GAAd;QACI,IAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC;QACjC,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC;YAAE,IAAI,CAAC,OAAO,EAAE,CAAC;QACnD,IAAM,GAAG,GAAW,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5D,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC;YAC3D,kBAAkB,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACvC,CAAC;IAED,6BAAU,GAAV,UAAW,KAAa;QACpB,IAAI,MAAM,GAAY,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;QAC7C,IAAI,CAAC,OAAO,EAAE,CAAC,CAAE,sBAAsB;QACvC,OAAO,IAAI,EAAE,CAAC;YACV,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3B,cAAc;YAClB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;gBACpC,MAAM,GAAG,KAAK,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,EAAE,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBAC9C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC;gBACzE,MAAM,GAAG,KAAK,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAK,CAAC;YACV,CAAC;YACD,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;QACD,IAAM,GAAG,GAAW,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5D,IAAM,KAAK,GAAW,MAAM,GAAG,aAAa,CAAC,iBAAiB,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QACtF,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACxC,CAAC;IAED,6BAAU,GAAV;QACI,IAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC;QACjC,IAAM,KAAK,GAAW,IAAI,CAAC,IAAI,CAAC;QAChC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAE,sBAAsB;QAEvC,IAAI,MAAM,GAAW,EAAE,CAAC;QACxB,IAAI,MAAM,GAAW,IAAI,CAAC,KAAK,CAAC;QAChC,IAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC;QAEjC,OAAO,IAAI,CAAC,IAAI,IAAI,KAAK,EAAE,CAAC;YACxB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;gBAChC,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9C,IAAI,CAAC,OAAO,EAAE,CAAC;gBACf,IAAI,aAAa,SAAQ,CAAC;gBAC1B,kDAAkD;gBAClD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxB,8CAA8C;oBAC9C,IAAM,GAAG,GAAW,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACpE,EAAE,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAC3B,aAAa,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBACtC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,gCAA8B,GAAG,MAAG,EAAE,CAAC,CAAC,CAAC;oBAC/D,CAAC;oBACD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;wBACjC,IAAI,CAAC,OAAO,EAAE,CAAC;oBACnB,CAAC;gBACL,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,aAAa,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBACpC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACnB,CAAC;gBACD,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;gBAC7C,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;YACxB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;YAC/C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;QACL,CAAC;QAED,IAAM,IAAI,GAAW,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,EAAE,CAAC,CAAE,0BAA0B;QAE3C,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,GAAG,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,wBAAK,GAAL,UAAM,OAAe,EAAE,MAAc;QACjC,IAAM,QAAQ,GAAW,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;QAC7C,MAAM,CAAC,aAAa,CAChB,QAAQ,EAAE,kBAAgB,OAAO,mBAAc,QAAQ,wBAAmB,IAAI,CAAC,KAAK,MAAG,CAAC,CAAC;IACjG,CAAC;IACL,eAAC;AAAD,CAjNA,AAiNC,IAAA;AAED,2BAA2B,IAAY;IACnC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC;QACnF,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AACjD,CAAC;AAED,MAAM,uBAAuB,KAAa;IACtC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC;QAAC,MAAM,CAAC,KAAK,CAAC;IACpC,IAAM,OAAO,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpC,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAAC,MAAM,CAAC,KAAK,CAAC;IACnD,OAAO,CAAC,OAAO,EAAE,CAAC;IAClB,OAAO,OAAO,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE,CAAC;QACjC,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAClD,OAAO,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC;AAED,0BAA0B,IAAY;IAClC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC;QACzE,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAC3B,CAAC;AAED,yBAAyB,IAAY;IACjC,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,IAAI,IAAI,IAAI,KAAK,CAAC,EAAE,CAAC;AAChD,CAAC;AAED,wBAAwB,IAAY;IAChC,MAAM,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC;AACvD,CAAC;AAED,MAAM,kBAAkB,IAAY;IAChC,MAAM,CAAC,IAAI,KAAK,KAAK,CAAC,GAAG,IAAI,IAAI,KAAK,KAAK,CAAC,GAAG,IAAI,IAAI,KAAK,KAAK,CAAC,GAAG,CAAC;AAC1E,CAAC;AAED,kBAAkB,IAAY;IAC1B,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACX,KAAK,KAAK,CAAC,EAAE;YACT,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;QACrB,KAAK,KAAK,CAAC,EAAE;YACT,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;QACrB,KAAK,KAAK,CAAC,EAAE;YACT,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;QACrB,KAAK,KAAK,CAAC,EAAE;YACT,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;QACtB,KAAK,KAAK,CAAC,EAAE;YACT,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC;QACvB;YACI,MAAM,CAAC,IAAI,CAAC;IACpB,CAAC;AACL,CAAC","file":"lexer.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google Inc. All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nimport * as chars from './chars';\r\nimport {NumberWrapper} from '../facade/lang';\r\n\r\nexport enum TokenType {\r\n    Character,\r\n    Identifier,\r\n    Keyword,\r\n    String,\r\n    Operator,\r\n    Number,\r\n    Error\r\n}\r\n\r\nconst KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];\r\n\r\nexport class Lexer {\r\n    tokenize(text: string): Token[] {\r\n        const scanner = new _Scanner(text);\r\n        const tokens: Token[] = [];\r\n        let token = scanner.scanToken();\r\n        while (token != null) {\r\n            tokens.push(token);\r\n            token = scanner.scanToken();\r\n        }\r\n        return tokens;\r\n    }\r\n}\r\n\r\nexport class Token {\r\n    constructor(\r\n        public index: number, public type: TokenType, public numValue: number,\r\n        public strValue: string) {}\r\n\r\n    isCharacter(code: number): boolean {\r\n        return this.type == TokenType.Character && this.numValue == code;\r\n    }\r\n\r\n    isNumber(): boolean { return this.type == TokenType.Number; }\r\n\r\n    isString(): boolean { return this.type == TokenType.String; }\r\n\r\n    isOperator(operater: string): boolean {\r\n        return this.type == TokenType.Operator && this.strValue == operater;\r\n    }\r\n\r\n    isIdentifier(): boolean { return this.type == TokenType.Identifier; }\r\n\r\n    isKeyword(): boolean { return this.type == TokenType.Keyword; }\r\n\r\n    isKeywordLet(): boolean { return this.type == TokenType.Keyword && this.strValue == 'let'; }\r\n\r\n    isKeywordNull(): boolean { return this.type == TokenType.Keyword && this.strValue == 'null'; }\r\n\r\n    isKeywordUndefined(): boolean {\r\n        return this.type == TokenType.Keyword && this.strValue == 'undefined';\r\n    }\r\n\r\n    isKeywordTrue(): boolean { return this.type == TokenType.Keyword && this.strValue == 'true'; }\r\n\r\n    isKeywordFalse(): boolean { return this.type == TokenType.Keyword && this.strValue == 'false'; }\r\n\r\n    isKeywordThis(): boolean { return this.type == TokenType.Keyword && this.strValue == 'this'; }\r\n\r\n    isError(): boolean { return this.type == TokenType.Error; }\r\n\r\n    toNumber(): number { return this.type == TokenType.Number ? this.numValue : -1; }\r\n\r\n    toString(): string {\r\n        switch (this.type) {\r\n            case TokenType.Character:\r\n            case TokenType.Identifier:\r\n            case TokenType.Keyword:\r\n            case TokenType.Operator:\r\n            case TokenType.String:\r\n            case TokenType.Error:\r\n                return this.strValue;\r\n            case TokenType.Number:\r\n                return this.numValue.toString();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n}\r\n\r\nfunction newCharacterToken(index: number, code: number): Token {\r\n    return new Token(index, TokenType.Character, code, String.fromCharCode(code));\r\n}\r\n\r\nfunction newIdentifierToken(index: number, text: string): Token {\r\n    return new Token(index, TokenType.Identifier, 0, text);\r\n}\r\n\r\nfunction newKeywordToken(index: number, text: string): Token {\r\n    return new Token(index, TokenType.Keyword, 0, text);\r\n}\r\n\r\nfunction newOperatorToken(index: number, text: string): Token {\r\n    return new Token(index, TokenType.Operator, 0, text);\r\n}\r\n\r\nfunction newStringToken(index: number, text: string): Token {\r\n    return new Token(index, TokenType.String, 0, text);\r\n}\r\n\r\nfunction newNumberToken(index: number, n: number): Token {\r\n    return new Token(index, TokenType.Number, n, '');\r\n}\r\n\r\nfunction newErrorToken(index: number, message: string): Token {\r\n    return new Token(index, TokenType.Error, 0, message);\r\n}\r\n\r\nexport const EOF: Token = new Token(-1, TokenType.Character, 0, '');\r\n\r\nclass _Scanner {\r\n    length: number;\r\n    peek: number = 0;\r\n    index: number = -1;\r\n\r\n    constructor(public input: string) {\r\n        this.length = input.length;\r\n        this.advance();\r\n    }\r\n\r\n    advance() {\r\n        this.peek = ++this.index >= this.length ? chars.$EOF : this.input.charCodeAt(this.index);\r\n    }\r\n\r\n    scanToken(): Token {\r\n        const input = this.input, length = this.length;\r\n        let peek = this.peek, index = this.index;\r\n\r\n        // Skip whitespace.\r\n        while (peek <= chars.$SPACE) {\r\n            if (++index >= length) {\r\n                peek = chars.$EOF;\r\n                break;\r\n            } else {\r\n                peek = input.charCodeAt(index);\r\n            }\r\n        }\r\n\r\n        this.peek = peek;\r\n        this.index = index;\r\n\r\n        if (index >= length) {\r\n            return null;\r\n        }\r\n\r\n        // Handle identifiers and numbers.\r\n        if (isIdentifierStart(peek)) return this.scanIdentifier();\r\n        if (chars.isDigit(peek)) return this.scanNumber(index);\r\n\r\n        const start: number = index;\r\n        switch (peek) {\r\n            case chars.$PERIOD:\r\n                this.advance();\r\n                return chars.isDigit(this.peek) ? this.scanNumber(start) :\r\n                    newCharacterToken(start, chars.$PERIOD);\r\n            case chars.$LPAREN:\r\n            case chars.$RPAREN:\r\n            case chars.$LBRACE:\r\n            case chars.$RBRACE:\r\n            case chars.$LBRACKET:\r\n            case chars.$RBRACKET:\r\n            case chars.$COMMA:\r\n            case chars.$COLON:\r\n            case chars.$SEMICOLON:\r\n                return this.scanCharacter(start, peek);\r\n            case chars.$SQ:\r\n            case chars.$DQ:\r\n                return this.scanString();\r\n            case chars.$HASH:\r\n            case chars.$PLUS:\r\n            case chars.$MINUS:\r\n            case chars.$STAR:\r\n            case chars.$SLASH:\r\n            case chars.$PERCENT:\r\n            case chars.$CARET:\r\n                return this.scanOperator(start, String.fromCharCode(peek));\r\n            case chars.$QUESTION:\r\n                return this.scanComplexOperator(start, '?', chars.$PERIOD, '.');\r\n            case chars.$LT:\r\n            case chars.$GT:\r\n                return this.scanComplexOperator(start, String.fromCharCode(peek), chars.$EQ, '=');\r\n            case chars.$BANG:\r\n            case chars.$EQ:\r\n                return this.scanComplexOperator(\r\n                    start, String.fromCharCode(peek), chars.$EQ, '=', chars.$EQ, '=');\r\n            case chars.$AMPERSAND:\r\n                return this.scanComplexOperator(start, '&', chars.$AMPERSAND, '&');\r\n            case chars.$BAR:\r\n                return this.scanComplexOperator(start, '|', chars.$BAR, '|');\r\n            case chars.$NBSP:\r\n                while (chars.isWhitespace(this.peek)) this.advance();\r\n                return this.scanToken();\r\n        }\r\n\r\n        this.advance();\r\n        return this.error(`Unexpected character [${String.fromCharCode(peek)}]`, 0);\r\n    }\r\n\r\n    scanCharacter(start: number, code: number): Token {\r\n        this.advance();\r\n        return newCharacterToken(start, code);\r\n    }\r\n\r\n\r\n    scanOperator(start: number, str: string): Token {\r\n        this.advance();\r\n        return newOperatorToken(start, str);\r\n    }\r\n\r\n    /**\r\n     * Tokenize a 2/3 char long operator\r\n     *\r\n     * @param start start index in the expression\r\n     * @param one first symbol (always part of the operator)\r\n     * @param twoCode code point for the second symbol\r\n     * @param two second symbol (part of the operator when the second code point matches)\r\n     * @param threeCode code point for the third symbol\r\n     * @param three third symbol (part of the operator when provided and matches source expression)\r\n     * @returns {Token}\r\n     */\r\n    scanComplexOperator(\r\n        start: number, one: string, twoCode: number, two: string, threeCode?: number,\r\n        three?: string): Token {\r\n        this.advance();\r\n        let str: string = one;\r\n        if (this.peek == twoCode) {\r\n            this.advance();\r\n            str += two;\r\n        }\r\n        if (threeCode != null && this.peek == threeCode) {\r\n            this.advance();\r\n            str += three;\r\n        }\r\n        return newOperatorToken(start, str);\r\n    }\r\n\r\n    scanIdentifier(): Token {\r\n        const start: number = this.index;\r\n        this.advance();\r\n        while (isIdentifierPart(this.peek)) this.advance();\r\n        const str: string = this.input.substring(start, this.index);\r\n        return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :\r\n            newIdentifierToken(start, str);\r\n    }\r\n\r\n    scanNumber(start: number): Token {\r\n        let simple: boolean = (this.index === start);\r\n        this.advance();  // Skip initial digit.\r\n        while (true) {\r\n            if (chars.isDigit(this.peek)) {\r\n                // Do nothing.\r\n            } else if (this.peek == chars.$PERIOD) {\r\n                simple = false;\r\n            } else if (isExponentStart(this.peek)) {\r\n                this.advance();\r\n                if (isExponentSign(this.peek)) this.advance();\r\n                if (!chars.isDigit(this.peek)) return this.error('Invalid exponent', -1);\r\n                simple = false;\r\n            } else {\r\n                break;\r\n            }\r\n            this.advance();\r\n        }\r\n        const str: string = this.input.substring(start, this.index);\r\n        const value: number = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);\r\n        return newNumberToken(start, value);\r\n    }\r\n\r\n    scanString(): Token {\r\n        const start: number = this.index;\r\n        const quote: number = this.peek;\r\n        this.advance();  // Skip initial quote.\r\n\r\n        let buffer: string = '';\r\n        let marker: number = this.index;\r\n        const input: string = this.input;\r\n\r\n        while (this.peek != quote) {\r\n            if (this.peek == chars.$BACKSLASH) {\r\n                buffer += input.substring(marker, this.index);\r\n                this.advance();\r\n                let unescapedCode: number;\r\n                // Workaround for TS2.1-introduced type strictness\r\n                this.peek = this.peek;\r\n                if (this.peek == chars.$u) {\r\n                    // 4 character hex code for unicode character.\r\n                    const hex: string = input.substring(this.index + 1, this.index + 5);\r\n                    if (/^[0-9a-f]+$/i.test(hex)) {\r\n                        unescapedCode = parseInt(hex, 16);\r\n                    } else {\r\n                        return this.error(`Invalid unicode escape [\\\\u${hex}]`, 0);\r\n                    }\r\n                    for (let i: number = 0; i < 5; i++) {\r\n                        this.advance();\r\n                    }\r\n                } else {\r\n                    unescapedCode = unescape(this.peek);\r\n                    this.advance();\r\n                }\r\n                buffer += String.fromCharCode(unescapedCode);\r\n                marker = this.index;\r\n            } else if (this.peek == chars.$EOF) {\r\n                return this.error('Unterminated quote', 0);\r\n            } else {\r\n                this.advance();\r\n            }\r\n        }\r\n\r\n        const last: string = input.substring(marker, this.index);\r\n        this.advance();  // Skip terminating quote.\r\n\r\n        return newStringToken(start, buffer + last);\r\n    }\r\n\r\n    error(message: string, offset: number): Token {\r\n        const position: number = this.index + offset;\r\n        return newErrorToken(\r\n            position, `Lexer Error: ${message} at column ${position} in expression [${this.input}]`);\r\n    }\r\n}\r\n\r\nfunction isIdentifierStart(code: number): boolean {\r\n    return (chars.$a <= code && code <= chars.$z) || (chars.$A <= code && code <= chars.$Z) ||\r\n        (code == chars.$_) || (code == chars.$$);\r\n}\r\n\r\nexport function isIdentifier(input: string): boolean {\r\n    if (input.length == 0) return false;\r\n    const scanner = new _Scanner(input);\r\n    if (!isIdentifierStart(scanner.peek)) return false;\r\n    scanner.advance();\r\n    while (scanner.peek !== chars.$EOF) {\r\n        if (!isIdentifierPart(scanner.peek)) return false;\r\n        scanner.advance();\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction isIdentifierPart(code: number): boolean {\r\n    return chars.isAsciiLetter(code) || chars.isDigit(code) || (code == chars.$_) ||\r\n        (code == chars.$$);\r\n}\r\n\r\nfunction isExponentStart(code: number): boolean {\r\n    return code == chars.$e || code == chars.$E;\r\n}\r\n\r\nfunction isExponentSign(code: number): boolean {\r\n    return code == chars.$MINUS || code == chars.$PLUS;\r\n}\r\n\r\nexport function isQuote(code: number): boolean {\r\n    return code === chars.$SQ || code === chars.$DQ || code === chars.$BT;\r\n}\r\n\r\nfunction unescape(code: number): number {\r\n    switch (code) {\r\n        case chars.$n:\r\n            return chars.$LF;\r\n        case chars.$f:\r\n            return chars.$FF;\r\n        case chars.$r:\r\n            return chars.$CR;\r\n        case chars.$t:\r\n            return chars.$TAB;\r\n        case chars.$v:\r\n            return chars.$VTAB;\r\n        default:\r\n            return code;\r\n    }\r\n}"]}