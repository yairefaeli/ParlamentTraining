{"version":3,"sources":["../src/mapper/json-string-mapper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAE,KAAK,EAAC,MAAM,qBAAqB,CAAC;AAClD,OAAO,EAAC,UAAU,EAAgB,MAAM,qBAAqB,CAAC;AAC9D,OAAO,EAAC,uBAAuB,EAAC,MAAM,mEAAmE,CAAC;AAE1G;IAAA;QACY,YAAO,GAAW,IAAI,MAAM,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC;QAC1C,WAAM,GAA+B,IAAI,GAAG,EAAyB,CAAC;IAoClF,CAAC;IAlCG,8BAAG,GAAH,UAAI,UAAkB;QAClB,IAAI,GAAG,GAAkB,IAAI,CAAC;QAC9B,IAAM,OAAO,GAAG,IAAI,uBAAuB,EAAE,CAAC;QAE9C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC9B,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACtC,CAAC;QACD,IAAI,CAAC,CAAC;YACF,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;YAEhE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACN,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;YAC1F,CAAC;YACD,IAAI,CAAC,CAAC;gBACF,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YACzD,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,YAAY,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnC,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;YACnF,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QACrC,CAAC;QAED,IAAM,OAAO,GAAG,IAAI,GAAG,EAAkB,CAAC;QAC1C,IAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC3C,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,QAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,QAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IACL,uBAAC;AAAD,CAtCA,AAsCC,IAAA","file":"json-string-mapper.js","sourcesContent":["import {Parser, Lexer} from '../angular/compiler';\r\nimport {LiteralMap, ASTWithSource} from '../angular/compiler';\r\nimport {JsonStringMapperVisitor} from \"../visitors/json-string-mapper-visitor/json-string-mapper-visitor\";\r\n\r\nexport class JsonStringMapper {\r\n    private _parser: Parser = new Parser(new Lexer());\r\n    private _cache: Map<string, ASTWithSource> = new Map<string, ASTWithSource>();\r\n\r\n    map(expression: string): Map<string, string> {\r\n        let ast: ASTWithSource = null;\r\n        const visitor = new JsonStringMapperVisitor();\r\n\r\n        if (this._cache.has(expression)) {\r\n            ast = this._cache.get(expression);\r\n        }\r\n        else {\r\n            ast = this._parser.parseInterpolation(expression, 'JsonMapper');\r\n\r\n            if (ast) {\r\n                throw new Error(`JsonMapperVisitor ERROR: given expression must be json expression.`);\r\n            }\r\n            else {\r\n                ast = this._parser.parseBinding(expression, 'Parse');\r\n            }\r\n\r\n            if (!(ast.ast instanceof LiteralMap)) {\r\n                throw new Error(`JsonMapper ERROR: given expression must be json expression.`);\r\n            }\r\n\r\n            this._cache.set(expression, ast);\r\n        }\r\n\r\n        const jsonMap = new Map<string, string>();\r\n        const resultObj = ast.visit(visitor, true);\r\n        const keys = Object.keys(resultObj);\r\n\r\n        for (let i = 0, length = keys.length; i < length; i++) {\r\n            jsonMap.set(keys[i], resultObj[keys[i]]);\r\n        }\r\n\r\n        return jsonMap;\r\n    }\r\n}"]}