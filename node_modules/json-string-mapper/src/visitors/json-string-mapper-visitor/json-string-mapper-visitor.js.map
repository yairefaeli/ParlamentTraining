{"version":3,"sources":["../src/visitors/json-string-mapper-visitor/json-string-mapper-visitor.ts"],"names":[],"mappings":"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","file":"json-string-mapper-visitor.js","sourcesContent":["import {\r\n    AST, RecursiveAstVisitor, PropertyRead, MethodCall, KeyedRead,\r\n    ImplicitReceiver, LiteralPrimitive, Binary, Chain, Conditional,\r\n    BindingPipe, FunctionCall, Interpolation, KeyedWrite, LiteralArray,\r\n    LiteralMap, PrefixNot, PropertyWrite, SafePropertyRead, SafeMethodCall, Quote\r\n} from '../../angular/compiler/ast';\r\nimport * as util from \"../../util/lang\";\r\n\r\nexport class JsonStringMapperVisitor extends RecursiveAstVisitor {\r\n\r\n    private _handleMethodArgs(args): any {\r\n        if (!args) {\r\n            return ``;\r\n        }\r\n\r\n        let result = ``;\r\n\r\n        for (let i = 0, length = args.length; i < length; i++) {\r\n            if (i === (length - 1)) {\r\n                result += `${args[i]}`;\r\n            }\r\n            else {\r\n                result += `${args[i]}, `;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private _handlePipeArgs(args): any {\r\n        if (!args) {\r\n            return ``;\r\n        }\r\n\r\n        let result = ``;\r\n\r\n        for (let arg of args) {\r\n            result += ` : ${arg}`;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    visitBinary(ast: Binary): any {\r\n        const left = ast.left.visit(this);\r\n        const right = ast.right.visit(this);\r\n\r\n        return `${left} ${ast.operation} ${right}`;\r\n    }\r\n\r\n    // TODO\r\n    visitChain(ast: Chain): any {\r\n        return util.compileToJSON(this.visitAll(ast.expressions));\r\n    }\r\n\r\n    visitConditional(ast: Conditional): any {\r\n        const condition = ast.condition.visit(this);\r\n        const trueExp = ast.trueExp.visit(this);\r\n        const falseExp = ast.falseExp.visit(this);\r\n\r\n        return `${condition} ? ${trueExp} : ${falseExp}`;\r\n    }\r\n\r\n    visitPipe(ast: BindingPipe): any {\r\n        const pipe = ast.name;\r\n        const value = ast.exp.visit(this);\r\n        const args = this._handlePipeArgs(this.visitAll(ast.args));\r\n\r\n        return `${value} | ${pipe}${args}`;\r\n    }\r\n\r\n    // TODO\r\n    visitFunctionCall(ast: FunctionCall): any {\r\n        const target = ast.target.visit(this);\r\n        const args = this._handleMethodArgs(this.visitAll(ast.args));\r\n\r\n        return `${target}(${args})`;\r\n    }\r\n\r\n    visitImplicitReceiver(ast: ImplicitReceiver): any {\r\n        return ``;\r\n    }\r\n\r\n    visitInterpolation(ast: Interpolation): any {\r\n        return `{{${this.visitAll(ast.expressions)[0]}}}`;\r\n    }\r\n\r\n    visitKeyedRead(ast: KeyedRead): any {\r\n        const obj = ast.obj.visit(this);\r\n        let key = ast.key.visit(this);\r\n\r\n        return `${obj}[${key}]`;\r\n    }\r\n\r\n    visitKeyedWrite(ast: KeyedWrite): any {\r\n        return null;\r\n    }\r\n\r\n    visitLiteralArray(ast: LiteralArray): any {\r\n        return util.compileToJSON(this.visitAll(ast.expressions));\r\n    }\r\n\r\n    visitLiteralMap(ast: LiteralMap, firstCall: boolean): any {\r\n        const result = {};\r\n        const keys = ast.keys;\r\n        const values = this.visitAll(ast.values);\r\n\r\n        for (let i = 0, length = keys.length; i < length; i++) {\r\n            let value = values[i];\r\n\r\n            if (typeof value !== 'string' && firstCall) {\r\n                value = `${value}`;\r\n            }\r\n\r\n            result[keys[i]] = value;\r\n        }\r\n\r\n        if (firstCall) {\r\n            return result;\r\n        }\r\n\r\n        return util.compileToJSON(result);\r\n    }\r\n\r\n    visitLiteralPrimitive(ast: LiteralPrimitive): any {\r\n        return typeof ast.value === 'string' ? `'${ast.value}'` : ast.value;\r\n    }\r\n\r\n    visitMethodCall(ast: MethodCall): any {\r\n        const methodName = ast.name;\r\n        const receiver = ast.receiver.visit(this);\r\n        const args = this._handleMethodArgs(this.visitAll(ast.args));\r\n\r\n        return `${receiver ? receiver + '.' : receiver}${methodName}(${args})`;\r\n    }\r\n\r\n    visitPrefixNot(ast: PrefixNot): any {\r\n        return ast.expression.visit(this);\r\n    }\r\n\r\n    visitPropertyRead(ast: PropertyRead): any {\r\n        const property = ast.name;\r\n        const receiver = ast.receiver.visit(this);\r\n\r\n        return `${receiver ? receiver + '.' : receiver}${property}`;\r\n    }\r\n\r\n    visitPropertyWrite(ast: PropertyWrite): any {\r\n        return null;\r\n    }\r\n\r\n    visitSafePropertyRead(ast: SafePropertyRead): any {\r\n        const property = ast.name;\r\n        const receiver = ast.receiver.visit(this);\r\n\r\n        return `${receiver ? receiver + '.' : receiver}${property}`;\r\n    }\r\n\r\n    visitSafeMethodCall(ast: SafeMethodCall): any {\r\n        const methodName = ast.name;\r\n        const receiver = ast.receiver.visit(this);\r\n        const args = this._handleMethodArgs(this.visitAll(ast.args));\r\n\r\n        return `${receiver ? receiver + '.' : receiver}${methodName}(${args})`;\r\n    }\r\n\r\n    visitAll(asts: AST[]): any {\r\n        return asts.map(ast => ast.visit(this));\r\n    }\r\n\r\n    visitQuote(ast: Quote): any {\r\n        return null;\r\n    }\r\n}"]}