/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { GeoUtilsService } from '../angular-cesium/services/geo-utils/geo-utils.service';
import * as h337 from 'heatmap.js/build/heatmap.js';
import { Injectable } from '@angular/core';
// Consider moving to a different package.
if (!h337) {
    throw new Error('must install heatmap.js. please do npm -i heatmap.js ');
}
/**
 * @record
 */
export function Rectangle() { }
if (false) {
    /** @type {?} */
    Rectangle.prototype.west;
    /** @type {?} */
    Rectangle.prototype.south;
    /** @type {?} */
    Rectangle.prototype.east;
    /** @type {?} */
    Rectangle.prototype.north;
}
/**
 *  x: lon
 *  y: lat
 *  value: point value
 * @record
 */
export function HeatPointDataPoint() { }
if (false) {
    /** @type {?} */
    HeatPointDataPoint.prototype.x;
    /** @type {?} */
    HeatPointDataPoint.prototype.y;
    /** @type {?} */
    HeatPointDataPoint.prototype.value;
}
/**
 *   min:  the minimum allowed value for the data values
 *  max:  the maximum allowed value for the data values
 *  heatPointsData: an array of data points in WGS84 coordinates and values like { x:lon, y:lat, value)
 * @record
 */
export function HeatmapDataSet() { }
if (false) {
    /** @type {?|undefined} */
    HeatmapDataSet.prototype.min;
    /** @type {?|undefined} */
    HeatmapDataSet.prototype.max;
    /** @type {?} */
    HeatmapDataSet.prototype.heatPointsData;
}
/**
 * a heatmap.js options object (see http://www.patrick-wied.at/static/heatmapjs/docs.html#h337-create)
 * @record
 */
export function HeatMapOptions() { }
if (false) {
    /** @type {?|undefined} */
    HeatMapOptions.prototype.gradient;
    /** @type {?|undefined} */
    HeatMapOptions.prototype.radius;
    /** @type {?|undefined} */
    HeatMapOptions.prototype.opacity;
    /** @type {?|undefined} */
    HeatMapOptions.prototype.maxOpacity;
    /** @type {?|undefined} */
    HeatMapOptions.prototype.minOpacity;
    /** @type {?|undefined} */
    HeatMapOptions.prototype.blur;
    /* Skipping unhandled member: [propName: string]: any;*/
}
/**
 * Create heatmap material (Cesium.ImageMaterialProperty with heatmap as the image)
 * works with http://www.patrick-wied.at/static/heatmapjs. must do npm -i heatmap.js
 * usage:
 * ```
 *
 * const mCreator = new CesiumHeatMapMaterialCreator();
 * const containingRect = CesiumHeatMapMaterialCreator.calcCircleContainingRect(this.circleCenter, this.circleRadius);
 * const userHeatmapOptions = {
 * radius : 2000,
 * minOpacity : 0,
 * maxOpacity : 0.9,
 * } as any;
 * this.circleHeatMapMaterial = mCreator.create(containingRect, {
 * heatPointsData : [
 * {
 * x : -100.0,
 * y : 24.0,
 * value : 95
 * }
 * ],
 * min : 0,
 * max : 100,
 * }, userHeatmapOptions);
 * ```
 *
 * inspired by https://github.com/danwild/CesiumHeatmap
 */
export class CesiumHeatMapMaterialCreator {
    constructor() {
        this.heatmapOptionsDefaults = {
            minCanvasSize: 700,
            // minimum size (in pixels) for the heatmap canvas
            maxCanvasSize: 2000,
            // maximum size (in pixels) for the heatmap canvas
            radiusFactor: 60,
            // data point size factor used if no radius is given
            // (the greater of height and width divided by this number yields the used radius)
            spacingFactor: 1,
            // extra space around the borders (point radius multiplied by this number yields the spacing)
            maxOpacity: 0.8,
            // the maximum opacity used if not given in the heatmap options object
            minOpacity: 0.1,
            // the minimum opacity used if not given in the heatmap options object
            blur: 0.85,
            // the blur used if not given in the heatmap options object
            gradient: {
                // the gradient used if not given in the heatmap options object
                '.3': 'blue',
                '.65': 'yellow',
                '.8': 'orange',
                '.95': 'red'
            },
        };
        this.WMP = new Cesium.WebMercatorProjection();
        /**
         * Convert a WGS84 location to the corresponding heatmap location
         *
         *  p: a WGS84 location like {x:lon, y:lat}
         */
        this.wgs84PointToHeatmapPoint = function (p) {
            return this.mercatorPointToHeatmapPoint(this.wgs84ToMercator(p));
        };
        this.rad2deg = function (r) {
            /** @type {?} */
            const d = r / (Math.PI / 180.0);
            return d;
        };
    }
    /**
     *
     * @param {?} center - Cartesian3
     * @param {?} radius - Meters
     * @return {?}
     */
    static calcCircleContainingRect(center, radius) {
        return CesiumHeatMapMaterialCreator.calcEllipseContainingRect(center, radius, radius);
    }
    /**
     *
     * @param {?} center - Cartesian3
     * @param {?} semiMajorAxis - meters
     * @param {?} semiMinorAxis - meters
     * @return {?}
     */
    static calcEllipseContainingRect(center, semiMajorAxis, semiMinorAxis) {
        /** @type {?} */
        const top = GeoUtilsService.pointByLocationDistanceAndAzimuth(center, semiMinorAxis, 0, true);
        /** @type {?} */
        const right = GeoUtilsService.pointByLocationDistanceAndAzimuth(center, semiMajorAxis, Math.PI / 2, true);
        /** @type {?} */
        const bottom = GeoUtilsService.pointByLocationDistanceAndAzimuth(center, semiMajorAxis, Math.PI, true);
        /** @type {?} */
        const left = GeoUtilsService.pointByLocationDistanceAndAzimuth(center, semiMajorAxis, Math.PI * 1.5, true);
        /** @type {?} */
        const ellipsePoints = [top, right, bottom, left];
        return Cesium.Rectangle.fromCartesianArray(ellipsePoints);
    }
    /**
     *
     * @param {?} points Cartesian3
     * @return {?}
     */
    static calculateContainingRectFromPoints(points) {
        return Cesium.Rectangle.fromCartesianArray(points);
    }
    /**
     * Set an array of heatmap locations
     *
     *  min:  the minimum allowed value for the data values
     *  max:  the maximum allowed value for the data values
     *  data: an array of data points in heatmap coordinates and values like {x, y, value}
     * @param {?} min
     * @param {?} max
     * @param {?} data
     * @return {?}
     */
    setData(min, max, data) {
        if (data && data.length > 0 && min !== null && min !== false && max !== null && max !== false) {
            this.heatmap.setData({
                min: min,
                max: max,
                data: data
            });
            return true;
        }
        return false;
    }
    /**
     * Set an array of WGS84 locations
     *
     *  min:  the minimum allowed value for the data values
     *  max:  the maximum allowed value for the data values
     *  data: an array of data points in WGS84 coordinates and values like { x:lon, y:lat, value }
     * @private
     * @param {?} min
     * @param {?} max
     * @param {?} data
     * @return {?}
     */
    setWGS84Data(min, max, data) {
        if (data && data.length > 0 && min !== null && min !== false && max !== null && max !== false) {
            /** @type {?} */
            const convdata = [];
            for (let i = 0; i < data.length; i++) {
                /** @type {?} */
                const gp = data[i];
                /** @type {?} */
                const hp = this.wgs84PointToHeatmapPoint(gp);
                if (gp.value || gp.value === 0) {
                    hp.value = gp.value;
                }
                convdata.push(hp);
            }
            return this.setData(min, max, convdata);
        }
        return false;
    }
    /**
     * Convert a mercator location to the corresponding heatmap location
     *
     *  p: a WGS84 location like {x: lon, y:lat}
     * @private
     * @param {?} p
     * @return {?}
     */
    mercatorPointToHeatmapPoint(p) {
        /** @type {?} */
        const pn = {};
        pn.x = Math.round((p.x - this._xoffset) / this._factor + this._spacing);
        pn.y = Math.round((p.y - this._yoffset) / this._factor + this._spacing);
        pn.y = this.height - pn.y;
        return pn;
    }
    /**
     * @private
     * @param {?} height
     * @param {?} width
     * @return {?}
     */
    createContainer(height, width) {
        /** @type {?} */
        const id = 'heatmap' + CesiumHeatMapMaterialCreator.containerCanvasCounter++;
        /** @type {?} */
        const container = document.createElement('div');
        container.setAttribute('id', id);
        container.setAttribute('style', 'width: ' + width + 'px; height: ' + height + 'px; margin: 0px; display: none;');
        document.body.appendChild(container);
        return { container, id };
    }
    /**
     * Convert a WGS84 location into a mercator location
     *
     *  p: the WGS84 location like {x: lon, y: lat}
     * @private
     * @param {?} p
     * @return {?}
     */
    wgs84ToMercator(p) {
        /** @type {?} */
        const mp = this.WMP.project(Cesium.Cartographic.fromDegrees(p.x, p.y));
        return {
            x: mp.x,
            y: mp.y
        };
    }
    /**
     * Convert a WGS84 bounding box into a mercator bounding box*
     *  bb: the WGS84 bounding box like {north, east, south, west}
     * @private
     * @param {?} bb
     * @return {?}
     */
    wgs84ToMercatorBB(bb) {
        // TODO validate rad or deg
        /** @type {?} */
        const sw = this.WMP.project(Cesium.Cartographic.fromRadians(bb.west, bb.south));
        /** @type {?} */
        const ne = this.WMP.project(Cesium.Cartographic.fromRadians(bb.east, bb.north));
        return {
            north: ne.y,
            east: ne.x,
            south: sw.y,
            west: sw.x
        };
    }
    /**
     * Convert a mercator bounding box into a WGS84 bounding box
     *
     *  bb: the mercator bounding box like {north, east, south, west}
     * @private
     * @param {?} bb
     * @return {?}
     */
    mercatorToWgs84BB(bb) {
        /** @type {?} */
        const sw = this.WMP.unproject(new Cesium.Cartesian3(bb.west, bb.south));
        /** @type {?} */
        const ne = this.WMP.unproject(new Cesium.Cartesian3(bb.east, bb.north));
        return {
            north: this.rad2deg(ne.latitude),
            east: this.rad2deg(ne.longitude),
            south: this.rad2deg(sw.latitude),
            west: this.rad2deg(sw.longitude)
        };
    }
    /**
     * @private
     * @param {?} mbb
     * @return {?}
     */
    setWidthAndHeight(mbb) {
        this.width = ((mbb.east > 0 && mbb.west < 0) ? mbb.east + Math.abs(mbb.west) : Math.abs(mbb.east - mbb.west));
        this.height = ((mbb.north > 0 && mbb.south < 0) ? mbb.north + Math.abs(mbb.south) : Math.abs(mbb.north - mbb.south));
        this._factor = 1;
        if (this.width > this.height && this.width > this.heatmapOptionsDefaults.maxCanvasSize) {
            this._factor = this.width / this.heatmapOptionsDefaults.maxCanvasSize;
            if (this.height / this._factor < this.heatmapOptionsDefaults.minCanvasSize) {
                this._factor = this.height / this.heatmapOptionsDefaults.minCanvasSize;
            }
        }
        else if (this.height > this.width && this.height > this.heatmapOptionsDefaults.maxCanvasSize) {
            this._factor = this.height / this.heatmapOptionsDefaults.maxCanvasSize;
            if (this.width / this._factor < this.heatmapOptionsDefaults.minCanvasSize) {
                this._factor = this.width / this.heatmapOptionsDefaults.minCanvasSize;
            }
        }
        else if (this.width < this.height && this.width < this.heatmapOptionsDefaults.minCanvasSize) {
            this._factor = this.width / this.heatmapOptionsDefaults.minCanvasSize;
            if (this.height / this._factor > this.heatmapOptionsDefaults.maxCanvasSize) {
                this._factor = this.height / this.heatmapOptionsDefaults.maxCanvasSize;
            }
        }
        else if (this.height < this.width && this.height < this.heatmapOptionsDefaults.minCanvasSize) {
            this._factor = this.height / this.heatmapOptionsDefaults.minCanvasSize;
            if (this.width / this._factor > this.heatmapOptionsDefaults.maxCanvasSize) {
                this._factor = this.width / this.heatmapOptionsDefaults.maxCanvasSize;
            }
        }
        this.width = this.width / this._factor;
        this.height = this.height / this._factor;
    }
    /**
     * containingBoundingRect: Cesium.Rectangle like {north, east, south, west}
     * min:  the minimum allowed value for the data values
     * max:  the maximum allowed value for the data values
     * datapoint: {x,y,value}
     * heatmapOptions: a heatmap.js options object (see http://www.patrick-wied.at/static/heatmapjs/docs.html#h337-create)
     *
     * @param {?} containingBoundingRect
     * @param {?} heatmapDataSet
     * @param {?} heatmapOptions
     * @return {?}
     */
    create(containingBoundingRect, heatmapDataSet, heatmapOptions) {
        /** @type {?} */
        const userBB = containingBoundingRect;
        const { heatPointsData, min = 0, max = 100 } = heatmapDataSet;
        /** @type {?} */
        const finalHeatmapOptions = Object.assign({}, this.heatmapOptionsDefaults, heatmapOptions);
        this._mbounds = this.wgs84ToMercatorBB(userBB);
        this.setWidthAndHeight(this._mbounds);
        finalHeatmapOptions.radius = Math.round((heatmapOptions.radius) ?
            heatmapOptions.radius : ((this.width > this.height) ?
            this.width / this.heatmapOptionsDefaults.radiusFactor :
            this.height / this.heatmapOptionsDefaults.radiusFactor));
        this._spacing = finalHeatmapOptions.radius * this.heatmapOptionsDefaults.spacingFactor;
        this._xoffset = this._mbounds.west;
        this._yoffset = this._mbounds.south;
        this.width = Math.round(this.width + this._spacing * 2);
        this.height = Math.round(this.height + this._spacing * 2);
        this._mbounds.west -= this._spacing * this._factor;
        this._mbounds.east += this._spacing * this._factor;
        this._mbounds.south -= this._spacing * this._factor;
        this._mbounds.north += this._spacing * this._factor;
        this.bounds = this.mercatorToWgs84BB(this._mbounds);
        this._rectangle = Cesium.Rectangle.fromDegrees(this.bounds.west, this.bounds.south, this.bounds.east, this.bounds.north);
        const { container, id } = this.createContainer(this.height, this.width);
        Object.assign(finalHeatmapOptions, { container });
        this.heatmap = h337.create(finalHeatmapOptions);
        this.setWGS84Data(0, 100, heatPointsData);
        /** @type {?} */
        const heatMapCanvas = this.heatmap._renderer.canvas;
        /** @type {?} */
        const heatMapMaterial = new Cesium.ImageMaterialProperty({
            image: heatMapCanvas,
            transparent: true,
        });
        this.setClear(heatMapMaterial, id);
        return heatMapMaterial;
    }
    /**
     * @private
     * @param {?} heatMapMaterial
     * @param {?} id
     * @return {?}
     */
    setClear(heatMapMaterial, id) {
        heatMapMaterial.clear = () => {
            /** @type {?} */
            const elem = document.getElementById(id);
            return elem.parentNode.removeChild(elem);
        };
    }
}
CesiumHeatMapMaterialCreator.containerCanvasCounter = 0;
CesiumHeatMapMaterialCreator.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CesiumHeatMapMaterialCreator.containerCanvasCounter;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype.heatmapOptionsDefaults;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype.WMP;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype._spacing;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype.width;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype.height;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype._mbounds;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype.bounds;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype._factor;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype._rectangle;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype.heatmap;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype._xoffset;
    /** @type {?} */
    CesiumHeatMapMaterialCreator.prototype._yoffset;
    /**
     * Convert a WGS84 location to the corresponding heatmap location
     *
     *  p: a WGS84 location like {x:lon, y:lat}
     * @type {?}
     * @private
     */
    CesiumHeatMapMaterialCreator.prototype.wgs84PointToHeatmapPoint;
    /**
     * @type {?}
     * @private
     */
    CesiumHeatMapMaterialCreator.prototype.rad2deg;
}
//# sourceMappingURL=data:application/json;base64,