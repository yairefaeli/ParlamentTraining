/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BasicDrawerService } from '../basic-drawer/basic-drawer.service';
import { GraphicsType } from './enums/graphics-type.enum';
import { OptimizedEntityCollection } from './optimized-entity-collection';
/**
 *  General primitives drawer responsible of drawing Cesium primitives.
 *  Drawers the handle Cesium primitives extend it.
 */
export class EntitiesDrawerService extends BasicDrawerService {
    /**
     * @param {?} cesiumService
     * @param {?} graphicsType
     * @param {?=} defaultOptions
     */
    constructor(cesiumService, graphicsType, defaultOptions = {
        collectionMaxSize: -1,
        collectionSuspensionTime: -1,
        collectionsNumber: 1,
    }) {
        super();
        this.cesiumService = cesiumService;
        this.graphicsType = graphicsType;
        this.defaultOptions = defaultOptions;
        this.entityCollections = new Map();
        this.graphicsTypeName = GraphicsType[this.graphicsType];
        // Fix bad enum compilation
        for (const i in GraphicsType) {
            if ((/** @type {?} */ (GraphicsType[i])) === this.graphicsType) {
                this.graphicsTypeName = i;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFreeEntitiesCollection() {
        /** @type {?} */
        let freeEntityCollection = null;
        this.entityCollections.forEach(entityCollection => {
            if (entityCollection.isFree()) {
                freeEntityCollection = entityCollection;
            }
        });
        return freeEntityCollection;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    init(options) {
        /** @type {?} */
        const finalOptions = options || this.defaultOptions;
        /** @type {?} */
        const dataSources = [];
        for (let i = 0; i < finalOptions.collectionsNumber; i++) {
            /** @type {?} */
            const dataSource = new Cesium.CustomDataSource(this.graphicsTypeName);
            dataSources.push(dataSource);
            this.cesiumService.getViewer().dataSources.add(dataSource);
            this.entityCollections.set(dataSource.entities, new OptimizedEntityCollection(dataSource.entities, finalOptions.collectionMaxSize, finalOptions.collectionSuspensionTime));
        }
        return dataSources;
    }
    /**
     * @param {?} cesiumProps
     * @return {?}
     */
    add(cesiumProps) {
        /** @type {?} */
        const optimizedEntityCollection = this.getFreeEntitiesCollection();
        if (optimizedEntityCollection === null) {
            throw new Error('No more free entity collections');
        }
        /** @type {?} */
        const graphicsClass = (/** @type {?} */ (this.graphicsType));
        /** @type {?} */
        const entityObject = {
            position: cesiumProps.position !== undefined ? cesiumProps.position : undefined,
            description: cesiumProps.description !== undefined ? cesiumProps.description : undefined,
            orientation: cesiumProps.orientation !== undefined ? cesiumProps.orientation : undefined,
            viewFrom: cesiumProps.viewFrom !== undefined ? cesiumProps.viewFrom : undefined,
            [this.graphicsTypeName]: cesiumProps,
        };
        if (cesiumProps.name !== undefined) {
            entityObject.name = cesiumProps.name;
        }
        return optimizedEntityCollection.add(entityObject);
    }
    /**
     * @param {?} entity
     * @param {?} cesiumProps
     * @return {?}
     */
    update(entity, cesiumProps) {
        this.suspendEntityCollection(entity);
        if (entity.position instanceof Cesium.CallbackProperty) {
            if (entity.position._isConstant) {
                entity.position = cesiumProps.position;
            }
        }
        entity.position = cesiumProps.position !== undefined ? cesiumProps.position : undefined;
        entity.name = cesiumProps.name !== undefined ? cesiumProps.name : entity.name;
        entity.description = cesiumProps.description !== undefined ? cesiumProps.description : entity.description;
        entity.orientation = cesiumProps.orientation !== undefined ? cesiumProps.orientation : entity.orientation;
        entity.viewFrom = cesiumProps.viewFrom !== undefined ? cesiumProps.viewFrom : entity.viewFrom;
        if (this._propsAssigner) {
            this._propsAssigner(entity[this.graphicsTypeName], cesiumProps);
        }
        else {
            Object.assign(entity[this.graphicsTypeName], cesiumProps);
        }
    }
    /**
     * @param {?} entity
     * @return {?}
     */
    remove(entity) {
        /** @type {?} */
        const optimizedEntityCollection = this.entityCollections.get(entity.entityCollection);
        optimizedEntityCollection.remove(entity);
    }
    /**
     * @return {?}
     */
    removeAll() {
        this.entityCollections.forEach(entityCollection => {
            entityCollection.removeAll();
        });
    }
    /**
     * @param {?} showValue
     * @return {?}
     */
    setShow(showValue) {
        this.entityCollections.forEach(entityCollection => {
            entityCollection.setShow(showValue);
        });
    }
    /**
     * @private
     * @param {?} entity
     * @return {?}
     */
    suspendEntityCollection(entity) {
        /** @type {?} */
        const id = entity.entityCollection;
        if (!this.entityCollections.has(id)) {
            throw new Error('No EntityCollection for entity.entityCollection');
        }
        /** @type {?} */
        const entityCollection = this.entityCollections.get(id);
        entityCollection.suspend();
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.entityCollections;
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.graphicsTypeName;
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.cesiumService;
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.graphicsType;
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,