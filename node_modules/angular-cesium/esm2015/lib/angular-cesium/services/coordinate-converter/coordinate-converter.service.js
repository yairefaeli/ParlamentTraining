/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { CesiumService } from '../cesium/cesium.service';
import * as geodesy from 'geodesy';
import { LatLonEllipsoidal, Utm } from 'geodesy';
/** @type {?} */
const LatLonVectors = geodesy['LatLonVectors'];
// doesnt exists on typings
window['geodesy'] = geodesy;
/**
 *  Given different types of coordinates, we provide you a service converting those types to the most common other types.
 *  We are using the geodesy implementation of UTM conversion. see: https://github.com/chrisveness/geodesy.
 *
 * \@example
 * import { Component, OnInit } from '\@angular/core';
 * import { CoordinateConverter } from 'angular2-cesium';
 *
 * \@Component({
 * 		selector:'my-component',
 * 		template:'<div>{{showCartographic}}</div>',
 * 		providers:[CoordinateConverter]
 * })
 * export class MyComponent implements OnInit {
 * 		showCartographic;
 *
 * 		constructor(private coordinateConverter:CoordinateConverter){
 * 		}
 *
 * 		ngOnInit(){
 * 			this.showCartographic = this.coordinateConverter.degreesToCartographic(5, 5, 5);
 *  }
 * }
 *
 */
export class CoordinateConverter {
    /**
     * @param {?=} cesiumService
     */
    constructor(cesiumService) {
        this.cesiumService = cesiumService;
    }
    /**
     * @param {?} screenPos
     * @param {?=} addMapCanvasBoundsToPos
     * @return {?}
     */
    screenToCartesian3(screenPos, addMapCanvasBoundsToPos) {
        if (!this.cesiumService) {
            throw new Error('ANGULAR2-CESIUM - Cesium service should be provided in order' +
                ' to do screen position calculations');
        }
        else {
            /** @type {?} */
            const screenPosition = Object.assign({}, screenPos);
            if (addMapCanvasBoundsToPos) {
                /** @type {?} */
                const mapBounds = this.cesiumService.getViewer().canvas.getBoundingClientRect();
                screenPosition.x += mapBounds.left;
                screenPosition.y += mapBounds.top;
            }
            /** @type {?} */
            const camera = this.cesiumService.getViewer().camera;
            return camera.pickEllipsoid(screenPosition);
        }
    }
    /**
     * @param {?} screenPos
     * @param {?=} ellipsoid
     * @return {?}
     */
    screenToCartographic(screenPos, ellipsoid) {
        return this.cartesian3ToCartographic(this.screenToCartesian3(screenPos), ellipsoid);
    }
    /**
     * @param {?} cartesian
     * @param {?=} ellipsoid
     * @return {?}
     */
    cartesian3ToCartographic(cartesian, ellipsoid) {
        return Cesium.Cartographic.fromCartesian(cartesian, ellipsoid);
    }
    /**
     * @param {?} longitude
     * @param {?} latitude
     * @param {?=} height
     * @return {?}
     */
    degreesToCartographic(longitude, latitude, height) {
        return Cesium.Cartographic.fromDegrees(longitude, latitude, height);
    }
    /**
     * @param {?} longitude
     * @param {?} latitude
     * @param {?=} height
     * @return {?}
     */
    radiansToCartographic(longitude, latitude, height) {
        return Cesium.Cartographic.fromRadians(longitude, latitude, height);
    }
    /**
     * @param {?} longitude
     * @param {?} latitude
     * @return {?}
     */
    degreesToUTM(longitude, latitude) {
        return new LatLonEllipsoidal(latitude, longitude).toUtm();
    }
    /**
     * @param {?} zone
     * @param {?} hemisphereType
     * @param {?} easting
     * @param {?} northing
     * @return {?}
     */
    UTMToDegrees(zone, hemisphereType, easting, northing) {
        return this.geodesyToCesiumObject(new Utm(zone, hemisphereType, easting, northing).toLatLonE());
    }
    /**
     * @private
     * @param {?} geodesyRadians
     * @return {?}
     */
    geodesyToCesiumObject(geodesyRadians) {
        return {
            longitude: geodesyRadians.lon,
            latitude: geodesyRadians.lat,
            height: geodesyRadians['height'] ? geodesyRadians['height'] : 0
        };
    }
    /**
     * middle point between two points
     * @param {?} first  (latitude,longitude) in radians
     * @param {?} second (latitude,longitude) in radians
     * @return {?}
     */
    midPointToCartesian3(first, second) {
        /** @type {?} */
        const toDeg = (rad) => Cesium.Math.toDegrees(rad);
        /** @type {?} */
        const firstPoint = new LatLonVectors(toDeg(first.latitude), toDeg(first.longitude));
        /** @type {?} */
        const secondPoint = new LatLonVectors(toDeg(second.latitude), toDeg(second.longitude));
        /** @type {?} */
        const middlePoint = firstPoint.midpointTo(secondPoint);
        return Cesium.Cartesian3.fromDegrees(middlePoint.lon, middlePoint.lat);
    }
    /**
     * @param {?} position0
     * @param {?} position1
     * @return {?}
     */
    middlePointByScreen(position0, position1) {
        /** @type {?} */
        const scene = this.cesiumService.getScene();
        /** @type {?} */
        const screenPosition1 = Cesium.SceneTransforms.wgs84ToWindowCoordinates(scene, position0);
        /** @type {?} */
        const screenPosition2 = Cesium.SceneTransforms.wgs84ToWindowCoordinates(scene, position1);
        /** @type {?} */
        const middleScreenPoint = new Cesium.Cartesian2((screenPosition2.x + screenPosition1.x) / 2.0, (screenPosition2.y + screenPosition1.y) / 2.0);
        return scene.pickPosition(middleScreenPoint);
    }
    /**
     * initial bearing between two points
     *
     * * \@return bearing in degrees
     * @param {?} first - {latitude,longitude} in radians
     * @param {?} second - {latitude,longitude} in radians
     * @return {?}
     */
    bearingTo(first, second) {
        /** @type {?} */
        const toDeg = (rad) => Cesium.Math.toDegrees(rad);
        /** @type {?} */
        const firstPoint = new LatLonVectors(toDeg(first.latitude), toDeg(first.longitude));
        /** @type {?} */
        const secondPoint = new LatLonVectors(toDeg(second.latitude), toDeg(second.longitude));
        /** @type {?} */
        const bearing = firstPoint.bearingTo(secondPoint);
        return bearing;
    }
    /**
     * initial bearing between two points
     *
     * @param {?} firstCartesian3
     * @param {?} secondCartesian3
     * @return {?} bearing in degrees
     */
    bearingToCartesian(firstCartesian3, secondCartesian3) {
        /** @type {?} */
        const firstCart = Cesium.Cartographic.fromCartesian(firstCartesian3);
        /** @type {?} */
        const secondCart = Cesium.Cartographic.fromCartesian(secondCartesian3);
        return this.bearingTo(firstCart, secondCart);
    }
}
CoordinateConverter.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CoordinateConverter.ctorParameters = () => [
    { type: CesiumService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CoordinateConverter.prototype.cesiumService;
}
//# sourceMappingURL=data:application/json;base64,