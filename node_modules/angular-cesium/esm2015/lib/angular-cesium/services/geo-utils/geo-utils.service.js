/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { CesiumService } from '../cesium/cesium.service';
export class GeoUtilsService {
    /**
     * @param {?} cesiumService
     */
    constructor(cesiumService) {
        this.cesiumService = cesiumService;
    }
    /**
     * @param {?} currentLocation
     * @param {?} meterDistance
     * @param {?} radianAzimuth
     * @param {?=} deprecated
     * @return {?}
     */
    static pointByLocationDistanceAndAzimuth(currentLocation, meterDistance, radianAzimuth, deprecated) {
        /** @type {?} */
        const distance = meterDistance / Cesium.Ellipsoid.WGS84.maximumRadius;
        /** @type {?} */
        const cartographicLocation = currentLocation instanceof Cesium.Cartesian3 ? Cesium.Cartographic.fromCartesian(currentLocation) : currentLocation;
        /** @type {?} */
        const cartesianLocation = currentLocation instanceof Cesium.Cartesian3
            ? currentLocation
            : Cesium.Cartesian3.fromRadians(currentLocation.longitude, currentLocation.latitude, currentLocation.height);
        /** @type {?} */
        let resultPosition;
        /** @type {?} */
        let resultDistance;
        /** @type {?} */
        let counter = 0;
        /** @type {?} */
        let distanceFactorRangeMax = 0.1;
        /** @type {?} */
        let distanceFactorRangeMin = -0.1;
        while (counter === 0 ||
            (counter < 16 && Math.max(resultDistance, meterDistance) / Math.min(resultDistance, meterDistance) > 1.000001)) {
            /** @type {?} */
            const factor = distanceFactorRangeMin + (distanceFactorRangeMax - distanceFactorRangeMin) / 2;
            resultPosition = GeoUtilsService._pointByLocationDistanceAndAzimuth(cartographicLocation, distance * (1 + factor), radianAzimuth);
            resultDistance = this.distance(cartesianLocation, resultPosition);
            if (resultDistance > meterDistance) {
                distanceFactorRangeMax = distanceFactorRangeMin + (distanceFactorRangeMax - distanceFactorRangeMin) / 2;
            }
            else {
                distanceFactorRangeMin = distanceFactorRangeMin + (distanceFactorRangeMax - distanceFactorRangeMin) / 2;
            }
            counter++;
        }
        return resultPosition;
    }
    /**
     * @param {?} cartographicLocation
     * @param {?} distance
     * @param {?} radianAzimuth
     * @return {?}
     */
    static _pointByLocationDistanceAndAzimuth(cartographicLocation, distance, radianAzimuth) {
        /** @type {?} */
        const curLat = cartographicLocation.latitude;
        /** @type {?} */
        const curLon = cartographicLocation.longitude;
        /** @type {?} */
        const destinationLat = Math.asin(Math.sin(curLat) * Math.cos(distance) + Math.cos(curLat) * Math.sin(distance) * Math.cos(radianAzimuth));
        /** @type {?} */
        let destinationLon = curLon +
            Math.atan2(Math.sin(radianAzimuth) * Math.sin(distance) * Math.cos(curLat), Math.cos(distance) - Math.sin(curLat) * Math.sin(destinationLat));
        destinationLon = ((destinationLon + 3 * Math.PI) % (2 * Math.PI)) - Math.PI;
        return Cesium.Cartesian3.fromRadians(destinationLon, destinationLat);
    }
    /**
     * @param {?} pos0
     * @param {?} pos1
     * @return {?}
     */
    static distance(pos0, pos1) {
        return Cesium.Cartesian3.distance(pos0, pos1);
    }
    /**
     * @param {?} position0
     * @param {?} position1
     * @return {?}
     */
    static getPositionsDelta(position0, position1) {
        return {
            x: position1.x - position0.x,
            y: position1.y - position0.y,
            z: position1.z - position0.z,
        };
    }
    /**
     * @param {?} position
     * @param {?} delta
     * @param {?=} updateReference
     * @return {?}
     */
    static addDeltaToPosition(position, delta, updateReference = false) {
        if (updateReference) {
            position.x += delta.x;
            position.y += delta.y;
            position.z += delta.z;
            /** @type {?} */
            const cartographic = Cesium.Cartographic.fromCartesian(position);
            cartographic.height = 0;
            /** @type {?} */
            const cartesian = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height);
            position.x = cartesian.x;
            position.y = cartesian.y;
            position.z = cartesian.z;
            return position;
        }
        else {
            /** @type {?} */
            const cartesian = new Cesium.Cartesian3(position.x + delta.x, position.y + delta.y, position.z + delta.z);
            /** @type {?} */
            const cartographic = Cesium.Cartographic.fromCartesian(cartesian);
            cartographic.height = 0;
            return Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height);
        }
    }
    /**
     * @param {?} position0
     * @param {?} position1
     * @return {?}
     */
    static middleCartesian3Point(position0, position1) {
        return new Cesium.Cartesian3(position1.x - position0.x / 2, position1.y - position0.y / 2, position1.z - position0.z / 2);
    }
    /**
     * @param {?} screenPos
     * @return {?}
     */
    screenPositionToCartesian3(screenPos) {
        /** @type {?} */
        const camera = this.cesiumService.getViewer().camera;
        return camera.pickEllipsoid(screenPos);
    }
}
GeoUtilsService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GeoUtilsService.ctorParameters = () => [
    { type: CesiumService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    GeoUtilsService.prototype.cesiumService;
}
//# sourceMappingURL=data:application/json;base64,