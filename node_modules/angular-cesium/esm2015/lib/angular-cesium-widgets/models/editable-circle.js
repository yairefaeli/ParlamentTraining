/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AcEntity } from '../../angular-cesium/models/ac-entity';
import { EditPoint } from './edit-point';
import { GeoUtilsService } from '../../angular-cesium/services/geo-utils/geo-utils.service';
import { EditArc } from './edit-arc';
import { defaultLabelProps } from './label-props';
export class EditableCircle extends AcEntity {
    /**
     * @param {?} id
     * @param {?} circlesLayer
     * @param {?} pointsLayer
     * @param {?} arcsLayer
     * @param {?} options
     */
    constructor(id, circlesLayer, pointsLayer, arcsLayer, options) {
        super();
        this.id = id;
        this.circlesLayer = circlesLayer;
        this.pointsLayer = pointsLayer;
        this.arcsLayer = arcsLayer;
        this.options = options;
        this.doneCreation = false;
        this._enableEdit = true;
        this._labels = [];
        this._circleProps = options.circleProps;
        this._pointProps = options.pointProps;
        this._polylineProps = options.polylineProps;
    }
    /**
     * @return {?}
     */
    get labels() {
        return this._labels;
    }
    /**
     * @param {?} labels
     * @return {?}
     */
    set labels(labels) {
        if (!labels || !this._center || !this._radiusPoint) {
            return;
        }
        this._labels = labels.map((label, index) => {
            if (!label.position) {
                if (index !== labels.length - 1) {
                    label.position = this._center.getPosition();
                }
                else {
                    label.position = this._radiusPoint.getPosition();
                }
            }
            return Object.assign({}, defaultLabelProps, label);
        });
    }
    /**
     * @return {?}
     */
    get polylineProps() {
        return this._polylineProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set polylineProps(value) {
        this._polylineProps = value;
    }
    /**
     * @return {?}
     */
    get pointProps() {
        return this._pointProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set pointProps(value) {
        this._pointProps = value;
    }
    /**
     * @return {?}
     */
    get circleProps() {
        return this._circleProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set circleProps(value) {
        this._circleProps = value;
    }
    /**
     * @return {?}
     */
    get center() {
        return this._center;
    }
    /**
     * @return {?}
     */
    get radiusPoint() {
        return this._radiusPoint;
    }
    /**
     * @return {?}
     */
    get enableEdit() {
        return this._enableEdit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableEdit(value) {
        this._enableEdit = value;
        this._center.show = value;
        this._radiusPoint.show = value;
        this.updatePointsLayer();
    }
    /**
     * @param {?} center
     * @param {?} radiusPoint
     * @param {?=} centerPointProp
     * @param {?=} radiusPointProp
     * @param {?=} circleProp
     * @return {?}
     */
    setManually(center, radiusPoint, centerPointProp = this.pointProps, radiusPointProp = this.pointProps, circleProp = this.circleProps) {
        if (!this._center) {
            this._center = new EditPoint(this.id, center, centerPointProp);
        }
        else {
            this._center.setPosition(center);
        }
        if (!this._radiusPoint) {
            this._radiusPoint = new EditPoint(this.id, radiusPoint, radiusPointProp);
        }
        else {
            this._radiusPoint.setPosition(radiusPoint);
        }
        if (!this._outlineArc) {
            this.createOutlineArc();
        }
        else {
            this._outlineArc.radius = this.getRadius();
        }
        this.circleProps = circleProp;
        this.doneCreation = true;
        this.updateArcsLayer();
        this.updatePointsLayer();
        this.updateCirclesLayer();
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addPoint(position) {
        if (this.doneCreation) {
            return;
        }
        if (!this._center) {
            this._center = new EditPoint(this.id, position, this.pointProps);
            this._radiusPoint = new EditPoint(this.id, position.clone(), this.pointProps);
            if (!this._outlineArc) {
                this.createOutlineArc();
            }
        }
        this.updateArcsLayer();
        this.updatePointsLayer();
        this.updateCirclesLayer();
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addLastPoint(position) {
        if (this.doneCreation || !this._center || !this._radiusPoint) {
            return;
        }
        this._radiusPoint.setPosition(position);
        this.doneCreation = true;
        this.updatePointsLayer();
        this.updateCirclesLayer();
    }
    /**
     * @param {?} toPosition
     * @return {?}
     */
    movePoint(toPosition) {
        if (!this._center || !this._radiusPoint) {
            return;
        }
        this._radiusPoint.setPosition(toPosition);
        this._outlineArc.radius = this.getRadius();
        this.updateArcsLayer();
        this.updatePointsLayer();
        this.updateCirclesLayer();
    }
    /**
     * @param {?} dragStartPosition
     * @param {?} dragEndPosition
     * @return {?}
     */
    moveCircle(dragStartPosition, dragEndPosition) {
        if (!this.doneCreation) {
            return;
        }
        if (!this.lastDraggedToPosition) {
            this.lastDraggedToPosition = dragStartPosition;
        }
        /** @type {?} */
        const radius = this.getRadius();
        /** @type {?} */
        const delta = GeoUtilsService.getPositionsDelta(this.lastDraggedToPosition, dragEndPosition);
        GeoUtilsService.addDeltaToPosition(this.getCenter(), delta, true);
        this.radiusPoint.setPosition(GeoUtilsService.pointByLocationDistanceAndAzimuth(this.getCenter(), radius, Math.PI / 2, true));
        this._outlineArc.radius = this.getRadius();
        this.updateArcsLayer();
        this.updatePointsLayer();
        this.updateCirclesLayer();
        this.lastDraggedToPosition = dragEndPosition;
    }
    /**
     * @return {?}
     */
    endMovePolygon() {
        this.lastDraggedToPosition = undefined;
    }
    /**
     * @return {?}
     */
    getRadius() {
        if (!this._center || !this._radiusPoint) {
            return 0;
        }
        return GeoUtilsService.distance(this._center.getPosition(), this._radiusPoint.getPosition());
    }
    /**
     * @return {?}
     */
    getRadiusCallbackProperty() {
        return new Cesium.CallbackProperty(this.getRadius.bind(this), false);
    }
    /**
     * @return {?}
     */
    getCenter() {
        return this._center ? this._center.getPosition() : undefined;
    }
    /**
     * @return {?}
     */
    getCenterCallbackProperty() {
        return new Cesium.CallbackProperty(this.getCenter.bind(this), false);
    }
    /**
     * @return {?}
     */
    getRadiusPoint() {
        return this._radiusPoint ? this._radiusPoint.getPosition() : undefined;
    }
    /**
     * @return {?}
     */
    dispose() {
        if (this._center) {
            this.pointsLayer.remove(this._center.getId());
        }
        if (this._radiusPoint) {
            this.pointsLayer.remove(this._radiusPoint.getId());
        }
        if (this._outlineArc) {
            this.arcsLayer.remove(this._outlineArc.getId());
        }
        this.circlesLayer.remove(this.id);
    }
    /**
     * @return {?}
     */
    getId() {
        return this.id;
    }
    /**
     * @private
     * @return {?}
     */
    updateCirclesLayer() {
        this.circlesLayer.update(this, this.id);
    }
    /**
     * @private
     * @return {?}
     */
    updatePointsLayer() {
        if (this._center) {
            this.pointsLayer.update(this._center, this._center.getId());
        }
        if (this._radiusPoint) {
            this.pointsLayer.update(this._radiusPoint, this._radiusPoint.getId());
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateArcsLayer() {
        if (!this._outlineArc) {
            return;
        }
        this.arcsLayer.update(this._outlineArc, this._outlineArc.getId());
    }
    /**
     * @private
     * @return {?}
     */
    createOutlineArc() {
        if (!this._center || !this._radiusPoint) {
            return;
        }
        this._outlineArc = new EditArc(this.id, this.getCenter(), this.getRadius(), Math.PI * 2, 0, this.polylineProps);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype._center;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype._radiusPoint;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype._outlineArc;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype.doneCreation;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype._enableEdit;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype.lastDraggedToPosition;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype._circleProps;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype._pointProps;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype._polylineProps;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype._labels;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype.id;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype.circlesLayer;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype.pointsLayer;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype.arcsLayer;
    /**
     * @type {?}
     * @private
     */
    EditableCircle.prototype.options;
}
//# sourceMappingURL=data:application/json;base64,