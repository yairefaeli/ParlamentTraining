/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AcEntity } from '../../angular-cesium/models/ac-entity';
import { EditPoint } from './edit-point';
import { EditPolyline } from './edit-polyline';
import { GeoUtilsService } from '../../angular-cesium/services/geo-utils/geo-utils.service';
import { defaultLabelProps } from './label-props';
export class EditablePolygon extends AcEntity {
    /**
     * @param {?} id
     * @param {?} polygonsLayer
     * @param {?} pointsLayer
     * @param {?} polylinesLayer
     * @param {?} coordinateConverter
     * @param {?} polygonOptions
     * @param {?=} positions
     */
    constructor(id, polygonsLayer, pointsLayer, polylinesLayer, coordinateConverter, polygonOptions, positions) {
        super();
        this.id = id;
        this.polygonsLayer = polygonsLayer;
        this.pointsLayer = pointsLayer;
        this.polylinesLayer = polylinesLayer;
        this.coordinateConverter = coordinateConverter;
        this.positions = [];
        this.polylines = [];
        this.doneCreation = false;
        this._enableEdit = true;
        this._labels = [];
        this.polygonProps = polygonOptions.polygonProps;
        this.defaultPointProps = polygonOptions.pointProps;
        this.defaultPolylineProps = polygonOptions.polylineProps;
        if (positions && positions.length >= 3) {
            this.createFromExisting(positions);
        }
    }
    /**
     * @return {?}
     */
    get labels() {
        return this._labels;
    }
    /**
     * @param {?} labels
     * @return {?}
     */
    set labels(labels) {
        if (!labels) {
            return;
        }
        /** @type {?} */
        const positions = this.getRealPositions();
        this._labels = labels.map((label, index) => {
            if (!label.position) {
                label.position = positions[index];
            }
            return Object.assign({}, defaultLabelProps, label);
        });
    }
    /**
     * @return {?}
     */
    get defaultPolylineProps() {
        return this._defaultPolylineProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultPolylineProps(value) {
        this._defaultPolylineProps = value;
    }
    /**
     * @return {?}
     */
    get defaultPointProps() {
        return this._defaultPointProps;
    }
    /**
     * @return {?}
     */
    get polygonProps() {
        return this._polygonProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set polygonProps(value) {
        this._polygonProps = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultPointProps(value) {
        this._defaultPointProps = value;
    }
    /**
     * @return {?}
     */
    get enableEdit() {
        return this._enableEdit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableEdit(value) {
        this._enableEdit = value;
        this.positions.forEach(point => {
            point.show = value;
            this.updatePointsLayer(false, point);
        });
    }
    /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    createFromExisting(positions) {
        positions.forEach((position) => {
            this.addPointFromExisting(position);
        });
        this.addAllVirtualEditPoints();
        this.updatePolygonsLayer();
        this.doneCreation = true;
    }
    /**
     * @param {?} points
     * @param {?=} polygonProps
     * @return {?}
     */
    setPointsManually(points, polygonProps) {
        if (!this.doneCreation) {
            throw new Error('Update manually only in edit mode, after polygon is created');
        }
        this.positions.forEach(p => this.pointsLayer.remove(p.getId()));
        /** @type {?} */
        const newPoints = [];
        for (let i = 0; i < points.length; i++) {
            /** @type {?} */
            const pointOrCartesian = points[i];
            /** @type {?} */
            let newPoint = null;
            if (pointOrCartesian.pointProps) {
                newPoint = new EditPoint(this.id, pointOrCartesian.position, pointOrCartesian.pointProps);
            }
            else {
                newPoint = new EditPoint(this.id, pointOrCartesian, this.defaultPointProps);
            }
            newPoints.push(newPoint);
        }
        this.positions = newPoints;
        this.polygonProps = polygonProps ? polygonProps : this.polygonProps;
        this.updatePointsLayer(true, ...this.positions);
        this.addAllVirtualEditPoints();
        this.updatePolygonsLayer();
    }
    /**
     * @private
     * @return {?}
     */
    addAllVirtualEditPoints() {
        /** @type {?} */
        const currentPoints = [...this.positions];
        currentPoints.forEach((pos, index) => {
            /** @type {?} */
            const currentPoint = pos;
            /** @type {?} */
            const nextIndex = (index + 1) % (currentPoints.length);
            /** @type {?} */
            const nextPoint = currentPoints[nextIndex];
            /** @type {?} */
            const midPoint = this.setMiddleVirtualPoint(currentPoint, nextPoint);
            this.updatePointsLayer(false, midPoint);
        });
    }
    /**
     * @private
     * @param {?} firstP
     * @param {?} secondP
     * @return {?}
     */
    setMiddleVirtualPoint(firstP, secondP) {
        /** @type {?} */
        const currentCart = Cesium.Cartographic.fromCartesian(firstP.getPosition());
        /** @type {?} */
        const nextCart = Cesium.Cartographic.fromCartesian(secondP.getPosition());
        /** @type {?} */
        const midPointCartesian3 = this.coordinateConverter.midPointToCartesian3(currentCart, nextCart);
        /** @type {?} */
        const midPoint = new EditPoint(this.id, midPointCartesian3, this.defaultPointProps);
        midPoint.setVirtualEditPoint(true);
        /** @type {?} */
        const firstIndex = this.positions.indexOf(firstP);
        this.positions.splice(firstIndex + 1, 0, midPoint);
        return midPoint;
    }
    /**
     * @private
     * @param {?} virtualEditPoint
     * @param {?} prevPoint
     * @param {?} nextPoint
     * @return {?}
     */
    updateMiddleVirtualPoint(virtualEditPoint, prevPoint, nextPoint) {
        /** @type {?} */
        const prevPointCart = Cesium.Cartographic.fromCartesian(prevPoint.getPosition());
        /** @type {?} */
        const nextPointCart = Cesium.Cartographic.fromCartesian(nextPoint.getPosition());
        virtualEditPoint.setPosition(this.coordinateConverter.midPointToCartesian3(prevPointCart, nextPointCart));
    }
    /**
     * @param {?} point
     * @return {?}
     */
    changeVirtualPointToRealPoint(point) {
        point.setVirtualEditPoint(false); // virtual point becomes a real point
        // virtual point becomes a real point
        /** @type {?} */
        const pointsCount = this.positions.length;
        /** @type {?} */
        const pointIndex = this.positions.indexOf(point);
        /** @type {?} */
        const nextIndex = (pointIndex + 1) % (pointsCount);
        /** @type {?} */
        const preIndex = ((pointIndex - 1) + pointsCount) % pointsCount;
        /** @type {?} */
        const nextPoint = this.positions[nextIndex];
        /** @type {?} */
        const prePoint = this.positions[preIndex];
        /** @type {?} */
        const firstMidPoint = this.setMiddleVirtualPoint(prePoint, point);
        /** @type {?} */
        const secMidPoint = this.setMiddleVirtualPoint(point, nextPoint);
        this.updatePointsLayer(true, firstMidPoint, secMidPoint, point);
        this.updatePolygonsLayer();
    }
    /**
     * @private
     * @return {?}
     */
    renderPolylines() {
        this.polylines.forEach(polyline => this.polylinesLayer.remove(polyline.getId()));
        this.polylines = [];
        /** @type {?} */
        const realPoints = this.positions.filter(pos => !pos.isVirtualEditPoint());
        realPoints.forEach((point, index) => {
            /** @type {?} */
            const nextIndex = (index + 1) % (realPoints.length);
            /** @type {?} */
            const nextPoint = realPoints[nextIndex];
            /** @type {?} */
            const polyline = new EditPolyline(this.id, point.getPosition(), nextPoint.getPosition(), this.defaultPolylineProps);
            this.polylines.push(polyline);
            this.polylinesLayer.update(polyline, polyline.getId());
        });
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addPointFromExisting(position) {
        /** @type {?} */
        const newPoint = new EditPoint(this.id, position, this.defaultPointProps);
        this.positions.push(newPoint);
        this.updatePointsLayer(true, newPoint);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addPoint(position) {
        if (this.doneCreation) {
            return;
        }
        /** @type {?} */
        const isFirstPoint = !this.positions.length;
        if (isFirstPoint) {
            /** @type {?} */
            const firstPoint = new EditPoint(this.id, position, this.defaultPointProps);
            this.positions.push(firstPoint);
            this.updatePointsLayer(true, firstPoint);
        }
        this.movingPoint = new EditPoint(this.id, position.clone(), this.defaultPointProps);
        this.positions.push(this.movingPoint);
        this.updatePointsLayer(true, this.movingPoint);
        this.updatePolygonsLayer();
    }
    /**
     * @param {?} toPosition
     * @param {?} editPoint
     * @return {?}
     */
    movePoint(toPosition, editPoint) {
        editPoint.setPosition(toPosition);
        this.updatePolygonsLayer();
        if (this.doneCreation) {
            if (editPoint.isVirtualEditPoint()) {
                this.changeVirtualPointToRealPoint(editPoint);
            }
            /** @type {?} */
            const pointsCount = this.positions.length;
            /** @type {?} */
            const pointIndex = this.positions.indexOf(editPoint);
            /** @type {?} */
            const nextVirtualPoint = this.positions[(pointIndex + 1) % (pointsCount)];
            /** @type {?} */
            const nextRealPoint = this.positions[(pointIndex + 2) % (pointsCount)];
            /** @type {?} */
            const prevVirtualPoint = this.positions[((pointIndex - 1) + pointsCount) % pointsCount];
            /** @type {?} */
            const prevRealPoint = this.positions[((pointIndex - 2) + pointsCount) % pointsCount];
            this.updateMiddleVirtualPoint(nextVirtualPoint, editPoint, nextRealPoint);
            this.updateMiddleVirtualPoint(prevVirtualPoint, editPoint, prevRealPoint);
            this.updatePointsLayer(false, nextVirtualPoint);
            this.updatePointsLayer(false, prevVirtualPoint);
        }
        this.updatePointsLayer(true, editPoint);
    }
    /**
     * @param {?} toPosition
     * @return {?}
     */
    moveTempMovingPoint(toPosition) {
        if (this.movingPoint) {
            this.movePoint(toPosition, this.movingPoint);
        }
    }
    /**
     * @param {?} startMovingPosition
     * @param {?} draggedToPosition
     * @return {?}
     */
    movePolygon(startMovingPosition, draggedToPosition) {
        if (!this.doneCreation) {
            return;
        }
        if (!this.lastDraggedToPosition) {
            this.lastDraggedToPosition = startMovingPosition;
        }
        /** @type {?} */
        const delta = GeoUtilsService.getPositionsDelta(this.lastDraggedToPosition, draggedToPosition);
        this.positions.forEach(point => {
            GeoUtilsService.addDeltaToPosition(point.getPosition(), delta, true);
        });
        this.updatePointsLayer();
        this.lastDraggedToPosition = draggedToPosition;
        this.positions.forEach(point => this.updatePointsLayer(true, point));
    }
    /**
     * @return {?}
     */
    endMovePolygon() {
        this.lastDraggedToPosition = undefined;
    }
    /**
     * @param {?} pointToRemove
     * @return {?}
     */
    removePoint(pointToRemove) {
        this.removePosition(pointToRemove);
        this.positions
            .filter(p => p.isVirtualEditPoint())
            .forEach(p => this.removePosition(p));
        this.addAllVirtualEditPoints();
        this.renderPolylines();
        if (this.getPointsCount() >= 3) {
            this.polygonsLayer.update(this, this.id);
        }
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addLastPoint(position) {
        this.doneCreation = true;
        this.removePosition(this.movingPoint); // remove movingPoint
        this.movingPoint = null;
        this.updatePolygonsLayer();
        this.addAllVirtualEditPoints();
    }
    /**
     * @return {?}
     */
    getRealPositions() {
        return this.getRealPoints().map(position => position.getPosition());
    }
    /**
     * @return {?}
     */
    getRealPoints() {
        return this.positions.filter(position => !position.isVirtualEditPoint() && position !== this.movingPoint);
    }
    /**
     * @return {?}
     */
    getPositionsHierarchy() {
        return this.positions.filter(position => !position.isVirtualEditPoint()).map(position => position.getPosition());
    }
    /**
     * @return {?}
     */
    getPositionsHierarchyCallbackProperty() {
        return new Cesium.CallbackProperty(this.getPositionsHierarchy.bind(this), false);
    }
    /**
     * @private
     * @param {?} point
     * @return {?}
     */
    removePosition(point) {
        /** @type {?} */
        const index = this.positions.findIndex((p) => p === point);
        if (index < 0) {
            return;
        }
        this.positions.splice(index, 1);
        this.pointsLayer.remove(point.getId());
    }
    /**
     * @private
     * @return {?}
     */
    updatePolygonsLayer() {
        if (this.getPointsCount() >= 3) {
            this.polygonsLayer.update(this, this.id);
        }
    }
    /**
     * @private
     * @param {?=} renderPolylines
     * @param {...?} points
     * @return {?}
     */
    updatePointsLayer(renderPolylines = true, ...points) {
        if (renderPolylines) {
            this.renderPolylines();
        }
        points.forEach(p => this.pointsLayer.update(p, p.getId()));
    }
    /**
     * @return {?}
     */
    dispose() {
        this.polygonsLayer.remove(this.id);
        this.positions.forEach(editPoint => {
            this.pointsLayer.remove(editPoint.getId());
        });
        this.polylines.forEach(line => this.polylinesLayer.remove(line.getId()));
        if (this.movingPoint) {
            this.pointsLayer.remove(this.movingPoint.getId());
            this.movingPoint = undefined;
        }
        this.positions.length = 0;
    }
    /**
     * @return {?}
     */
    getPointsCount() {
        return this.positions.length;
    }
    /**
     * @return {?}
     */
    getId() {
        return this.id;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.positions;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.polylines;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.movingPoint;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.doneCreation;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._enableEdit;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._polygonProps;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._defaultPointProps;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._defaultPolylineProps;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.lastDraggedToPosition;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._labels;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.id;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.polygonsLayer;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.pointsLayer;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.polylinesLayer;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.coordinateConverter;
}
//# sourceMappingURL=data:application/json;base64,