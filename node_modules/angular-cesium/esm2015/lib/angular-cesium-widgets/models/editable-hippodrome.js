/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AcEntity } from '../../angular-cesium/models/ac-entity';
import { EditPoint } from './edit-point';
import { GeoUtilsService } from '../../angular-cesium/services/geo-utils/geo-utils.service';
import { defaultLabelProps } from './label-props';
export class EditableHippodrome extends AcEntity {
    /**
     * @param {?} id
     * @param {?} pointsLayer
     * @param {?} hippodromeLayer
     * @param {?} coordinateConverter
     * @param {?} editOptions
     * @param {?=} positions
     */
    constructor(id, pointsLayer, hippodromeLayer, coordinateConverter, editOptions, positions) {
        super();
        this.id = id;
        this.pointsLayer = pointsLayer;
        this.hippodromeLayer = hippodromeLayer;
        this.coordinateConverter = coordinateConverter;
        this.positions = [];
        this.done = false;
        this._enableEdit = true;
        this._labels = [];
        this.defaultPointProps = editOptions.pointProps;
        this.hippodromeProps = editOptions.hippodromeProps;
        if (positions && positions.length === 2) {
            this.createFromExisting(positions);
        }
        else if (positions) {
            throw new Error('Hippodrome consist of 2 points but provided ' + positions.length);
        }
    }
    /**
     * @return {?}
     */
    get labels() {
        return this._labels;
    }
    /**
     * @param {?} labels
     * @return {?}
     */
    set labels(labels) {
        if (!labels) {
            return;
        }
        /** @type {?} */
        const positions = this.getRealPositions();
        this._labels = labels.map((label, index) => {
            if (!label.position) {
                label.position = positions[index];
            }
            return Object.assign({}, defaultLabelProps, label);
        });
    }
    /**
     * @return {?}
     */
    get hippodromeProps() {
        return this._hippodromeProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hippodromeProps(value) {
        this._hippodromeProps = value;
    }
    /**
     * @return {?}
     */
    get defaultPointProps() {
        return this._defaultPointProps;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set defaultPointProps(value) {
        this._defaultPointProps = value;
    }
    /**
     * @return {?}
     */
    get enableEdit() {
        return this._enableEdit;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set enableEdit(value) {
        this._enableEdit = value;
        this.positions.forEach(point => {
            point.show = value;
            this.updatePointsLayer(point);
        });
    }
    /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    createFromExisting(positions) {
        positions.forEach(position => {
            this.addPointFromExisting(position);
        });
        this.createHeightEditPoints();
        this.updateHippdromeLayer();
        this.updatePointsLayer(...this.positions);
        this.done = true;
    }
    /**
     * @param {?} points
     * @param {?=} widthMeters
     * @return {?}
     */
    setPointsManually(points, widthMeters) {
        if (!this.done) {
            throw new Error('Update manually only in edit mode, after polyline is created');
        }
        this.hippodromeProps.width = widthMeters ? widthMeters : this.hippodromeProps.width;
        this.positions.forEach(p => this.pointsLayer.remove(p.getId()));
        this.positions = points;
        this.createHeightEditPoints();
        this.updatePointsLayer(...points);
        this.updateHippdromeLayer();
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addPointFromExisting(position) {
        /** @type {?} */
        const newPoint = new EditPoint(this.id, position, this.defaultPointProps);
        this.positions.push(newPoint);
        this.updatePointsLayer(newPoint);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addPoint(position) {
        if (this.done) {
            return;
        }
        /** @type {?} */
        const isFirstPoint = !this.positions.length;
        if (isFirstPoint) {
            /** @type {?} */
            const firstPoint = new EditPoint(this.id, position, this.defaultPointProps);
            this.positions.push(firstPoint);
            this.movingPoint = new EditPoint(this.id, position.clone(), this.defaultPointProps);
            this.positions.push(this.movingPoint);
            this.updatePointsLayer(firstPoint);
        }
        else {
            this.createHeightEditPoints();
            this.updatePointsLayer(...this.positions);
            this.updateHippdromeLayer();
            this.done = true;
            this.movingPoint = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    createHeightEditPoints() {
        this.positions.filter(p => p.isVirtualEditPoint()).forEach(p => this.removePosition(p));
        /** @type {?} */
        const firstP = this.getRealPoints()[0];
        /** @type {?} */
        const secP = this.getRealPoints()[1];
        /** @type {?} */
        const midPointCartesian3 = Cesium.Cartesian3.lerp(firstP.getPosition(), secP.getPosition(), 0.5, new Cesium.Cartesian3());
        /** @type {?} */
        const bearingDeg = this.coordinateConverter.bearingToCartesian(firstP.getPosition(), secP.getPosition());
        /** @type {?} */
        const upAzimuth = Cesium.Math.toRadians(bearingDeg) - Math.PI / 2;
        this.createMiddleEditablePoint(midPointCartesian3, upAzimuth);
        /** @type {?} */
        const downAzimuth = Cesium.Math.toRadians(bearingDeg) + Math.PI / 2;
        this.createMiddleEditablePoint(midPointCartesian3, downAzimuth);
    }
    /**
     * @private
     * @param {?} midPointCartesian3
     * @param {?} azimuth
     * @return {?}
     */
    createMiddleEditablePoint(midPointCartesian3, azimuth) {
        /** @type {?} */
        const upEditCartesian3 = GeoUtilsService.pointByLocationDistanceAndAzimuth(midPointCartesian3, this.hippodromeProps.width / 2, azimuth, true);
        /** @type {?} */
        const midPoint = new EditPoint(this.id, upEditCartesian3, this.defaultPointProps);
        midPoint.setVirtualEditPoint(true);
        this.positions.push(midPoint);
    }
    /**
     * @param {?} toPosition
     * @param {?} editPoint
     * @return {?}
     */
    movePoint(toPosition, editPoint) {
        if (!editPoint.isVirtualEditPoint()) {
            editPoint.setPosition(toPosition);
            this.createHeightEditPoints();
            this.updatePointsLayer(...this.positions);
            this.updateHippdromeLayer();
        }
        else {
            this.changeWidthByNewPoint(toPosition);
        }
    }
    /**
     * @private
     * @param {?} toPosition
     * @return {?}
     */
    changeWidthByNewPoint(toPosition) {
        /** @type {?} */
        const firstP = this.getRealPoints()[0];
        /** @type {?} */
        const secP = this.getRealPoints()[1];
        /** @type {?} */
        const midPointCartesian3 = Cesium.Cartesian3.lerp(firstP.getPosition(), secP.getPosition(), 0.5, new Cesium.Cartesian3());
        /** @type {?} */
        const bearingDeg = this.coordinateConverter.bearingToCartesian(midPointCartesian3, toPosition);
        /** @type {?} */
        let normalizedBearingDeb = bearingDeg;
        if (bearingDeg > 270) {
            normalizedBearingDeb = bearingDeg - 270;
        }
        else if (bearingDeg > 180) {
            normalizedBearingDeb = bearingDeg - 180;
        }
        /** @type {?} */
        let bearingDegHippodromeDots = this.coordinateConverter.bearingToCartesian(firstP.getPosition(), secP.getPosition());
        if (bearingDegHippodromeDots > 180) {
            bearingDegHippodromeDots = this.coordinateConverter.bearingToCartesian(secP.getPosition(), firstP.getPosition());
        }
        /** @type {?} */
        let fixedBearingDeg = bearingDegHippodromeDots > normalizedBearingDeb
            ? bearingDegHippodromeDots - normalizedBearingDeb
            : normalizedBearingDeb - bearingDegHippodromeDots;
        if (bearingDeg > 270) {
            fixedBearingDeg = bearingDeg - bearingDegHippodromeDots;
        }
        /** @type {?} */
        const distanceMeters = Math.abs(GeoUtilsService.distance(midPointCartesian3, toPosition));
        /** @type {?} */
        const radiusWidth = Math.sin(Cesium.Math.toRadians(fixedBearingDeg)) * distanceMeters;
        this.hippodromeProps.width = Math.abs(radiusWidth) * 2;
        this.createHeightEditPoints();
        this.updatePointsLayer(...this.positions);
        this.updateHippdromeLayer();
    }
    /**
     * @param {?} startMovingPosition
     * @param {?} draggedToPosition
     * @return {?}
     */
    moveShape(startMovingPosition, draggedToPosition) {
        if (!this.lastDraggedToPosition) {
            this.lastDraggedToPosition = startMovingPosition;
        }
        /** @type {?} */
        const delta = GeoUtilsService.getPositionsDelta(this.lastDraggedToPosition, draggedToPosition);
        this.getRealPoints().forEach(point => {
            GeoUtilsService.addDeltaToPosition(point.getPosition(), delta, true);
        });
        this.createHeightEditPoints();
        this.updatePointsLayer(...this.positions);
        this.updateHippdromeLayer();
        this.lastDraggedToPosition = draggedToPosition;
    }
    /**
     * @return {?}
     */
    endMoveShape() {
        this.lastDraggedToPosition = undefined;
        this.createHeightEditPoints();
        this.positions.forEach(point => this.updatePointsLayer(point));
        this.updateHippdromeLayer();
    }
    /**
     * @return {?}
     */
    endMovePoint() {
        this.createHeightEditPoints();
        this.updatePointsLayer(...this.positions);
    }
    /**
     * @param {?} toPosition
     * @return {?}
     */
    moveTempMovingPoint(toPosition) {
        if (this.movingPoint) {
            this.movePoint(toPosition, this.movingPoint);
        }
    }
    /**
     * @param {?} pointToRemove
     * @return {?}
     */
    removePoint(pointToRemove) {
        this.removePosition(pointToRemove);
        this.positions.filter(p => p.isVirtualEditPoint()).forEach(p => this.removePosition(p));
    }
    /**
     * @param {?} position
     * @return {?}
     */
    addLastPoint(position) {
        this.done = true;
        this.removePosition(this.movingPoint); // remove movingPoint
        this.movingPoint = null;
    }
    /**
     * @return {?}
     */
    getRealPositions() {
        return this.getRealPoints().map(position => position.getPosition());
    }
    /**
     * @return {?}
     */
    getRealPositionsCallbackProperty() {
        return new Cesium.CallbackProperty(this.getRealPositions.bind(this), false);
    }
    /**
     * @return {?}
     */
    getRealPoints() {
        return this.positions.filter(position => !position.isVirtualEditPoint());
    }
    /**
     * @return {?}
     */
    getWidth() {
        return this.hippodromeProps.width;
    }
    /**
     * @return {?}
     */
    getPositions() {
        return this.positions.map(position => position.getPosition());
    }
    /**
     * @private
     * @param {?} point
     * @return {?}
     */
    removePosition(point) {
        /** @type {?} */
        const index = this.positions.findIndex(p => p === point);
        if (index < 0) {
            return;
        }
        this.positions.splice(index, 1);
        this.pointsLayer.remove(point.getId());
    }
    /**
     * @private
     * @param {...?} point
     * @return {?}
     */
    updatePointsLayer(...point) {
        point.forEach(p => this.pointsLayer.update(p, p.getId()));
    }
    /**
     * @private
     * @return {?}
     */
    updateHippdromeLayer() {
        this.hippodromeLayer.update(this, this.id);
    }
    /**
     * @return {?}
     */
    dispose() {
        this.hippodromeLayer.remove(this.id);
        this.positions.forEach(editPoint => {
            this.pointsLayer.remove(editPoint.getId());
        });
        if (this.movingPoint) {
            this.pointsLayer.remove(this.movingPoint.getId());
            this.movingPoint = undefined;
        }
        this.positions.length = 0;
    }
    /**
     * @return {?}
     */
    getPointsCount() {
        return this.positions.length;
    }
    /**
     * @return {?}
     */
    getId() {
        return this.id;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.positions;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.movingPoint;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.done;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype._enableEdit;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype._defaultPointProps;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype._hippodromeProps;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.lastDraggedToPosition;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype._labels;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.id;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.pointsLayer;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.hippodromeLayer;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.coordinateConverter;
}
//# sourceMappingURL=data:application/json;base64,