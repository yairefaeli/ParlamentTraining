/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import { fromEvent as observableFromEvent } from 'rxjs';
import { switchMap, takeUntil, tap } from 'rxjs/operators';
import { CesiumService } from '../../../../angular-cesium/services/cesium/cesium.service';
/**
 * Toolbar widget, act as a container for ac-toolbar-button components
 * allowing drag configuration and passing `toolbarClass` as attributes
 *
 * Usage:
 * ```
 * <ac-toolbar [allowDrag]="true" (onDrag)="handleDrag($event)">
 * <ac-toolbar-button [iconUrl]="'assets/home-icon.svg'" (onClick)="goHome()">
 * </ac-toolbar-button>
 * <ac-toolbar-button [iconUrl]="'assets/explore-icon.svg'" (onClick)="rangeAndBearing()">
 * </ac-toolbar-button>
 * </ac-toolbar>
 * ```
 *
 */
export class AcToolbarComponent {
    /**
     * @param {?} element
     * @param {?} cesiumService
     */
    constructor(element, cesiumService) {
        this.element = element;
        this.cesiumService = cesiumService;
        this.allowDrag = true;
        this.onDrag = new EventEmitter();
        this.dragStyle = {
            'height.px': 20,
            'width.px': 20,
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.cesiumService.getMap().getMapContainer().appendChild(this.element.nativeElement);
        if (this.allowDrag) {
            this.listenForDragging();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.allowDrag && changes.allowDrag.currentValue && !changes.allowDrag.previousValue) {
            this.listenForDragging();
        }
        if (changes.allowDrag && !changes.allowDrag.currentValue && changes.allowDrag.previousValue) {
            this.dragSubscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.dragSubscription) {
            this.dragSubscription.unsubscribe();
        }
    }
    /**
     * @private
     * @return {?}
     */
    listenForDragging() {
        this.mouseDown$ = this.mouseDown$ || observableFromEvent(this.element.nativeElement, 'mousedown');
        this.mouseMove$ = this.mouseMove$ || (/** @type {?} */ (observableFromEvent(document, 'mousemove')));
        this.mouseUp$ = this.mouseUp$ || (/** @type {?} */ (observableFromEvent(document, 'mouseup')));
        this.drag$ = this.drag$ ||
            this.mouseDown$.pipe(switchMap(() => this.mouseMove$.pipe(tap(this.onDrag.emit), takeUntil(this.mouseUp$))));
        this.dragSubscription = this.drag$.subscribe((event) => {
            this.element.nativeElement.style.left = `${event.x}px`;
            this.element.nativeElement.style.top = `${event.y}px`;
        });
    }
}
AcToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ac-toolbar',
                template: `
        <div class="{{toolbarClass}}">
            <div *ngIf="allowDrag">
                <ac-toolbar-button>
                    <ac-drag-icon></ac-drag-icon>
                </ac-toolbar-button>
            </div>

            <ng-content></ng-content>
        </div>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
        :host {
            position: absolute;
            top: 20px;
            left: 20px;
            width: 20px;
            height: 20px;
            z-index: 999;
            -webkit-user-drag: none;
        }
    `]
            }] }
];
/** @nocollapse */
AcToolbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: CesiumService }
];
AcToolbarComponent.propDecorators = {
    toolbarClass: [{ type: Input }],
    allowDrag: [{ type: Input }],
    onDrag: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AcToolbarComponent.prototype.toolbarClass;
    /** @type {?} */
    AcToolbarComponent.prototype.allowDrag;
    /** @type {?} */
    AcToolbarComponent.prototype.onDrag;
    /** @type {?} */
    AcToolbarComponent.prototype.dragStyle;
    /**
     * @type {?}
     * @private
     */
    AcToolbarComponent.prototype.mouseDown$;
    /**
     * @type {?}
     * @private
     */
    AcToolbarComponent.prototype.mouseMove$;
    /**
     * @type {?}
     * @private
     */
    AcToolbarComponent.prototype.mouseUp$;
    /**
     * @type {?}
     * @private
     */
    AcToolbarComponent.prototype.drag$;
    /**
     * @type {?}
     * @private
     */
    AcToolbarComponent.prototype.dragSubscription;
    /**
     * @type {?}
     * @private
     */
    AcToolbarComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    AcToolbarComponent.prototype.cesiumService;
}
//# sourceMappingURL=data:application/json;base64,