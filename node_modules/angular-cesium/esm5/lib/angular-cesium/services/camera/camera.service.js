/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { SceneMode } from '../../models/scene-mode.enum';
/**
 *  The service exposes the scene's camera and screenSpaceCameraController
 *  SceneMode.PERFORMANCE_SCENE2D -  is a 3D scene mode that acts like Cesium 2D mode,
 *  but is more efficient performance wise.
 */
var CameraService = /** @class */ (function () {
    function CameraService() {
        this.isSceneModePerformance2D = false;
    }
    /**
     * @param {?} cesiumService
     * @return {?}
     */
    CameraService.prototype.init = /**
     * @param {?} cesiumService
     * @return {?}
     */
    function (cesiumService) {
        this.viewer = cesiumService.getViewer();
        this.scene = cesiumService.getScene();
        this.screenSpaceCameraController = this.scene.screenSpaceCameraController;
        this.camera = this.scene.camera;
        this.lastRotate = this.screenSpaceCameraController.enableRotate;
        this.lastTilt = this.screenSpaceCameraController.enableTilt;
        this.lastLook = this.screenSpaceCameraController.enableLook;
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    CameraService.prototype._listenToSceneModeMorph = /**
     * @param {?} callback
     * @return {?}
     */
    function (callback) {
        this.morphListenerCancelFn = this.scene.morphStart.addEventListener(callback);
    };
    /**
     * @return {?}
     */
    CameraService.prototype._revertCameraProperties = /**
     * @return {?}
     */
    function () {
        this.isSceneModePerformance2D = false;
        this.enableTilt(this.lastTilt);
        this.enableRotate(this.lastRotate);
        this.enableLook(this.lastLook);
    };
    /**
     * Gets the scene's camera
     */
    /**
     * Gets the scene's camera
     * @return {?}
     */
    CameraService.prototype.getCamera = /**
     * Gets the scene's camera
     * @return {?}
     */
    function () {
        return this.camera;
    };
    /**
     * Gets the scene's screenSpaceCameraController
     */
    /**
     * Gets the scene's screenSpaceCameraController
     * @return {?}
     */
    CameraService.prototype.getScreenSpaceCameraController = /**
     * Gets the scene's screenSpaceCameraController
     * @return {?}
     */
    function () {
        return this.screenSpaceCameraController;
    };
    /**
     * Gets the minimum zoom value in meters
     */
    /**
     * Gets the minimum zoom value in meters
     * @return {?}
     */
    CameraService.prototype.getMinimumZoom = /**
     * Gets the minimum zoom value in meters
     * @return {?}
     */
    function () {
        return this.screenSpaceCameraController.minimumZoomDistance;
    };
    /**
     * Sets the minimum zoom value in meters
     * @param zoom amount
     */
    /**
     * Sets the minimum zoom value in meters
     * @param {?} amount
     * @return {?}
     */
    CameraService.prototype.setMinimumZoom = /**
     * Sets the minimum zoom value in meters
     * @param {?} amount
     * @return {?}
     */
    function (amount) {
        this.screenSpaceCameraController.minimumZoomDistance = amount;
    };
    /**
     * Gets the maximum zoom value in meters
     */
    /**
     * Gets the maximum zoom value in meters
     * @return {?}
     */
    CameraService.prototype.getMaximumZoom = /**
     * Gets the maximum zoom value in meters
     * @return {?}
     */
    function () {
        return this.screenSpaceCameraController.maximumZoomDistance;
    };
    /**
     * Sets the maximum zoom value in meters
     * @param zoom amount
     */
    /**
     * Sets the maximum zoom value in meters
     * @param {?} amount
     * @return {?}
     */
    CameraService.prototype.setMaximumZoom = /**
     * Sets the maximum zoom value in meters
     * @param {?} amount
     * @return {?}
     */
    function (amount) {
        this.screenSpaceCameraController.maximumZoomDistance = amount;
    };
    /**
     * Sets if the camera is able to tilt
     */
    /**
     * Sets if the camera is able to tilt
     * @param {?} tilt
     * @return {?}
     */
    CameraService.prototype.enableTilt = /**
     * Sets if the camera is able to tilt
     * @param {?} tilt
     * @return {?}
     */
    function (tilt) {
        this.screenSpaceCameraController.enableTilt = tilt;
    };
    /**
     * Sets if the camera is able to rotate
     */
    /**
     * Sets if the camera is able to rotate
     * @param {?} rotate
     * @return {?}
     */
    CameraService.prototype.enableRotate = /**
     * Sets if the camera is able to rotate
     * @param {?} rotate
     * @return {?}
     */
    function (rotate) {
        this.screenSpaceCameraController.enableRotate = rotate;
    };
    /**
     * Sets if the camera is able to free-look
     */
    /**
     * Sets if the camera is able to free-look
     * @param {?} lock
     * @return {?}
     */
    CameraService.prototype.enableLook = /**
     * Sets if the camera is able to free-look
     * @param {?} lock
     * @return {?}
     */
    function (lock) {
        this.screenSpaceCameraController.enableLook = lock;
    };
    /**
     * Sets if the camera is able to translate
     */
    /**
     * Sets if the camera is able to translate
     * @param {?} translate
     * @return {?}
     */
    CameraService.prototype.enableTranslate = /**
     * Sets if the camera is able to translate
     * @param {?} translate
     * @return {?}
     */
    function (translate) {
        this.screenSpaceCameraController.enableTranslate = translate;
    };
    /**
     * Sets if the camera is able to zoom
     */
    /**
     * Sets if the camera is able to zoom
     * @param {?} zoom
     * @return {?}
     */
    CameraService.prototype.enableZoom = /**
     * Sets if the camera is able to zoom
     * @param {?} zoom
     * @return {?}
     */
    function (zoom) {
        this.screenSpaceCameraController.enableZoom = zoom;
    };
    /**
     * Sets if the camera receives inputs
     */
    /**
     * Sets if the camera receives inputs
     * @param {?} inputs
     * @return {?}
     */
    CameraService.prototype.enableInputs = /**
     * Sets if the camera receives inputs
     * @param {?} inputs
     * @return {?}
     */
    function (inputs) {
        this.screenSpaceCameraController.enableInputs = inputs;
    };
    /**
     * Sets the map's SceneMode
     * @param sceneMode - The SceneMode to morph the scene into.
     * @param duration - The duration of scene morph animations, in seconds
     */
    /**
     * Sets the map's SceneMode
     * @param {?} sceneMode - The SceneMode to morph the scene into.
     * @param {?=} duration - The duration of scene morph animations, in seconds
     * @return {?}
     */
    CameraService.prototype.setSceneMode = /**
     * Sets the map's SceneMode
     * @param {?} sceneMode - The SceneMode to morph the scene into.
     * @param {?=} duration - The duration of scene morph animations, in seconds
     * @return {?}
     */
    function (sceneMode, duration) {
        var _this = this;
        switch (sceneMode) {
            case SceneMode.SCENE3D: {
                if (this.isSceneModePerformance2D) {
                    this._revertCameraProperties();
                }
                this.scene.morphTo3D(duration);
                break;
            }
            case SceneMode.COLUMBUS_VIEW: {
                if (this.isSceneModePerformance2D) {
                    this._revertCameraProperties();
                }
                this.scene.morphToColumbusView(duration);
                break;
            }
            case SceneMode.SCENE2D: {
                if (this.isSceneModePerformance2D) {
                    this._revertCameraProperties();
                }
                this.scene.morphTo2D(duration);
                break;
            }
            case SceneMode.PERFORMANCE_SCENE2D: {
                this.isSceneModePerformance2D = true;
                this.lastLook = this.screenSpaceCameraController.enableLook;
                this.lastTilt = this.screenSpaceCameraController.enableTilt;
                this.lastRotate = this.screenSpaceCameraController.enableRotate;
                this.screenSpaceCameraController.enableTilt = false;
                this.screenSpaceCameraController.enableRotate = false;
                this.screenSpaceCameraController.enableLook = false;
                if (this.morphListenerCancelFn) {
                    this.morphListenerCancelFn();
                }
                this.scene.morphToColumbusView(duration);
                /** @type {?} */
                var morphCompleteEventListener_1 = this.scene.morphComplete.addEventListener(function () {
                    _this.camera.setView({
                        destination: Cesium.Cartesian3.fromDegrees(0.0, 0.0, Math.min(CameraService.PERFORMANCE_2D_ALTITUDE, _this.getMaximumZoom())),
                        orientation: {
                            pitch: Cesium.Math.toRadians(-90)
                        }
                    });
                    morphCompleteEventListener_1();
                    _this._listenToSceneModeMorph(_this._revertCameraProperties.bind(_this));
                });
                break;
            }
        }
    };
    /**
     * Flies the camera to a destination
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html?classFilter=cam#flyTo
     */
    /**
     * Flies the camera to a destination
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html?classFilter=cam#flyTo
     * @param {?} options
     * @return {?}
     */
    CameraService.prototype.cameraFlyTo = /**
     * Flies the camera to a destination
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html?classFilter=cam#flyTo
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return this.camera.flyTo(options);
    };
    /**
     * Flies the camera to a target
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#flyTo
     * @returns Promise<boolean>
     */
    /**
     * Flies the camera to a target
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#flyTo
     * @param {?} target
     * @param {?=} options
     * @return {?} Promise<boolean>
     */
    CameraService.prototype.flyTo = /**
     * Flies the camera to a target
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#flyTo
     * @param {?} target
     * @param {?=} options
     * @return {?} Promise<boolean>
     */
    function (target, options) {
        return this.viewer.flyTo(target, options);
    };
    /**
     * Zooms amount along the camera's view vector.
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html#zoomIn
     */
    /**
     * Zooms amount along the camera's view vector.
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html#zoomIn
     * @param {?} amount
     * @return {?}
     */
    CameraService.prototype.zoomIn = /**
     * Zooms amount along the camera's view vector.
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html#zoomIn
     * @param {?} amount
     * @return {?}
     */
    function (amount) {
        return this.camera.zoomIn(amount || this.camera.defaultZoomAmount);
    };
    /**
     * Zooms amount along the opposite direction of the camera's view vector.
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html#zoomOut
     */
    /**
     * Zooms amount along the opposite direction of the camera's view vector.
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html#zoomOut
     * @param {?} amount
     * @return {?}
     */
    CameraService.prototype.zoomOut = /**
     * Zooms amount along the opposite direction of the camera's view vector.
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html#zoomOut
     * @param {?} amount
     * @return {?}
     */
    function (amount) {
        return this.camera.zoomIn(amount || this.camera.defaultZoomAmount);
    };
    /**
     * Zoom the camera to a target
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#zoomTo
     * @returns Promise<boolean>
     */
    /**
     * Zoom the camera to a target
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#zoomTo
     * @param {?} target
     * @param {?=} offset
     * @return {?} Promise<boolean>
     */
    CameraService.prototype.zoomTo = /**
     * Zoom the camera to a target
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#zoomTo
     * @param {?} target
     * @param {?=} offset
     * @return {?} Promise<boolean>
     */
    function (target, offset) {
        return this.viewer.zoomTo(target, offset);
    };
    /**
     * Flies the camera to a destination
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html?classFilter=camera#setView
     * @param options viewer options
     */
    /**
     * Flies the camera to a destination
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html?classFilter=camera#setView
     * @param {?} options viewer options
     * @return {?}
     */
    CameraService.prototype.setView = /**
     * Flies the camera to a destination
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Camera.html?classFilter=camera#setView
     * @param {?} options viewer options
     * @return {?}
     */
    function (options) {
        this.camera.setView(options);
    };
    /**
     * Set camera's rotation
     */
    /**
     * Set camera's rotation
     * @param {?} degreesInRadians
     * @return {?}
     */
    CameraService.prototype.setRotation = /**
     * Set camera's rotation
     * @param {?} degreesInRadians
     * @return {?}
     */
    function (degreesInRadians) {
        this.setView({ orientation: { heading: degreesInRadians } });
    };
    /**
     * Locks or unlocks camera rotation
     */
    /**
     * Locks or unlocks camera rotation
     * @param {?} lock
     * @return {?}
     */
    CameraService.prototype.lockRotation = /**
     * Locks or unlocks camera rotation
     * @param {?} lock
     * @return {?}
     */
    function (lock) {
        this.scene.screenSpaceCameraController.enableRotate = !lock;
    };
    /**
     * Make the camera track a specific entity
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#trackedEntity
     * @param entity - entity to track
     * @param options - track entity options
     */
    /**
     * Make the camera track a specific entity
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#trackedEntity
     * @param {?=} entity - entity to track
     * @param {?=} options - track entity options
     * @return {?}
     */
    CameraService.prototype.trackEntity = /**
     * Make the camera track a specific entity
     * API: https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewer#trackedEntity
     * @param {?=} entity - entity to track
     * @param {?=} options - track entity options
     * @return {?}
     */
    function (entity, options) {
        var _this = this;
        /** @type {?} */
        var flyTo = (options && options.flyTo) || false;
        this.viewer.trackedEntity = undefined;
        return new Promise(function (resolve) {
            if (flyTo) {
                /** @type {?} */
                var flyToDuration = (options && options.flyToDuration) || 1;
                /** @type {?} */
                var altitude = (options && options.altitude) || 10000;
                // Calc entity flyTo position and wanted altitude
                /** @type {?} */
                var entPosCar3 = entity.position.getValue(Cesium.JulianDate.now());
                /** @type {?} */
                var entPosCart = Cesium.Cartographic.fromCartesian(entPosCar3);
                /** @type {?} */
                var zoomAmount_1 = altitude - entPosCart.height;
                entPosCart.height = altitude;
                /** @type {?} */
                var flyToPosition = Cesium.Cartesian3.fromRadians(entPosCart.longitude, entPosCart.latitude, entPosCart.height);
                _this.cameraFlyTo({
                    duration: flyToDuration,
                    destination: flyToPosition,
                    complete: function () {
                        _this.viewer.trackedEntity = entity;
                        setTimeout(function () {
                            if (zoomAmount_1 > 0) {
                                _this.camera.zoomOut(zoomAmount_1);
                            }
                            else {
                                _this.camera.zoomIn(zoomAmount_1);
                            }
                        }, 0);
                        resolve();
                    }
                });
            }
            else {
                _this.viewer.trackedEntity = entity;
                resolve();
            }
        });
    };
    /**
     * @return {?}
     */
    CameraService.prototype.untrackEntity = /**
     * @return {?}
     */
    function () {
        this.trackEntity();
    };
    CameraService.PERFORMANCE_2D_ALTITUDE = 25000000;
    CameraService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CameraService.ctorParameters = function () { return []; };
    return CameraService;
}());
export { CameraService };
if (false) {
    /** @type {?} */
    CameraService.PERFORMANCE_2D_ALTITUDE;
    /**
     * @type {?}
     * @private
     */
    CameraService.prototype.viewer;
    /**
     * @type {?}
     * @private
     */
    CameraService.prototype.scene;
    /**
     * @type {?}
     * @private
     */
    CameraService.prototype.camera;
    /**
     * @type {?}
     * @private
     */
    CameraService.prototype.screenSpaceCameraController;
    /**
     * @type {?}
     * @private
     */
    CameraService.prototype.morphListenerCancelFn;
    /**
     * @type {?}
     * @private
     */
    CameraService.prototype.lastRotate;
    /**
     * @type {?}
     * @private
     */
    CameraService.prototype.lastTilt;
    /**
     * @type {?}
     * @private
     */
    CameraService.prototype.lastLook;
    /**
     * @type {?}
     * @private
     */
    CameraService.prototype.isSceneModePerformance2D;
}
//# sourceMappingURL=data:application/json;base64,