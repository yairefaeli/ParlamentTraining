/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BasicDrawerService } from '../basic-drawer/basic-drawer.service';
import { GraphicsType } from './enums/graphics-type.enum';
import { OptimizedEntityCollection } from './optimized-entity-collection';
/**
 *  General primitives drawer responsible of drawing Cesium primitives.
 *  Drawers the handle Cesium primitives extend it.
 */
var /**
 *  General primitives drawer responsible of drawing Cesium primitives.
 *  Drawers the handle Cesium primitives extend it.
 */
EntitiesDrawerService = /** @class */ (function (_super) {
    tslib_1.__extends(EntitiesDrawerService, _super);
    function EntitiesDrawerService(cesiumService, graphicsType, defaultOptions) {
        if (defaultOptions === void 0) { defaultOptions = {
            collectionMaxSize: -1,
            collectionSuspensionTime: -1,
            collectionsNumber: 1,
        }; }
        var _this = _super.call(this) || this;
        _this.cesiumService = cesiumService;
        _this.graphicsType = graphicsType;
        _this.defaultOptions = defaultOptions;
        _this.entityCollections = new Map();
        _this.graphicsTypeName = GraphicsType[_this.graphicsType];
        // Fix bad enum compilation
        for (var i in GraphicsType) {
            if ((/** @type {?} */ (GraphicsType[i])) === _this.graphicsType) {
                _this.graphicsTypeName = i;
            }
        }
        return _this;
    }
    /**
     * @private
     * @return {?}
     */
    EntitiesDrawerService.prototype.getFreeEntitiesCollection = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var freeEntityCollection = null;
        this.entityCollections.forEach(function (entityCollection) {
            if (entityCollection.isFree()) {
                freeEntityCollection = entityCollection;
            }
        });
        return freeEntityCollection;
    };
    /**
     * @param {?=} options
     * @return {?}
     */
    EntitiesDrawerService.prototype.init = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        /** @type {?} */
        var finalOptions = options || this.defaultOptions;
        /** @type {?} */
        var dataSources = [];
        for (var i = 0; i < finalOptions.collectionsNumber; i++) {
            /** @type {?} */
            var dataSource = new Cesium.CustomDataSource(this.graphicsTypeName);
            dataSources.push(dataSource);
            this.cesiumService.getViewer().dataSources.add(dataSource);
            this.entityCollections.set(dataSource.entities, new OptimizedEntityCollection(dataSource.entities, finalOptions.collectionMaxSize, finalOptions.collectionSuspensionTime));
        }
        return dataSources;
    };
    /**
     * @param {?} cesiumProps
     * @return {?}
     */
    EntitiesDrawerService.prototype.add = /**
     * @param {?} cesiumProps
     * @return {?}
     */
    function (cesiumProps) {
        var _a;
        /** @type {?} */
        var optimizedEntityCollection = this.getFreeEntitiesCollection();
        if (optimizedEntityCollection === null) {
            throw new Error('No more free entity collections');
        }
        /** @type {?} */
        var graphicsClass = (/** @type {?} */ (this.graphicsType));
        /** @type {?} */
        var entityObject = (_a = {
                position: cesiumProps.position !== undefined ? cesiumProps.position : undefined,
                description: cesiumProps.description !== undefined ? cesiumProps.description : undefined,
                orientation: cesiumProps.orientation !== undefined ? cesiumProps.orientation : undefined,
                viewFrom: cesiumProps.viewFrom !== undefined ? cesiumProps.viewFrom : undefined
            },
            _a[this.graphicsTypeName] = cesiumProps,
            _a);
        if (cesiumProps.name !== undefined) {
            entityObject.name = cesiumProps.name;
        }
        return optimizedEntityCollection.add(entityObject);
    };
    /**
     * @param {?} entity
     * @param {?} cesiumProps
     * @return {?}
     */
    EntitiesDrawerService.prototype.update = /**
     * @param {?} entity
     * @param {?} cesiumProps
     * @return {?}
     */
    function (entity, cesiumProps) {
        this.suspendEntityCollection(entity);
        if (entity.position instanceof Cesium.CallbackProperty) {
            if (entity.position._isConstant) {
                entity.position = cesiumProps.position;
            }
        }
        entity.position = cesiumProps.position !== undefined ? cesiumProps.position : undefined;
        entity.name = cesiumProps.name !== undefined ? cesiumProps.name : entity.name;
        entity.description = cesiumProps.description !== undefined ? cesiumProps.description : entity.description;
        entity.orientation = cesiumProps.orientation !== undefined ? cesiumProps.orientation : entity.orientation;
        entity.viewFrom = cesiumProps.viewFrom !== undefined ? cesiumProps.viewFrom : entity.viewFrom;
        if (this._propsAssigner) {
            this._propsAssigner(entity[this.graphicsTypeName], cesiumProps);
        }
        else {
            Object.assign(entity[this.graphicsTypeName], cesiumProps);
        }
    };
    /**
     * @param {?} entity
     * @return {?}
     */
    EntitiesDrawerService.prototype.remove = /**
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        /** @type {?} */
        var optimizedEntityCollection = this.entityCollections.get(entity.entityCollection);
        optimizedEntityCollection.remove(entity);
    };
    /**
     * @return {?}
     */
    EntitiesDrawerService.prototype.removeAll = /**
     * @return {?}
     */
    function () {
        this.entityCollections.forEach(function (entityCollection) {
            entityCollection.removeAll();
        });
    };
    /**
     * @param {?} showValue
     * @return {?}
     */
    EntitiesDrawerService.prototype.setShow = /**
     * @param {?} showValue
     * @return {?}
     */
    function (showValue) {
        this.entityCollections.forEach(function (entityCollection) {
            entityCollection.setShow(showValue);
        });
    };
    /**
     * @private
     * @param {?} entity
     * @return {?}
     */
    EntitiesDrawerService.prototype.suspendEntityCollection = /**
     * @private
     * @param {?} entity
     * @return {?}
     */
    function (entity) {
        /** @type {?} */
        var id = entity.entityCollection;
        if (!this.entityCollections.has(id)) {
            throw new Error('No EntityCollection for entity.entityCollection');
        }
        /** @type {?} */
        var entityCollection = this.entityCollections.get(id);
        entityCollection.suspend();
    };
    return EntitiesDrawerService;
}(BasicDrawerService));
/**
 *  General primitives drawer responsible of drawing Cesium primitives.
 *  Drawers the handle Cesium primitives extend it.
 */
export { EntitiesDrawerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.entityCollections;
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.graphicsTypeName;
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.cesiumService;
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.graphicsType;
    /**
     * @type {?}
     * @private
     */
    EntitiesDrawerService.prototype.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,