/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isNumber } from 'util';
import { Inject, Injectable, NgZone } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { CesiumService } from '../cesium/cesium.service';
import { PREDEFINED_KEYBOARD_ACTIONS } from './predefined-actions';
/**
 * @record
 */
export function KeyboardControlParams() { }
if (false) {
    /** @type {?} */
    KeyboardControlParams.prototype.action;
    /** @type {?|undefined} */
    KeyboardControlParams.prototype.validation;
    /** @type {?|undefined} */
    KeyboardControlParams.prototype.params;
    /** @type {?|undefined} */
    KeyboardControlParams.prototype.done;
}
/**
 * @record
 */
export function KeyboardControlDefinition() { }
/** @enum {number} */
var KeyEventState = {
    IGNORED: 0,
    NOT_PRESSED: 1,
    PRESSED: 2,
};
KeyEventState[KeyEventState.IGNORED] = 'IGNORED';
KeyEventState[KeyEventState.NOT_PRESSED] = 'NOT_PRESSED';
KeyEventState[KeyEventState.PRESSED] = 'PRESSED';
/**
 * @record
 */
function ActiveDefinition() { }
if (false) {
    /** @type {?} */
    ActiveDefinition.prototype.keyboardEvent;
    /** @type {?} */
    ActiveDefinition.prototype.state;
    /** @type {?} */
    ActiveDefinition.prototype.action;
}
/**
 *  Service that manages keyboard keys and execute actions per request.
 *  Inject the keyboard control service into any layer, under your `ac-map` component,
 *  And defined you keyboard handlers using `setKeyboardControls`.
 *
 * <caption>Simple Example</caption>
 * ```typescript
 * Component({
 *   selector: 'keyboard-control-layer',
 *   template: '',
 * })
 * export class KeyboardControlLayerComponent implements OnInit, OnDestroy {
 *   constructor(private keyboardControlService: KeyboardControlService) {}
 *
 *   ngOnInit() {
 *     this.keyboardControlService.setKeyboardControls({
 *       W: { action: KeyboardAction.CAMERA_FORWARD },
 *       S: { action: KeyboardAction.CAMERA_BACKWARD },
 *       D: { action: KeyboardAction.CAMERA_RIGHT },
 *       A: { action: KeyboardAction.CAMERA_LEFT },
 *     });
 *    }
 *
 *   ngOnDestroy() {
 *     this.keyboardControlService.removeKeyboardControls();
 *   }
 * }
 * ```
 *
 * <caption>Advanced Example</caption>
 * ```typescript
 * Component({
 *   selector: 'keyboard-control-layer',
 *   template: '',
 * })
 * export class KeyboardControlLayerComponent implements OnInit, OnDestroy {
 *   constructor(private keyboardControlService: KeyboardControlService) {}
 *
 *   private myCustomValue = 10;
 *
 *   ngOnInit() {
 *     this.keyboardControlService.setKeyboardControls({
 *       W: {
 *          action: KeyboardAction.CAMERA_FORWARD,
 *          validate: (camera, scene, params, key) => {
 *            // Replace `checkCamera` you with your validation logic
 *            if (checkCamera(camera) || params.customParams === true) {
 *              return true;
 *            }
 *
 *            return false;
 *          },
 *          params: () => {
 *            return {
 *              myValue: this.myCustomValue,
 *            };
 *          },
 *        }
 *     });
 *    }
 *
 *   ngOnDestroy() {
 *     this.keyboardControlService.removeKeyboardControls();
 *   }
 * }
 * ```
 * <b>Predefined keyboard actions:</b>
 * + `KeyboardAction.CAMERA_FORWARD` - Moves the camera forward, accepts a numeric parameter named `moveRate` that controls
 * the factor of movement, according to the camera height.
 * + `KeyboardAction.CAMERA_BACKWARD` - Moves the camera backward, accepts a numeric parameter named `moveRate` that controls
 * the factor of movement, according to the camera height.
 * + `KeyboardAction.CAMERA_UP` - Moves the camera up, accepts a numeric parameter named `moveRate` that controls
 * the factor of movement, according to the camera height.
 * + `KeyboardAction.CAMERA_DOWN` - Moves the camera down, accepts a numeric parameter named `moveRate` that controls
 * the factor of movement, according to the camera height.
 * + `KeyboardAction.CAMERA_RIGHT` - Moves the camera right, accepts a numeric parameter named `moveRate` that controls
 * the factor of movement, according to the camera height.
 * + `KeyboardAction.CAMERA_LEFT` - Moves the camera left, accepts a numeric parameter named `moveRate` that controls
 * the factor of movement, according to the camera height.
 * + `KeyboardAction.CAMERA_LOOK_RIGHT` - Changes the camera to look to the right, accepts a numeric parameter named `lookFactor` that
 * controls the factor of looking, according to the camera current position.
 * + `KeyboardAction.CAMERA_LOOK_LEFT` - Changes the camera to look to the left, accepts a numeric parameter named `lookFactor` that
 * controls the factor of looking, according to the camera current position.
 * + `KeyboardAction.CAMERA_LOOK_UP` - Changes the camera to look up, accepts a numeric parameter named `lookFactor` that controls
 * the factor of looking, according to the camera current position.
 * + `KeyboardAction.CAMERA_LOOK_DOWN` - Changes the camera to look down, accepts a numeric parameter named `lookFactor` that controls
 * the factor of looking, according to the camera current position.
 * + `KeyboardAction.CAMERA_TWIST_RIGHT` - Twists the camera to the right, accepts a numeric parameter named `amount` that controls
 * the twist amount
 * + `KeyboardAction.CAMERA_TWIST_LEFT` - Twists the camera to the left, accepts a numeric parameter named `amount` that controls
 * the twist amount
 * + `KeyboardAction.CAMERA_ROTATE_RIGHT` - Rotates the camera to the right, accepts a numeric parameter named `angle` that controls
 * the rotation angle
 * + `KeyboardAction.CAMERA_ROTATE_LEFT` - Rotates the camera to the left, accepts a numeric parameter named `angle` that controls
 * the rotation angle
 * + `KeyboardAction.CAMERA_ROTATE_UP` - Rotates the camera upwards, accepts a numeric parameter named `angle` that controls
 * the rotation angle
 * + `KeyboardAction.CAMERA_ROTATE_DOWN` - Rotates the camera downwards, accepts a numeric parameter named `angle` that controls
 * the rotation angle
 * + `KeyboardAction.CAMERA_ZOOM_IN` - Zoom in into the current camera center position, accepts a numeric parameter named
 * `amount` that controls the amount of zoom in meters.
 * + `KeyboardAction.CAMERA_ZOOM_OUT` -  Zoom out from the current camera center position, accepts a numeric parameter named
 * `amount` that controls the amount of zoom in meters.
 */
var KeyboardControlService = /** @class */ (function () {
    /**
     * Creats the keyboard control service.
     */
    function KeyboardControlService(ngZone, cesiumService, document) {
        this.ngZone = ngZone;
        this.cesiumService = cesiumService;
        this.document = document;
        this._currentDefinitions = null;
        this._activeDefinitions = {};
        this._keyMappingFn = this.defaultKeyMappingFn;
    }
    /**
     * Initializes the keyboard control service.
     */
    /**
     * Initializes the keyboard control service.
     * @return {?}
     */
    KeyboardControlService.prototype.init = /**
     * Initializes the keyboard control service.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var canvas = this.cesiumService.getCanvas();
        canvas.addEventListener('click', function () {
            canvas.focus();
        });
        this.handleKeydown = this.handleKeydown.bind(this);
        this.handleKeyup = this.handleKeyup.bind(this);
        this.handleTick = this.handleTick.bind(this);
    };
    /**
     * Sets the current map keyboard control definitions.
     * The definitions is a key mapping between a key string and a KeyboardControlDefinition:
     * - `action` is a predefine action from `KeyboardAction` enum, or a custom method:
     * `(camera, scene, params, key) => boolean | void` - returning false will cancel the current keydown.
     * - `validation` is a method that validates if the event should occur or not (`camera, scene, params, key`)
     * - `params` is an object (or function that returns object) that will be passed into the action executor.
     * - `done` is a function that will be triggered when `keyup` is triggered.
     * @param definitions Keyboard Control Definition
     * @param keyMappingFn - Mapping function for custom keys
     * @param outsideOfAngularZone - if key down events will run outside of angular zone.
     */
    /**
     * Sets the current map keyboard control definitions.
     * The definitions is a key mapping between a key string and a KeyboardControlDefinition:
     * - `action` is a predefine action from `KeyboardAction` enum, or a custom method:
     * `(camera, scene, params, key) => boolean | void` - returning false will cancel the current keydown.
     * - `validation` is a method that validates if the event should occur or not (`camera, scene, params, key`)
     * - `params` is an object (or function that returns object) that will be passed into the action executor.
     * - `done` is a function that will be triggered when `keyup` is triggered.
     * @param {?} definitions Keyboard Control Definition
     * @param {?=} keyMappingFn - Mapping function for custom keys
     * @param {?=} outsideOfAngularZone - if key down events will run outside of angular zone.
     * @return {?}
     */
    KeyboardControlService.prototype.setKeyboardControls = /**
     * Sets the current map keyboard control definitions.
     * The definitions is a key mapping between a key string and a KeyboardControlDefinition:
     * - `action` is a predefine action from `KeyboardAction` enum, or a custom method:
     * `(camera, scene, params, key) => boolean | void` - returning false will cancel the current keydown.
     * - `validation` is a method that validates if the event should occur or not (`camera, scene, params, key`)
     * - `params` is an object (or function that returns object) that will be passed into the action executor.
     * - `done` is a function that will be triggered when `keyup` is triggered.
     * @param {?} definitions Keyboard Control Definition
     * @param {?=} keyMappingFn - Mapping function for custom keys
     * @param {?=} outsideOfAngularZone - if key down events will run outside of angular zone.
     * @return {?}
     */
    function (definitions, keyMappingFn, outsideOfAngularZone) {
        var _this = this;
        if (outsideOfAngularZone === void 0) { outsideOfAngularZone = false; }
        if (!definitions) {
            return this.removeKeyboardControls();
        }
        if (!this._currentDefinitions) {
            this.registerEvents(outsideOfAngularZone);
        }
        this._currentDefinitions = definitions;
        this._keyMappingFn = keyMappingFn || this.defaultKeyMappingFn;
        Object.keys(this._currentDefinitions).forEach(function (key) {
            _this._activeDefinitions[key] = {
                state: KeyEventState.NOT_PRESSED,
                action: null,
                keyboardEvent: null,
            };
        });
    };
    /**
     * Removes the current set of keyboard control items, and unregister from map events.
     */
    /**
     * Removes the current set of keyboard control items, and unregister from map events.
     * @return {?}
     */
    KeyboardControlService.prototype.removeKeyboardControls = /**
     * Removes the current set of keyboard control items, and unregister from map events.
     * @return {?}
     */
    function () {
        this.unregisterEvents();
        this._currentDefinitions = null;
    };
    /**
     * Returns the current action that handles `char` key string, or `null` if not exists
     */
    /**
     * Returns the current action that handles `char` key string, or `null` if not exists
     * @private
     * @param {?} char
     * @return {?}
     */
    KeyboardControlService.prototype.getAction = /**
     * Returns the current action that handles `char` key string, or `null` if not exists
     * @private
     * @param {?} char
     * @return {?}
     */
    function (char) {
        return this._currentDefinitions[char] || null;
    };
    /**
     * The default `defaultKeyMappingFn` that maps `KeyboardEvent` into a key string.
     */
    /**
     * The default `defaultKeyMappingFn` that maps `KeyboardEvent` into a key string.
     * @private
     * @param {?} keyEvent
     * @return {?}
     */
    KeyboardControlService.prototype.defaultKeyMappingFn = /**
     * The default `defaultKeyMappingFn` that maps `KeyboardEvent` into a key string.
     * @private
     * @param {?} keyEvent
     * @return {?}
     */
    function (keyEvent) {
        return String.fromCharCode(keyEvent.keyCode);
    };
    /**
     * document's `keydown` event handler
     */
    /**
     * document's `keydown` event handler
     * @private
     * @param {?} e
     * @return {?}
     */
    KeyboardControlService.prototype.handleKeydown = /**
     * document's `keydown` event handler
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var char = this._keyMappingFn(e);
        /** @type {?} */
        var action = this.getAction(char);
        if (action) {
            /** @type {?} */
            var actionState = this._activeDefinitions[char];
            if (actionState.state !== KeyEventState.IGNORED) {
                /** @type {?} */
                var execute = true;
                /** @type {?} */
                var params = this.getParams(action.params, e);
                if (action.validation) {
                    execute = action.validation(this.cesiumService, params, e);
                }
                if (execute === true) {
                    this._activeDefinitions[char] = {
                        state: KeyEventState.PRESSED,
                        action: action,
                        keyboardEvent: e,
                    };
                }
            }
        }
    };
    /**
     * document's `keyup` event handler
     */
    /**
     * document's `keyup` event handler
     * @private
     * @param {?} e
     * @return {?}
     */
    KeyboardControlService.prototype.handleKeyup = /**
     * document's `keyup` event handler
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var char = this._keyMappingFn(e);
        /** @type {?} */
        var action = this.getAction(char);
        if (action) {
            this._activeDefinitions[char] = {
                state: KeyEventState.NOT_PRESSED,
                action: null,
                keyboardEvent: e,
            };
            if (action.done && typeof action.done === 'function') {
                action.done(this.cesiumService, e);
            }
        }
    };
    /**
     * `tick` event handler that triggered by Cesium render loop
     */
    /**
     * `tick` event handler that triggered by Cesium render loop
     * @private
     * @return {?}
     */
    KeyboardControlService.prototype.handleTick = /**
     * `tick` event handler that triggered by Cesium render loop
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var activeKeys = Object.keys(this._activeDefinitions);
        activeKeys.forEach(function (key) {
            /** @type {?} */
            var actionState = _this._activeDefinitions[key];
            if (actionState !== null && actionState.action !== null && actionState.state === KeyEventState.PRESSED) {
                _this.executeAction(actionState.action, key, actionState.keyboardEvent);
            }
        });
    };
    /**
     *
     * Params resolve function, returns object.
     * In case of params function, executes it and returns it's return value.
     *
     */
    /**
     *
     * Params resolve function, returns object.
     * In case of params function, executes it and returns it's return value.
     *
     * @private
     * @param {?} paramsDef
     * @param {?} keyboardEvent
     * @return {?}
     */
    KeyboardControlService.prototype.getParams = /**
     *
     * Params resolve function, returns object.
     * In case of params function, executes it and returns it's return value.
     *
     * @private
     * @param {?} paramsDef
     * @param {?} keyboardEvent
     * @return {?}
     */
    function (paramsDef, keyboardEvent) {
        if (!paramsDef) {
            return {};
        }
        if (typeof paramsDef === 'function') {
            return paramsDef(this.cesiumService, keyboardEvent);
        }
        return paramsDef;
    };
    /**
     *
     * Executes a given `KeyboardControlParams` object.
     *
     */
    /**
     *
     * Executes a given `KeyboardControlParams` object.
     *
     * @private
     * @param {?} execution
     * @param {?} key
     * @param {?} keyboardEvent
     * @return {?}
     */
    KeyboardControlService.prototype.executeAction = /**
     *
     * Executes a given `KeyboardControlParams` object.
     *
     * @private
     * @param {?} execution
     * @param {?} key
     * @param {?} keyboardEvent
     * @return {?}
     */
    function (execution, key, keyboardEvent) {
        if (!this._currentDefinitions) {
            return;
        }
        /** @type {?} */
        var params = this.getParams(execution.params, keyboardEvent);
        if (isNumber(execution.action)) {
            /** @type {?} */
            var predefinedAction = PREDEFINED_KEYBOARD_ACTIONS[(/** @type {?} */ (execution.action))];
            if (predefinedAction) {
                predefinedAction(this.cesiumService, params, keyboardEvent);
            }
        }
        else if (typeof execution.action === 'function') {
            /** @type {?} */
            var shouldCancelEvent = execution.action(this.cesiumService, params, keyboardEvent);
            if (shouldCancelEvent === false) {
                this._activeDefinitions[key] = {
                    state: KeyEventState.IGNORED,
                    action: null,
                    keyboardEvent: null,
                };
            }
        }
    };
    /**
     * Registers to keydown, keyup of `document`, and `tick` of Cesium.
     */
    /**
     * Registers to keydown, keyup of `document`, and `tick` of Cesium.
     * @private
     * @param {?} outsideOfAngularZone
     * @return {?}
     */
    KeyboardControlService.prototype.registerEvents = /**
     * Registers to keydown, keyup of `document`, and `tick` of Cesium.
     * @private
     * @param {?} outsideOfAngularZone
     * @return {?}
     */
    function (outsideOfAngularZone) {
        var _this = this;
        /** @type {?} */
        var registerToEvents = function () {
            _this.document.addEventListener('keydown', _this.handleKeydown);
            _this.document.addEventListener('keyup', _this.handleKeyup);
            _this.cesiumService.getViewer().clock.onTick.addEventListener(_this.handleTick);
        };
        if (outsideOfAngularZone) {
            this.ngZone.runOutsideAngular(registerToEvents);
        }
        else {
            registerToEvents();
        }
    };
    /**
     * Unregisters to keydown, keyup of `document`, and `tick` of Cesium.
     */
    /**
     * Unregisters to keydown, keyup of `document`, and `tick` of Cesium.
     * @private
     * @return {?}
     */
    KeyboardControlService.prototype.unregisterEvents = /**
     * Unregisters to keydown, keyup of `document`, and `tick` of Cesium.
     * @private
     * @return {?}
     */
    function () {
        this.document.removeEventListener('keydown', this.handleKeydown);
        this.document.removeEventListener('keyup', this.handleKeyup);
        this.cesiumService.getViewer().clock.onTick.removeEventListener(this.handleTick);
    };
    KeyboardControlService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    KeyboardControlService.ctorParameters = function () { return [
        { type: NgZone },
        { type: CesiumService },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    return KeyboardControlService;
}());
export { KeyboardControlService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    KeyboardControlService.prototype._currentDefinitions;
    /**
     * @type {?}
     * @private
     */
    KeyboardControlService.prototype._activeDefinitions;
    /**
     * @type {?}
     * @private
     */
    KeyboardControlService.prototype._keyMappingFn;
    /**
     * @type {?}
     * @private
     */
    KeyboardControlService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    KeyboardControlService.prototype.cesiumService;
    /**
     * @type {?}
     * @private
     */
    KeyboardControlService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,