/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { merge, of as observableOf, Subject } from 'rxjs';
import { filter, map, mergeMap, switchMap, takeUntil, tap } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { CesiumService } from '../cesium/cesium.service';
import { CesiumEventBuilder } from './cesium-event-builder';
import { PickOptions } from './consts/pickOptions.enum';
import { CesiumEvent } from './consts/cesium-event.enum';
import { PlonterService } from '../plonter/plonter.service';
import { UtilsService } from '../../utils/utils.service';
import { CesiumDragDropHelper } from './event-observers/cesium-drag-drop-helper';
var Registration = /** @class */ (function () {
    function Registration(observable, stopper, priority, isPaused) {
        this.observable = observable;
        this.stopper = stopper;
        this.priority = priority;
        this.isPaused = isPaused;
    }
    return Registration;
}());
if (false) {
    /** @type {?} */
    Registration.prototype.observable;
    /** @type {?} */
    Registration.prototype.stopper;
    /** @type {?} */
    Registration.prototype.priority;
    /** @type {?} */
    Registration.prototype.isPaused;
}
/**
 * Returns screen position, drag boolean for drag events only
 * @record
 */
export function Movement() { }
if (false) {
    /** @type {?} */
    Movement.prototype.startPosition;
    /** @type {?} */
    Movement.prototype.endPosition;
    /** @type {?|undefined} */
    Movement.prototype.drop;
}
/**
 * @record
 */
export function EventResult() { }
if (false) {
    /** @type {?} */
    EventResult.prototype.movement;
    /** @type {?} */
    EventResult.prototype.cesiumEntities;
    /** @type {?} */
    EventResult.prototype.entities;
}
/**
 * Manages all map events. Notice events will run outside of Angular zone.
 * Provided by `<ac-map/>` component there for could be injected at any component under `<ac-map/>` hierarchy
 * or from the `<ac-map/>` component reference `acMapComponent.getMapEventsManager()`
 *
 * __usage:__
 * ```
 * MapEventsManagerService.register({event, modifier, priority, entityType, pickOption}).subscribe()
 * ```
 * __param:__ {CesiumEvent} event
 * __param:__ {CesiumEventModifier} modifier
 * __param:__ priority - the bigger the number the bigger the priority. default : 0.
 * __param:__ entityType - entity type class that you are interested like (Track). the class must extends AcEntity
 * __param:__ pickOption - self explained
 */
var MapEventsManagerService = /** @class */ (function () {
    function MapEventsManagerService(cesiumService, eventBuilder, plonterService) {
        this.cesiumService = cesiumService;
        this.eventBuilder = eventBuilder;
        this.plonterService = plonterService;
        this.eventRegistrations = new Map();
    }
    /**
     * @return {?}
     */
    MapEventsManagerService.prototype.init = /**
     * @return {?}
     */
    function () {
        this.eventBuilder.init();
        this.scene = this.cesiumService.getScene();
    };
    /**
     * Register to map event
     * @param input Event Registration Input
     *
     * @returns DisposableObservable<EventResult>
     */
    /**
     * Register to map event
     * @param {?} input Event Registration Input
     *
     * @return {?} DisposableObservable<EventResult>
     */
    MapEventsManagerService.prototype.register = /**
     * Register to map event
     * @param {?} input Event Registration Input
     *
     * @return {?} DisposableObservable<EventResult>
     */
    function (input) {
        var _this = this;
        if (this.scene === undefined) {
            throw new Error('CesiumService has not been initialized yet - MapEventsManagerService must be injected  under ac-map');
        }
        input.pick = input.pick || PickOptions.NO_PICK;
        input.priority = input.priority || 0;
        if (input.entityType && input.pick === PickOptions.NO_PICK) {
            throw new Error('MapEventsManagerService: can\'t register an event ' +
                'with entityType and PickOptions.NO_PICK - It doesn\'t make sense ');
        }
        /** @type {?} */
        var eventName = CesiumEventBuilder.getEventFullName(input.event, input.modifier);
        if (!this.eventRegistrations.has(eventName)) {
            this.eventRegistrations.set(eventName, []);
        }
        /** @type {?} */
        var eventRegistration = this.createEventRegistration(input.event, input.modifier, input.entityType, input.pick, input.priority, input.pickFilter);
        /** @type {?} */
        var registrationObservable = eventRegistration.observable;
        registrationObservable.dispose = function () { return _this.disposeObservable(eventRegistration, eventName); };
        this.eventRegistrations.get(eventName).push(eventRegistration);
        this.sortRegistrationsByPriority(eventName);
        return (/** @type {?} */ (registrationObservable));
    };
    /**
     * @private
     * @param {?} eventRegistration
     * @param {?} eventName
     * @return {?}
     */
    MapEventsManagerService.prototype.disposeObservable = /**
     * @private
     * @param {?} eventRegistration
     * @param {?} eventName
     * @return {?}
     */
    function (eventRegistration, eventName) {
        eventRegistration.stopper.next(1);
        /** @type {?} */
        var registrations = this.eventRegistrations.get(eventName);
        /** @type {?} */
        var index = registrations.indexOf(eventRegistration);
        if (index !== -1) {
            registrations.splice(index, 1);
        }
        this.sortRegistrationsByPriority(eventName);
    };
    /**
     * @private
     * @param {?} eventName
     * @return {?}
     */
    MapEventsManagerService.prototype.sortRegistrationsByPriority = /**
     * @private
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        /** @type {?} */
        var registrations = this.eventRegistrations.get(eventName);
        registrations.sort(function (a, b) { return b.priority - a.priority; });
        if (registrations.length === 0) {
            return;
        }
        // Active registrations by priority
        /** @type {?} */
        var currentPriority = registrations[0].priority;
        registrations.forEach(function (registration) {
            registration.isPaused = registration.priority < currentPriority;
        });
    };
    /**
     * @private
     * @param {?} event
     * @param {?} modifier
     * @param {?} entityType
     * @param {?} pickOption
     * @param {?} priority
     * @param {?=} pickFilter
     * @return {?}
     */
    MapEventsManagerService.prototype.createEventRegistration = /**
     * @private
     * @param {?} event
     * @param {?} modifier
     * @param {?} entityType
     * @param {?} pickOption
     * @param {?} priority
     * @param {?=} pickFilter
     * @return {?}
     */
    function (event, modifier, entityType, pickOption, priority, pickFilter) {
        var _this = this;
        /** @type {?} */
        var cesiumEventObservable = this.eventBuilder.get(event, modifier);
        /** @type {?} */
        var stopper = new Subject();
        /** @type {?} */
        var registration = new Registration(undefined, stopper, priority, false);
        /** @type {?} */
        var observable;
        if (!CesiumDragDropHelper.dragEvents.has(event)) {
            observable = cesiumEventObservable.pipe(filter(function () { return !registration.isPaused; }), map(function (movement) { return _this.triggerPick(movement, pickOption); }), filter(function (result) { return result.cesiumEntities !== null || entityType === undefined; }), map(function (picksAndMovement) { return _this.addEntities(picksAndMovement, entityType, pickOption, pickFilter); }), filter(function (result) { return result.entities !== null || (entityType === undefined && !pickFilter); }), switchMap(function (entitiesAndMovement) { return _this.plonter(entitiesAndMovement, pickOption); }), takeUntil(stopper));
        }
        else {
            observable = this.createDragEvent(event, modifier, entityType, pickOption, priority, pickFilter).pipe(takeUntil(stopper));
        }
        registration.observable = observable;
        return registration;
    };
    /**
     * @private
     * @param {?} event
     * @param {?} modifier
     * @param {?} entityType
     * @param {?} pickOption
     * @param {?} priority
     * @param {?=} pickFilter
     * @return {?}
     */
    MapEventsManagerService.prototype.createDragEvent = /**
     * @private
     * @param {?} event
     * @param {?} modifier
     * @param {?} entityType
     * @param {?} pickOption
     * @param {?} priority
     * @param {?=} pickFilter
     * @return {?}
     */
    function (event, modifier, entityType, pickOption, priority, pickFilter) {
        var _a = CesiumDragDropHelper.getDragEventTypes(event), mouseDownEvent = _a.mouseDownEvent, mouseUpEvent = _a.mouseUpEvent;
        /** @type {?} */
        var mouseUpObservable = this.eventBuilder.get(mouseUpEvent);
        /** @type {?} */
        var mouseMoveObservable = this.eventBuilder.get(CesiumEvent.MOUSE_MOVE);
        /** @type {?} */
        var mouseDownRegistration = this.createEventRegistration(mouseDownEvent, modifier, entityType, pickOption, priority, pickFilter);
        /** @type {?} */
        var dropSubject = new Subject();
        /** @type {?} */
        var dragObserver = mouseDownRegistration.observable.pipe(mergeMap(function (e) {
            /** @type {?} */
            var lastMove = null;
            /** @type {?} */
            var dragStartPositionX = e.movement.startPosition.x;
            /** @type {?} */
            var dragStartPositionY = e.movement.startPosition.y;
            return mouseMoveObservable.pipe(map(function (movement) {
                lastMove = {
                    movement: {
                        drop: false,
                        startPosition: {
                            x: dragStartPositionX,
                            y: dragStartPositionY,
                        },
                        endPosition: movement.endPosition,
                    },
                    entities: e.entities,
                    cesiumEntities: e.cesiumEntities
                };
                return lastMove;
            }), takeUntil(mouseUpObservable), tap(undefined, undefined, function () {
                // On complete
                if (lastMove) {
                    /** @type {?} */
                    var dropEvent = Object.assign({}, lastMove);
                    dropEvent.movement.drop = true;
                    dropSubject.next(dropEvent);
                }
            }));
        }));
        return merge(dragObserver, dropSubject);
    };
    /**
     * @private
     * @param {?} movement
     * @param {?} pickOptions
     * @return {?}
     */
    MapEventsManagerService.prototype.triggerPick = /**
     * @private
     * @param {?} movement
     * @param {?} pickOptions
     * @return {?}
     */
    function (movement, pickOptions) {
        /** @type {?} */
        var picks = [];
        switch (pickOptions) {
            case PickOptions.PICK_ONE:
            case PickOptions.PICK_ALL:
                picks = this.scene.drillPick(movement.endPosition);
                picks = picks.length === 0 ? null : picks;
                break;
            case PickOptions.PICK_FIRST:
                /** @type {?} */
                var pick = this.scene.pick(movement.endPosition);
                picks = pick === undefined ? null : [pick];
                break;
            case PickOptions.NO_PICK:
                break;
            default:
                break;
        }
        // Picks can be cesium entity or cesium primitive
        if (picks) {
            picks = picks.map(function (pick) { return pick.id && pick.id instanceof Cesium.Entity ? pick.id : pick.primitive; });
        }
        return { movement: movement, cesiumEntities: picks };
    };
    /**
     * @private
     * @param {?} picksAndMovement
     * @param {?} entityType
     * @param {?} pickOption
     * @param {?=} pickFilter
     * @return {?}
     */
    MapEventsManagerService.prototype.addEntities = /**
     * @private
     * @param {?} picksAndMovement
     * @param {?} entityType
     * @param {?} pickOption
     * @param {?=} pickFilter
     * @return {?}
     */
    function (picksAndMovement, entityType, pickOption, pickFilter) {
        if (picksAndMovement.cesiumEntities === null) {
            picksAndMovement.entities = null;
            return picksAndMovement;
        }
        /** @type {?} */
        var entities = [];
        if (pickOption !== PickOptions.NO_PICK) {
            if (entityType) {
                entities = picksAndMovement.cesiumEntities.map(function (pick) { return pick.acEntity; }).filter(function (acEntity) {
                    return acEntity && acEntity instanceof entityType;
                });
            }
            else {
                entities = picksAndMovement.cesiumEntities.map(function (pick) { return pick.acEntity; });
            }
            entities = UtilsService.unique(entities);
            entities = (pickFilter && entities) ? entities.filter(pickFilter) : entities;
            if (entities.length === 0) {
                entities = null;
            }
        }
        picksAndMovement.entities = entities;
        return picksAndMovement;
    };
    /**
     * @private
     * @param {?} entitiesAndMovement
     * @param {?} pickOption
     * @return {?}
     */
    MapEventsManagerService.prototype.plonter = /**
     * @private
     * @param {?} entitiesAndMovement
     * @param {?} pickOption
     * @return {?}
     */
    function (entitiesAndMovement, pickOption) {
        if (pickOption === PickOptions.PICK_ONE && entitiesAndMovement.entities !== null && entitiesAndMovement.entities.length > 1) {
            return this.plonterService.plonterIt(entitiesAndMovement);
        }
        else {
            return observableOf(entitiesAndMovement);
        }
    };
    MapEventsManagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MapEventsManagerService.ctorParameters = function () { return [
        { type: CesiumService },
        { type: CesiumEventBuilder },
        { type: PlonterService }
    ]; };
    return MapEventsManagerService;
}());
export { MapEventsManagerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MapEventsManagerService.prototype.scene;
    /**
     * @type {?}
     * @private
     */
    MapEventsManagerService.prototype.eventRegistrations;
    /**
     * @type {?}
     * @private
     */
    MapEventsManagerService.prototype.cesiumService;
    /**
     * @type {?}
     * @private
     */
    MapEventsManagerService.prototype.eventBuilder;
    /**
     * @type {?}
     * @private
     */
    MapEventsManagerService.prototype.plonterService;
}
//# sourceMappingURL=data:application/json;base64,