/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 *  The service manages `ac-map` instances. `ac-map` register itself to this service.
 *  This allows retrieval of maps provided services outside of `ac-map` scope.
 */
var MapsManagerService = /** @class */ (function () {
    function MapsManagerService() {
        this.defaultIdCounter = 0;
        this._Maps = new Map();
        this.eventRemoveCallbacks = [];
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    MapsManagerService.prototype.getMap = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (!id) {
            return this.firstMap;
        }
        return this._Maps.get(id);
    };
    /**
     * @param {?} id
     * @param {?} acMap
     * @return {?}
     */
    MapsManagerService.prototype._registerMap = /**
     * @param {?} id
     * @param {?} acMap
     * @return {?}
     */
    function (id, acMap) {
        if (!this.firstMap) {
            this.firstMap = acMap;
        }
        /** @type {?} */
        var mapId = id ? id : this.generateDefaultId();
        if (this._Maps.has(mapId)) {
            throw new Error("Map with id: " + mapId + " already exist");
        }
        this._Maps.set(mapId, acMap);
        return mapId;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    MapsManagerService.prototype._removeMapById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this._Maps.delete(id);
    };
    /**
     * @private
     * @return {?}
     */
    MapsManagerService.prototype.generateDefaultId = /**
     * @private
     * @return {?}
     */
    function () {
        this.defaultIdCounter++;
        return 'default-map-id-' + this.defaultIdCounter;
    };
    /**
     * Binds multiple 2D map's cameras together.
     * @param mapsConfiguration - binding options.
     * mapId - the id of the maps to bind.
     * sensitivity - the amount the camera position should change in order to sync other maps.
     * bindZoom - should bind zoom level
     */
    /**
     * Binds multiple 2D map's cameras together.
     * @param {?} mapsConfiguration - binding options.
     * mapId - the id of the maps to bind.
     * sensitivity - the amount the camera position should change in order to sync other maps.
     * bindZoom - should bind zoom level
     * @return {?}
     */
    MapsManagerService.prototype.sync2DMapsCameras = /**
     * Binds multiple 2D map's cameras together.
     * @param {?} mapsConfiguration - binding options.
     * mapId - the id of the maps to bind.
     * sensitivity - the amount the camera position should change in order to sync other maps.
     * bindZoom - should bind zoom level
     * @return {?}
     */
    function (mapsConfiguration) {
        var _this = this;
        /** @type {?} */
        var DEFAULT_SENSITIVITY = 0.01;
        this.unsyncMapsCameras();
        /** @type {?} */
        var maps = mapsConfiguration.map(function (config) {
            /** @type {?} */
            var map = _this.getMap(config.id);
            if (!map) {
                throw new Error("Couldn't find map with id: " + config.id);
            }
            return { map: map, options: { sensitivity: config.sensitivity, bindZoom: config.bindZoom } };
        });
        maps.forEach(function (masterMapConfig) {
            /** @type {?} */
            var masterMap = masterMapConfig.map;
            /** @type {?} */
            var options = masterMapConfig.options;
            /** @type {?} */
            var masterCamera = masterMap.getCameraService().getCamera();
            /** @type {?} */
            var masterCameraCartographic = masterCamera.positionCartographic;
            masterCamera.percentageChanged = options.sensitivity || DEFAULT_SENSITIVITY;
            /** @type {?} */
            var removeCallback = masterCamera.changed.addEventListener(function () {
                maps.forEach(function (slaveMapConfig) {
                    /** @type {?} */
                    var slaveMap = slaveMapConfig.map;
                    /** @type {?} */
                    var slaveMapOptions = slaveMapConfig.options;
                    if (slaveMap === masterMap) {
                        return;
                    }
                    /** @type {?} */
                    var slaveCamera = slaveMap.getCameraService().getCamera();
                    /** @type {?} */
                    var slaveCameraCartographic = slaveCamera.positionCartographic;
                    /** @type {?} */
                    var position = Cesium.Ellipsoid.WGS84.cartographicToCartesian({
                        longitude: masterCameraCartographic.longitude,
                        latitude: masterCameraCartographic.latitude,
                        height: slaveMapOptions.bindZoom ? masterCameraCartographic.height : slaveCameraCartographic.height,
                    });
                    if (slaveMap.getCesiumViewer().scene.mode !== Cesium.SceneMode.MORPHING) {
                        slaveCamera.setView({
                            destination: position,
                            orientation: {
                                heading: slaveCamera.heading,
                                pitch: slaveCamera.pitch,
                            },
                        });
                    }
                });
            });
            _this.eventRemoveCallbacks.push(removeCallback);
        });
    };
    /**
     * Unsyncs maps cameras
     */
    /**
     * Unsyncs maps cameras
     * @return {?}
     */
    MapsManagerService.prototype.unsyncMapsCameras = /**
     * Unsyncs maps cameras
     * @return {?}
     */
    function () {
        this.eventRemoveCallbacks.forEach(function (removeCallback) { return removeCallback(); });
        this.eventRemoveCallbacks = [];
    };
    MapsManagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MapsManagerService.ctorParameters = function () { return []; };
    return MapsManagerService;
}());
export { MapsManagerService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    MapsManagerService.prototype.defaultIdCounter;
    /**
     * @type {?}
     * @private
     */
    MapsManagerService.prototype._Maps;
    /**
     * @type {?}
     * @private
     */
    MapsManagerService.prototype.firstMap;
    /**
     * @type {?}
     * @private
     */
    MapsManagerService.prototype.eventRemoveCallbacks;
}
//# sourceMappingURL=data:application/json;base64,