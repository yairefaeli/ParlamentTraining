/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Optional } from '@angular/core';
import { ViewerFactory } from '../viewer-factory/viewer-factory.service';
import { ViewerConfiguration } from '../viewer-configuration/viewer-configuration.service';
/**
 *  Service that initialize cesium viewer and expose cesium viewer and scene.
 */
var CesiumService = /** @class */ (function () {
    function CesiumService(ngZone, viewerFactory, viewerConfiguration) {
        this.ngZone = ngZone;
        this.viewerFactory = viewerFactory;
        this.viewerConfiguration = viewerConfiguration;
    }
    /**
     * @param {?} mapContainer
     * @param {?} map
     * @return {?}
     */
    CesiumService.prototype.init = /**
     * @param {?} mapContainer
     * @param {?} map
     * @return {?}
     */
    function (mapContainer, map) {
        var _this = this;
        this.map = map;
        this.ngZone.runOutsideAngular(function () {
            /** @type {?} */
            var options = _this.viewerConfiguration ? _this.viewerConfiguration.getNextViewerOptions() : undefined;
            _this.cesiumViewer = _this.viewerFactory.createViewer(mapContainer, options);
            /** @type {?} */
            var viewerModifier = _this.viewerConfiguration && _this.viewerConfiguration.getNextViewerModifier();
            if (typeof viewerModifier === 'function') {
                viewerModifier(_this.cesiumViewer);
            }
        });
    };
    /**
     * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewe
     * @returns cesiumViewer
     */
    /**
     * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewe
     * @return {?} cesiumViewer
     */
    CesiumService.prototype.getViewer = /**
     * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Viewer.html?classFilter=viewe
     * @return {?} cesiumViewer
     */
    function () {
        return this.cesiumViewer;
    };
    /**
     * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Scene.html?classFilter=scene
     * @returns cesium scene
     */
    /**
     * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Scene.html?classFilter=scene
     * @return {?} cesium scene
     */
    CesiumService.prototype.getScene = /**
     * For more information see https://cesiumjs.org/Cesium/Build/Documentation/Scene.html?classFilter=scene
     * @return {?} cesium scene
     */
    function () {
        return this.cesiumViewer.scene;
    };
    /**
     * For more information see https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API
     * @returns cesium canvas
     */
    /**
     * For more information see https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API
     * @return {?} cesium canvas
     */
    CesiumService.prototype.getCanvas = /**
     * For more information see https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API
     * @return {?} cesium canvas
     */
    function () {
        return (/** @type {?} */ (this.cesiumViewer.canvas));
    };
    /**
     * @return {?}
     */
    CesiumService.prototype.getMap = /**
     * @return {?}
     */
    function () {
        return this.map;
    };
    CesiumService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CesiumService.ctorParameters = function () { return [
        { type: NgZone },
        { type: ViewerFactory },
        { type: ViewerConfiguration, decorators: [{ type: Optional }] }
    ]; };
    return CesiumService;
}());
export { CesiumService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CesiumService.prototype.cesiumViewer;
    /**
     * @type {?}
     * @private
     */
    CesiumService.prototype.map;
    /**
     * @type {?}
     * @private
     */
    CesiumService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    CesiumService.prototype.viewerFactory;
    /**
     * @type {?}
     * @private
     */
    CesiumService.prototype.viewerConfiguration;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VzaXVtLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWNlc2l1bS8iLCJzb3VyY2VzIjpbImxpYi9hbmd1bGFyLWNlc2l1bS9zZXJ2aWNlcy9jZXNpdW0vY2VzaXVtLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDekUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sc0RBQXNELENBQUM7Ozs7QUFNM0Y7SUFLRSx1QkFBb0IsTUFBYyxFQUFVLGFBQTRCLEVBQXNCLG1CQUF3QztRQUFsSCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFBc0Isd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtJQUN0SSxDQUFDOzs7Ozs7SUFFRCw0QkFBSTs7Ozs7SUFBSixVQUFLLFlBQXlCLEVBQUUsR0FBbUI7UUFBbkQsaUJBV0M7UUFWQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUM7O2dCQUN0QixPQUFPLEdBQUcsS0FBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsbUJBQW1CLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztZQUN0RyxLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQzs7Z0JBRXJFLGNBQWMsR0FBRyxLQUFJLENBQUMsbUJBQW1CLElBQUksS0FBSSxDQUFDLG1CQUFtQixDQUFDLHFCQUFxQixFQUFFO1lBQ25HLElBQUksT0FBTyxjQUFjLEtBQUssVUFBVSxFQUFFO2dCQUN4QyxjQUFjLENBQUMsS0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ25DO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHOzs7OztJQUNILGlDQUFTOzs7O0lBQVQ7UUFDRSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7SUFDSCxnQ0FBUTs7OztJQUFSO1FBQ0UsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQ7OztPQUdHOzs7OztJQUNILGlDQUFTOzs7O0lBQVQ7UUFDRSxPQUFPLG1CQUFBLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFxQixDQUFDO0lBQ3ZELENBQUM7Ozs7SUFFRCw4QkFBTTs7O0lBQU47UUFDRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQzs7Z0JBL0NGLFVBQVU7Ozs7Z0JBUlUsTUFBTTtnQkFDbEIsYUFBYTtnQkFDYixtQkFBbUIsdUJBV2lELFFBQVE7O0lBMkNyRixvQkFBQztDQUFBLEFBaERELElBZ0RDO1NBL0NZLGFBQWE7Ozs7OztJQUN4QixxQ0FBMEI7Ozs7O0lBQzFCLDRCQUE0Qjs7Ozs7SUFFaEIsK0JBQXNCOzs7OztJQUFFLHNDQUFvQzs7Ozs7SUFBRSw0Q0FBNEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBWaWV3ZXJGYWN0b3J5IH0gZnJvbSAnLi4vdmlld2VyLWZhY3Rvcnkvdmlld2VyLWZhY3Rvcnkuc2VydmljZSc7XG5pbXBvcnQgeyBWaWV3ZXJDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vdmlld2VyLWNvbmZpZ3VyYXRpb24vdmlld2VyLWNvbmZpZ3VyYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBBY01hcENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvYWMtbWFwL2FjLW1hcC5jb21wb25lbnQnO1xuXG4vKipcbiAqICBTZXJ2aWNlIHRoYXQgaW5pdGlhbGl6ZSBjZXNpdW0gdmlld2VyIGFuZCBleHBvc2UgY2VzaXVtIHZpZXdlciBhbmQgc2NlbmUuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDZXNpdW1TZXJ2aWNlIHtcbiAgcHJpdmF0ZSBjZXNpdW1WaWV3ZXI6IGFueTtcbiAgcHJpdmF0ZSBtYXA6IEFjTWFwQ29tcG9uZW50O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgdmlld2VyRmFjdG9yeTogVmlld2VyRmFjdG9yeSwgQE9wdGlvbmFsKCkgcHJpdmF0ZSB2aWV3ZXJDb25maWd1cmF0aW9uOiBWaWV3ZXJDb25maWd1cmF0aW9uKSB7XG4gIH1cblxuICBpbml0KG1hcENvbnRhaW5lcjogSFRNTEVsZW1lbnQsIG1hcDogQWNNYXBDb21wb25lbnQpIHtcbiAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBjb25zdCBvcHRpb25zID0gdGhpcy52aWV3ZXJDb25maWd1cmF0aW9uID8gdGhpcy52aWV3ZXJDb25maWd1cmF0aW9uLmdldE5leHRWaWV3ZXJPcHRpb25zKCkgOiB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmNlc2l1bVZpZXdlciA9IHRoaXMudmlld2VyRmFjdG9yeS5jcmVhdGVWaWV3ZXIobWFwQ29udGFpbmVyLCBvcHRpb25zKTtcblxuICAgICAgY29uc3Qgdmlld2VyTW9kaWZpZXIgPSB0aGlzLnZpZXdlckNvbmZpZ3VyYXRpb24gJiYgdGhpcy52aWV3ZXJDb25maWd1cmF0aW9uLmdldE5leHRWaWV3ZXJNb2RpZmllcigpO1xuICAgICAgaWYgKHR5cGVvZiB2aWV3ZXJNb2RpZmllciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2aWV3ZXJNb2RpZmllcih0aGlzLmNlc2l1bVZpZXdlcik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24gc2VlIGh0dHBzOi8vY2VzaXVtanMub3JnL0Nlc2l1bS9CdWlsZC9Eb2N1bWVudGF0aW9uL1ZpZXdlci5odG1sP2NsYXNzRmlsdGVyPXZpZXdlXG4gICAqIEByZXR1cm5zIGNlc2l1bVZpZXdlclxuICAgKi9cbiAgZ2V0Vmlld2VyKCkge1xuICAgIHJldHVybiB0aGlzLmNlc2l1bVZpZXdlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly9jZXNpdW1qcy5vcmcvQ2VzaXVtL0J1aWxkL0RvY3VtZW50YXRpb24vU2NlbmUuaHRtbD9jbGFzc0ZpbHRlcj1zY2VuZVxuICAgKiBAcmV0dXJucyBjZXNpdW0gc2NlbmVcbiAgICovXG4gIGdldFNjZW5lKCkge1xuICAgIHJldHVybiB0aGlzLmNlc2l1bVZpZXdlci5zY2VuZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NhbnZhc19BUElcbiAgICogQHJldHVybnMgY2VzaXVtIGNhbnZhc1xuICAgKi9cbiAgZ2V0Q2FudmFzKCk6IEhUTUxDYW52YXNFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5jZXNpdW1WaWV3ZXIuY2FudmFzIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuICB9XG5cbiAgZ2V0TWFwKCk6IEFjTWFwQ29tcG9uZW50IHtcbiAgICByZXR1cm4gdGhpcy5tYXA7XG4gIH1cbn1cbiJdfQ==