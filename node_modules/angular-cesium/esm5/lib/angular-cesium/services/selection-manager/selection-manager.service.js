/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { filter, map } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { CesiumEvent } from '../map-events-mananger/consts/cesium-event.enum';
import { PickOptions } from '../map-events-mananger/consts/pickOptions.enum';
import { MapsManagerService } from '../maps-manager/maps-manager.service';
/**
 * @record
 */
export function SelectionOptions() { }
if (false) {
    /** @type {?|undefined} */
    SelectionOptions.prototype.event;
    /** @type {?|undefined} */
    SelectionOptions.prototype.modifier;
    /** @type {?|undefined} */
    SelectionOptions.prototype.entityType;
}
/**
 * Manages entity selection service for any given mouse event and modifier
 * the service will manage the list of selected items.
 * check out the example
 * you must provide the service yourself
 *
 *  __Usage :__
 * ```
 * // provide the service in some component
 * \@Component({
 * //...
 *  providers: [SelectionManagerService]
 * }
 *
 * // Usage example:
 * // init selection
 * const selectedIndicator = ture; // optional default true, if true a boolean "selected" property will be added to the selected entity
 * selectionManagerService.initSelection({ event: CesiumEvent.LEFT_CLICK,
 * 																			modifier: CesiumEventModifier.CTRL
 * 																		},selectedIndicator);
 * // Get selected
 * const selected = selectionManagerService.selected();
 *
 * // Or as observer
 * const selected$ = selectionManagerService.selected$();
 *
 * ```
 *
 */
var SelectionManagerService = /** @class */ (function () {
    function SelectionManagerService(mapsManager) {
        this.mapsManager = mapsManager;
        this.selectedEntitiesItems$ = new BehaviorSubject([]);
        this.selectedEntitySubject$ = new Subject();
    }
    /**
     * @return {?}
     */
    SelectionManagerService.prototype.selectedEntities$ = /**
     * @return {?}
     */
    function () {
        return this.selectedEntitiesItems$.asObservable();
    };
    /**
     * @return {?}
     */
    SelectionManagerService.prototype.selectedEntities = /**
     * @return {?}
     */
    function () {
        return this.selectedEntitiesItems$.getValue();
    };
    /**
     * @return {?}
     */
    SelectionManagerService.prototype.selectedEntity$ = /**
     * @return {?}
     */
    function () {
        return this.selectedEntitySubject$;
    };
    /**
     * @param {?} entity
     * @param {?} addSelectedIndicator
     * @return {?}
     */
    SelectionManagerService.prototype.toggleSelection = /**
     * @param {?} entity
     * @param {?} addSelectedIndicator
     * @return {?}
     */
    function (entity, addSelectedIndicator) {
        /** @type {?} */
        var current = this.selectedEntities();
        if (current.indexOf(entity) === -1) {
            this.addToSelected(entity, addSelectedIndicator);
        }
        else {
            this.removeSelected(entity, addSelectedIndicator);
        }
    };
    /**
     * @private
     * @param {?} entity
     * @param {?} addSelectedIndicator
     * @return {?}
     */
    SelectionManagerService.prototype.addToSelected = /**
     * @private
     * @param {?} entity
     * @param {?} addSelectedIndicator
     * @return {?}
     */
    function (entity, addSelectedIndicator) {
        if (addSelectedIndicator) {
            entity['selected'] = true;
        }
        /** @type {?} */
        var current = this.selectedEntities();
        this.selectedEntitySubject$.next(entity);
        this.selectedEntitiesItems$.next(tslib_1.__spread(current, [entity]));
    };
    /**
     * @private
     * @param {?} entity
     * @param {?} addSelectedIndicator
     * @return {?}
     */
    SelectionManagerService.prototype.removeSelected = /**
     * @private
     * @param {?} entity
     * @param {?} addSelectedIndicator
     * @return {?}
     */
    function (entity, addSelectedIndicator) {
        if (addSelectedIndicator) {
            entity['selected'] = false;
        }
        /** @type {?} */
        var current = this.selectedEntities();
        /** @type {?} */
        var entityIndex = current.indexOf(entity);
        if (entityIndex !== -1) {
            current.splice(entityIndex, 1);
            this.selectedEntitiesItems$.next(current);
            this.selectedEntitySubject$.next(entity);
        }
    };
    /**
     * @param {?=} selectionOptions
     * @param {?=} addSelectedIndicator
     * @param {?=} eventPriority
     * @param {?=} mapId
     * @return {?}
     */
    SelectionManagerService.prototype.initSelection = /**
     * @param {?=} selectionOptions
     * @param {?=} addSelectedIndicator
     * @param {?=} eventPriority
     * @param {?=} mapId
     * @return {?}
     */
    function (selectionOptions, addSelectedIndicator, eventPriority, mapId) {
        var _this = this;
        if (addSelectedIndicator === void 0) { addSelectedIndicator = true; }
        /** @type {?} */
        var mapComponent = this.mapsManager.getMap(mapId);
        if (!mapComponent) {
            return;
        }
        this.mapEventsManagerService = mapComponent.getMapEventsManager();
        if (!selectionOptions) {
            Object.assign(selectionOptions, { event: CesiumEvent.LEFT_CLICK });
        }
        /** @type {?} */
        var eventSubscription = this.mapEventsManagerService.register({
            event: selectionOptions.event,
            pick: PickOptions.PICK_ONE,
            modifier: selectionOptions.modifier,
            entityType: selectionOptions.entityType,
            priority: eventPriority,
        });
        eventSubscription.pipe(map(function (result) { return result.entities; }), filter(function (entities) { return entities && entities.length > 0; }))
            .subscribe(function (entities) {
            /** @type {?} */
            var entity = entities[0];
            _this.toggleSelection(entity, addSelectedIndicator);
        });
    };
    SelectionManagerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SelectionManagerService.ctorParameters = function () { return [
        { type: MapsManagerService }
    ]; };
    return SelectionManagerService;
}());
export { SelectionManagerService };
if (false) {
    /** @type {?} */
    SelectionManagerService.prototype.selectedEntitiesItems$;
    /** @type {?} */
    SelectionManagerService.prototype.selectedEntitySubject$;
    /**
     * @type {?}
     * @private
     */
    SelectionManagerService.prototype.mapEventsManagerService;
    /**
     * @type {?}
     * @private
     */
    SelectionManagerService.prototype.mapsManager;
}
//# sourceMappingURL=data:application/json;base64,