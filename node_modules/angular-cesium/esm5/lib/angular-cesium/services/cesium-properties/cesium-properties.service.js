/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { JsonMapper } from '../json-mapper/json-mapper.service';
import { Parse } from 'angular2parse';
import { SmartAssigner } from '../smart-assigner/smart-assigner.service';
var CesiumProperties = /** @class */ (function () {
    function CesiumProperties(_parser, _jsonMapper) {
        this._parser = _parser;
        this._jsonMapper = _jsonMapper;
        this._assignersCache = new Map();
        this._evaluatorsCache = new Map();
    }
    /**
     * @param {?} expression
     * @param {?=} withCache
     * @return {?}
     */
    CesiumProperties.prototype._compile = /**
     * @param {?} expression
     * @param {?=} withCache
     * @return {?}
     */
    function (expression, withCache) {
        var _this = this;
        if (withCache === void 0) { withCache = true; }
        /** @type {?} */
        var cesiumDesc = {};
        /** @type {?} */
        var propsMap = new Map();
        /** @type {?} */
        var resultMap = this._jsonMapper.map(expression);
        resultMap.forEach(function (resultExpression, prop) { return propsMap.set(prop, {
            expression: resultExpression,
            get: _this._parser.eval(resultExpression)
        }); });
        propsMap.forEach(function (value, prop) {
            if (withCache) {
                cesiumDesc[prop || 'undefined'] = "cache.get(`" + value.expression + "`, () => propsMap.get('" + prop + "').get(context))";
            }
            else {
                cesiumDesc[prop || 'undefined'] = "propsMap.get('" + prop + "').get(context)";
            }
        });
        /** @type {?} */
        var fnBody = "return " + JSON.stringify(cesiumDesc).replace(/"/g, '') + ";";
        /** @type {?} */
        var getFn = new Function('propsMap', 'cache', 'context', fnBody);
        return function evaluateCesiumProps(cache, context) {
            return getFn(propsMap, cache, context);
        };
    };
    /**
     * @param {?} expression
     * @return {?}
     */
    CesiumProperties.prototype._build = /**
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        /** @type {?} */
        var props = Array.from(this._jsonMapper.map(expression).keys());
        /** @type {?} */
        var smartAssigner = SmartAssigner.create(props);
        return function assignCesiumProps(oldVal, newVal) {
            return smartAssigner(oldVal, newVal);
        };
    };
    /**
     * @param {?} expression
     * @param {?=} withCache
     * @param {?=} newEvaluator
     * @return {?}
     */
    CesiumProperties.prototype.createEvaluator = /**
     * @param {?} expression
     * @param {?=} withCache
     * @param {?=} newEvaluator
     * @return {?}
     */
    function (expression, withCache, newEvaluator) {
        if (withCache === void 0) { withCache = true; }
        if (newEvaluator === void 0) { newEvaluator = false; }
        if (!newEvaluator && this._evaluatorsCache.has(expression)) {
            return this._evaluatorsCache.get(expression);
        }
        /** @type {?} */
        var evaluatorFn = this._compile(expression, withCache);
        this._evaluatorsCache.set(expression, evaluatorFn);
        return evaluatorFn;
    };
    /**
     * @param {?} expression
     * @return {?}
     */
    CesiumProperties.prototype.createAssigner = /**
     * @param {?} expression
     * @return {?}
     */
    function (expression) {
        if (this._assignersCache.has(expression)) {
            return this._assignersCache.get(expression);
        }
        /** @type {?} */
        var assignFn = this._build(expression);
        this._assignersCache.set(expression, assignFn);
        return assignFn;
    };
    CesiumProperties.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CesiumProperties.ctorParameters = function () { return [
        { type: Parse },
        { type: JsonMapper }
    ]; };
    return CesiumProperties;
}());
export { CesiumProperties };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CesiumProperties.prototype._assignersCache;
    /**
     * @type {?}
     * @private
     */
    CesiumProperties.prototype._evaluatorsCache;
    /**
     * @type {?}
     * @private
     */
    CesiumProperties.prototype._parser;
    /**
     * @type {?}
     * @private
     */
    CesiumProperties.prototype._jsonMapper;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VzaXVtLXByb3BlcnRpZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2VzaXVtLyIsInNvdXJjZXMiOlsibGliL2FuZ3VsYXItY2VzaXVtL3NlcnZpY2VzL2Nlc2l1bS1wcm9wZXJ0aWVzL2Nlc2l1bS1wcm9wZXJ0aWVzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBR3pFO0lBS0UsMEJBQW9CLE9BQWMsRUFDZCxXQUF1QjtRQUR2QixZQUFPLEdBQVAsT0FBTyxDQUFPO1FBQ2QsZ0JBQVcsR0FBWCxXQUFXLENBQVk7UUFKbkMsb0JBQWUsR0FBRyxJQUFJLEdBQUcsRUFBc0QsQ0FBQztRQUNoRixxQkFBZ0IsR0FBRyxJQUFJLEdBQUcsRUFBZ0UsQ0FBQztJQUluRyxDQUFDOzs7Ozs7SUFFRCxtQ0FBUTs7Ozs7SUFBUixVQUFTLFVBQWtCLEVBQUUsU0FBZ0I7UUFBN0MsaUJBeUJDO1FBekI0QiwwQkFBQSxFQUFBLGdCQUFnQjs7WUFDckMsVUFBVSxHQUFHLEVBQUU7O1lBQ2YsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFpRDs7WUFFbkUsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUVsRCxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUMsZ0JBQWdCLEVBQUUsSUFBSSxJQUFLLE9BQUEsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDL0QsVUFBVSxFQUFFLGdCQUFnQjtZQUM1QixHQUFHLEVBQUUsS0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7U0FDekMsQ0FBQyxFQUg0QyxDQUc1QyxDQUFDLENBQUM7UUFFSixRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFFLElBQUk7WUFDM0IsSUFBSSxTQUFTLEVBQUU7Z0JBQ2IsVUFBVSxDQUFDLElBQUksSUFBSSxXQUFXLENBQUMsR0FBRyxnQkFBZSxLQUFLLENBQUMsVUFBVSwrQkFBMkIsSUFBSSxxQkFBa0IsQ0FBQzthQUNwSDtpQkFBTTtnQkFDTCxVQUFVLENBQUMsSUFBSSxJQUFJLFdBQVcsQ0FBQyxHQUFHLG1CQUFpQixJQUFJLG9CQUFpQixDQUFDO2FBQzFFO1FBQ0gsQ0FBQyxDQUFDLENBQUM7O1lBRUcsTUFBTSxHQUFHLFlBQVUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxNQUFHOztZQUNsRSxLQUFLLEdBQUcsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDO1FBRWxFLE9BQU8sU0FBUyxtQkFBbUIsQ0FBQyxLQUF1QixFQUFFLE9BQWU7WUFDMUUsT0FBTyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUM7SUFDSixDQUFDOzs7OztJQUVELGlDQUFNOzs7O0lBQU4sVUFBTyxVQUFrQjs7WUFDakIsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7O1lBQzNELGFBQWEsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUVqRCxPQUFPLFNBQVMsaUJBQWlCLENBQUMsTUFBYyxFQUFFLE1BQWM7WUFDOUQsT0FBTyxhQUFhLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQztJQUNKLENBQUM7Ozs7Ozs7SUFFRCwwQ0FBZTs7Ozs7O0lBQWYsVUFBZ0IsVUFBa0IsRUFBRSxTQUFnQixFQUFFLFlBQW9CO1FBQXRDLDBCQUFBLEVBQUEsZ0JBQWdCO1FBQUUsNkJBQUEsRUFBQSxvQkFBb0I7UUFDeEUsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzFELE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM5Qzs7WUFFSyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDO1FBQ3hELElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRW5ELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQseUNBQWM7Ozs7SUFBZCxVQUFlLFVBQWtCO1FBQy9CLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDeEMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUM3Qzs7WUFFSyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDeEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRS9DLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7O2dCQWpFRixVQUFVOzs7O2dCQUpGLEtBQUs7Z0JBREwsVUFBVTs7SUF1RW5CLHVCQUFDO0NBQUEsQUFsRUQsSUFrRUM7U0FqRVksZ0JBQWdCOzs7Ozs7SUFDM0IsMkNBQXdGOzs7OztJQUN4Riw0Q0FBbUc7Ozs7O0lBRXZGLG1DQUFzQjs7Ozs7SUFDdEIsdUNBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSnNvbk1hcHBlciB9IGZyb20gJy4uL2pzb24tbWFwcGVyL2pzb24tbWFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGFyc2UgfSBmcm9tICdhbmd1bGFyMnBhcnNlJztcbmltcG9ydCB7IFNtYXJ0QXNzaWduZXIgfSBmcm9tICcuLi9zbWFydC1hc3NpZ25lci9zbWFydC1hc3NpZ25lci5zZXJ2aWNlJztcbmltcG9ydCB7IENvbXB1dGF0aW9uQ2FjaGUgfSBmcm9tICcuLi9jb21wdXRhdGlvbi1jYWNoZS9jb21wdXRhdGlvbi1jYWNoZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENlc2l1bVByb3BlcnRpZXMge1xuICBwcml2YXRlIF9hc3NpZ25lcnNDYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCAob2xkVmFsOiBPYmplY3QsIG5ld1ZhbDogT2JqZWN0KSA9PiBPYmplY3Q+KCk7XG4gIHByaXZhdGUgX2V2YWx1YXRvcnNDYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCAoY2FjaGU6IENvbXB1dGF0aW9uQ2FjaGUsIGNvbnRleHQ6IE9iamVjdCkgPT4gT2JqZWN0PigpO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX3BhcnNlcjogUGFyc2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgX2pzb25NYXBwZXI6IEpzb25NYXBwZXIpIHtcbiAgfVxuXG4gIF9jb21waWxlKGV4cHJlc3Npb246IHN0cmluZywgd2l0aENhY2hlID0gdHJ1ZSk6IChjYWNoZTogQ29tcHV0YXRpb25DYWNoZSwgY29udGV4dDogT2JqZWN0KSA9PiBPYmplY3Qge1xuICAgIGNvbnN0IGNlc2l1bURlc2MgPSB7fTtcbiAgICBjb25zdCBwcm9wc01hcCA9IG5ldyBNYXA8c3RyaW5nLCB7IGV4cHJlc3Npb246IHN0cmluZywgZ2V0OiBGdW5jdGlvbiB9PigpO1xuXG4gICAgY29uc3QgcmVzdWx0TWFwID0gdGhpcy5fanNvbk1hcHBlci5tYXAoZXhwcmVzc2lvbik7XG5cbiAgICByZXN1bHRNYXAuZm9yRWFjaCgocmVzdWx0RXhwcmVzc2lvbiwgcHJvcCkgPT4gcHJvcHNNYXAuc2V0KHByb3AsIHtcbiAgICAgIGV4cHJlc3Npb246IHJlc3VsdEV4cHJlc3Npb24sXG4gICAgICBnZXQ6IHRoaXMuX3BhcnNlci5ldmFsKHJlc3VsdEV4cHJlc3Npb24pXG4gICAgfSkpO1xuXG4gICAgcHJvcHNNYXAuZm9yRWFjaCgodmFsdWUsIHByb3ApID0+IHtcbiAgICAgIGlmICh3aXRoQ2FjaGUpIHtcbiAgICAgICAgY2VzaXVtRGVzY1twcm9wIHx8ICd1bmRlZmluZWQnXSA9IGBjYWNoZS5nZXQoXFxgJHt2YWx1ZS5leHByZXNzaW9ufVxcYCwgKCkgPT4gcHJvcHNNYXAuZ2V0KCcke3Byb3B9JykuZ2V0KGNvbnRleHQpKWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjZXNpdW1EZXNjW3Byb3AgfHwgJ3VuZGVmaW5lZCddID0gYHByb3BzTWFwLmdldCgnJHtwcm9wfScpLmdldChjb250ZXh0KWA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBmbkJvZHkgPSBgcmV0dXJuICR7SlNPTi5zdHJpbmdpZnkoY2VzaXVtRGVzYykucmVwbGFjZSgvXCIvZywgJycpfTtgO1xuICAgIGNvbnN0IGdldEZuID0gbmV3IEZ1bmN0aW9uKCdwcm9wc01hcCcsICdjYWNoZScsICdjb250ZXh0JywgZm5Cb2R5KTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBldmFsdWF0ZUNlc2l1bVByb3BzKGNhY2hlOiBDb21wdXRhdGlvbkNhY2hlLCBjb250ZXh0OiBPYmplY3QpOiBPYmplY3Qge1xuICAgICAgcmV0dXJuIGdldEZuKHByb3BzTWFwLCBjYWNoZSwgY29udGV4dCk7XG4gICAgfTtcbiAgfVxuXG4gIF9idWlsZChleHByZXNzaW9uOiBzdHJpbmcpOiAob2xkVmFsOiBPYmplY3QsIG5ld1ZhbDogT2JqZWN0KSA9PiBPYmplY3Qge1xuICAgIGNvbnN0IHByb3BzID0gQXJyYXkuZnJvbSh0aGlzLl9qc29uTWFwcGVyLm1hcChleHByZXNzaW9uKS5rZXlzKCkpO1xuICAgIGNvbnN0IHNtYXJ0QXNzaWduZXIgPSBTbWFydEFzc2lnbmVyLmNyZWF0ZShwcm9wcyk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gYXNzaWduQ2VzaXVtUHJvcHMob2xkVmFsOiBPYmplY3QsIG5ld1ZhbDogT2JqZWN0KSB7XG4gICAgICByZXR1cm4gc21hcnRBc3NpZ25lcihvbGRWYWwsIG5ld1ZhbCk7XG4gICAgfTtcbiAgfVxuXG4gIGNyZWF0ZUV2YWx1YXRvcihleHByZXNzaW9uOiBzdHJpbmcsIHdpdGhDYWNoZSA9IHRydWUsIG5ld0V2YWx1YXRvciA9IGZhbHNlKTogKGNhY2hlOiBDb21wdXRhdGlvbkNhY2hlLCBjb250ZXh0OiBPYmplY3QpID0+IE9iamVjdCB7XG4gICAgaWYgKCFuZXdFdmFsdWF0b3IgJiYgdGhpcy5fZXZhbHVhdG9yc0NhY2hlLmhhcyhleHByZXNzaW9uKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2V2YWx1YXRvcnNDYWNoZS5nZXQoZXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgY29uc3QgZXZhbHVhdG9yRm4gPSB0aGlzLl9jb21waWxlKGV4cHJlc3Npb24sIHdpdGhDYWNoZSk7XG4gICAgdGhpcy5fZXZhbHVhdG9yc0NhY2hlLnNldChleHByZXNzaW9uLCBldmFsdWF0b3JGbik7XG5cbiAgICByZXR1cm4gZXZhbHVhdG9yRm47XG4gIH1cblxuICBjcmVhdGVBc3NpZ25lcihleHByZXNzaW9uOiBzdHJpbmcpOiAob2xkVmFsOiBPYmplY3QsIG5ld1ZhbDogT2JqZWN0KSA9PiBPYmplY3Qge1xuICAgIGlmICh0aGlzLl9hc3NpZ25lcnNDYWNoZS5oYXMoZXhwcmVzc2lvbikpIHtcbiAgICAgIHJldHVybiB0aGlzLl9hc3NpZ25lcnNDYWNoZS5nZXQoZXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgY29uc3QgYXNzaWduRm4gPSB0aGlzLl9idWlsZChleHByZXNzaW9uKTtcbiAgICB0aGlzLl9hc3NpZ25lcnNDYWNoZS5zZXQoZXhwcmVzc2lvbiwgYXNzaWduRm4pO1xuXG4gICAgcmV0dXJuIGFzc2lnbkZuO1xuICB9XG59XG4iXX0=