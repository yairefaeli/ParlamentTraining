/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { CesiumService } from '../cesium/cesium.service';
var GeoUtilsService = /** @class */ (function () {
    function GeoUtilsService(cesiumService) {
        this.cesiumService = cesiumService;
    }
    /**
     * @param {?} currentLocation
     * @param {?} meterDistance
     * @param {?} radianAzimuth
     * @param {?=} deprecated
     * @return {?}
     */
    GeoUtilsService.pointByLocationDistanceAndAzimuth = /**
     * @param {?} currentLocation
     * @param {?} meterDistance
     * @param {?} radianAzimuth
     * @param {?=} deprecated
     * @return {?}
     */
    function (currentLocation, meterDistance, radianAzimuth, deprecated) {
        /** @type {?} */
        var distance = meterDistance / Cesium.Ellipsoid.WGS84.maximumRadius;
        /** @type {?} */
        var cartographicLocation = currentLocation instanceof Cesium.Cartesian3 ? Cesium.Cartographic.fromCartesian(currentLocation) : currentLocation;
        /** @type {?} */
        var cartesianLocation = currentLocation instanceof Cesium.Cartesian3
            ? currentLocation
            : Cesium.Cartesian3.fromRadians(currentLocation.longitude, currentLocation.latitude, currentLocation.height);
        /** @type {?} */
        var resultPosition;
        /** @type {?} */
        var resultDistance;
        /** @type {?} */
        var counter = 0;
        /** @type {?} */
        var distanceFactorRangeMax = 0.1;
        /** @type {?} */
        var distanceFactorRangeMin = -0.1;
        while (counter === 0 ||
            (counter < 16 && Math.max(resultDistance, meterDistance) / Math.min(resultDistance, meterDistance) > 1.000001)) {
            /** @type {?} */
            var factor = distanceFactorRangeMin + (distanceFactorRangeMax - distanceFactorRangeMin) / 2;
            resultPosition = GeoUtilsService._pointByLocationDistanceAndAzimuth(cartographicLocation, distance * (1 + factor), radianAzimuth);
            resultDistance = this.distance(cartesianLocation, resultPosition);
            if (resultDistance > meterDistance) {
                distanceFactorRangeMax = distanceFactorRangeMin + (distanceFactorRangeMax - distanceFactorRangeMin) / 2;
            }
            else {
                distanceFactorRangeMin = distanceFactorRangeMin + (distanceFactorRangeMax - distanceFactorRangeMin) / 2;
            }
            counter++;
        }
        return resultPosition;
    };
    /**
     * @param {?} cartographicLocation
     * @param {?} distance
     * @param {?} radianAzimuth
     * @return {?}
     */
    GeoUtilsService._pointByLocationDistanceAndAzimuth = /**
     * @param {?} cartographicLocation
     * @param {?} distance
     * @param {?} radianAzimuth
     * @return {?}
     */
    function (cartographicLocation, distance, radianAzimuth) {
        /** @type {?} */
        var curLat = cartographicLocation.latitude;
        /** @type {?} */
        var curLon = cartographicLocation.longitude;
        /** @type {?} */
        var destinationLat = Math.asin(Math.sin(curLat) * Math.cos(distance) + Math.cos(curLat) * Math.sin(distance) * Math.cos(radianAzimuth));
        /** @type {?} */
        var destinationLon = curLon +
            Math.atan2(Math.sin(radianAzimuth) * Math.sin(distance) * Math.cos(curLat), Math.cos(distance) - Math.sin(curLat) * Math.sin(destinationLat));
        destinationLon = ((destinationLon + 3 * Math.PI) % (2 * Math.PI)) - Math.PI;
        return Cesium.Cartesian3.fromRadians(destinationLon, destinationLat);
    };
    /**
     * @param {?} pos0
     * @param {?} pos1
     * @return {?}
     */
    GeoUtilsService.distance = /**
     * @param {?} pos0
     * @param {?} pos1
     * @return {?}
     */
    function (pos0, pos1) {
        return Cesium.Cartesian3.distance(pos0, pos1);
    };
    /**
     * @param {?} position0
     * @param {?} position1
     * @return {?}
     */
    GeoUtilsService.getPositionsDelta = /**
     * @param {?} position0
     * @param {?} position1
     * @return {?}
     */
    function (position0, position1) {
        return {
            x: position1.x - position0.x,
            y: position1.y - position0.y,
            z: position1.z - position0.z,
        };
    };
    /**
     * @param {?} position
     * @param {?} delta
     * @param {?=} updateReference
     * @return {?}
     */
    GeoUtilsService.addDeltaToPosition = /**
     * @param {?} position
     * @param {?} delta
     * @param {?=} updateReference
     * @return {?}
     */
    function (position, delta, updateReference) {
        if (updateReference === void 0) { updateReference = false; }
        if (updateReference) {
            position.x += delta.x;
            position.y += delta.y;
            position.z += delta.z;
            /** @type {?} */
            var cartographic = Cesium.Cartographic.fromCartesian(position);
            cartographic.height = 0;
            /** @type {?} */
            var cartesian = Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height);
            position.x = cartesian.x;
            position.y = cartesian.y;
            position.z = cartesian.z;
            return position;
        }
        else {
            /** @type {?} */
            var cartesian = new Cesium.Cartesian3(position.x + delta.x, position.y + delta.y, position.z + delta.z);
            /** @type {?} */
            var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
            cartographic.height = 0;
            return Cesium.Cartesian3.fromRadians(cartographic.longitude, cartographic.latitude, cartographic.height);
        }
    };
    /**
     * @param {?} position0
     * @param {?} position1
     * @return {?}
     */
    GeoUtilsService.middleCartesian3Point = /**
     * @param {?} position0
     * @param {?} position1
     * @return {?}
     */
    function (position0, position1) {
        return new Cesium.Cartesian3(position1.x - position0.x / 2, position1.y - position0.y / 2, position1.z - position0.z / 2);
    };
    /**
     * @param {?} screenPos
     * @return {?}
     */
    GeoUtilsService.prototype.screenPositionToCartesian3 = /**
     * @param {?} screenPos
     * @return {?}
     */
    function (screenPos) {
        /** @type {?} */
        var camera = this.cesiumService.getViewer().camera;
        return camera.pickEllipsoid(screenPos);
    };
    GeoUtilsService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GeoUtilsService.ctorParameters = function () { return [
        { type: CesiumService }
    ]; };
    return GeoUtilsService;
}());
export { GeoUtilsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    GeoUtilsService.prototype.cesiumService;
}
//# sourceMappingURL=data:application/json;base64,