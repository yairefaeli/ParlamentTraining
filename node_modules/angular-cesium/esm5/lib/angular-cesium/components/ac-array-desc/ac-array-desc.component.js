/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Input, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import * as _get from 'lodash.get';
import { AcLayerComponent } from '../ac-layer/ac-layer.component';
import { LayerService } from '../../services/layer-service/layer-service.service';
import { BasicDesc } from '../../services/basic-desc/basic-desc.service';
/**
 *  This is component represents an array under `ac-layer`.
 *  The element must be a child of ac-layer element.
 *  + acFor `{string}` - get the tracked array and entityName (see the example).
 *  + idGetter `{Function}` - a function that gets the id for a given element in the array -should be defined for maximum performance.
 *  + show `{boolean}` - show/hide array's entities.
 *
 *  __Usage :__
 *  ```
 * <ac-layer acFor="let track of tracks$" [show]="show" [context]="this" [store]="true">
 *  <ac-array-desc acFor="let arrayItem of track.array" [idGetter]="trackArrayIdGetter">
 *    <ac-array-desc acFor="let innerArrayItem of arrayItem.innerArray" [idGetter]="trackArrayIdGetter">
 *      <ac-point-desc props="{
 *        position: innerArrayItem.pos,
 *        pixelSize: 10,
 *        color: getTrackColor(track),
 *        outlineColor: Cesium.Color.BLUE,
 *        outlineWidth: 1
 *      }">
 *      </ac-point-desc>
 *    </ac-array-desc>
 *  </ac-array-desc>
 * </ac-layer>
 *  ```
 */
var AcArrayDescComponent = /** @class */ (function () {
    function AcArrayDescComponent(layerService, cd) {
        this.layerService = layerService;
        this.cd = cd;
        this.show = true;
        this.entitiesMap = new Map();
        this.id = 0;
        this.acForRgx = /^let\s+.+\s+of\s+.+$/;
        this.arrayObservable$ = new Subject();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    AcArrayDescComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['acFor'].firstChange) {
            /** @type {?} */
            var acForString = changes['acFor'].currentValue;
            if (!this.acForRgx.test(acForString)) {
                throw new Error("ac-layer: Invalid [acFor] syntax. Expected: [acFor]=\"let item of observable\" .Instead received: " + acForString);
            }
            /** @type {?} */
            var acForArr = changes['acFor'].currentValue.split(' ');
            this.arrayPath = acForArr[3];
            this.entityName = acForArr[1];
        }
    };
    /**
     * @return {?}
     */
    AcArrayDescComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.layer.getLayerService().cache = false;
        this.layerServiceSubscription = this.layerService.layerUpdates().subscribe(function () {
            _this.cd.detectChanges();
        });
    };
    /**
     * @return {?}
     */
    AcArrayDescComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.layerService.context['arrayObservable$'] = this.arrayObservable$;
        this.layerService.registerDescription(this);
        this.basicDescs._results.forEach(function (component) {
            component.setLayerService(_this.layer.getLayerService());
        });
        this.arrayDescs._results.splice(0, 1);
        this.arrayDescs._results.forEach(function (component) {
            _this.layerService.unregisterDescription(component);
            _this.layer.getLayerService().registerDescription(component);
            component.layerService = _this.layer.getLayerService();
            component.setLayerService(_this.layer.getLayerService());
        });
    };
    /**
     * @return {?}
     */
    AcArrayDescComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.layerServiceSubscription) {
            this.layerServiceSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} layerService
     * @return {?}
     */
    AcArrayDescComponent.prototype.setLayerService = /**
     * @param {?} layerService
     * @return {?}
     */
    function (layerService) {
        this.layerService = layerService;
    };
    /**
     * @param {?} context
     * @param {?} id
     * @param {?} contextEntity
     * @return {?}
     */
    AcArrayDescComponent.prototype.draw = /**
     * @param {?} context
     * @param {?} id
     * @param {?} contextEntity
     * @return {?}
     */
    function (context, id, contextEntity) {
        var _this = this;
        /** @type {?} */
        var get = _get;
        /** @type {?} */
        var entitiesArray = get(context, this.arrayPath);
        if (!entitiesArray) {
            return;
        }
        /** @type {?} */
        var previousEntitiesIdArray = this.entitiesMap.get(id);
        /** @type {?} */
        var entitiesIdArray = [];
        this.entitiesMap.set(id, entitiesIdArray);
        entitiesArray.forEach(function (item, index) {
            _this.layerService.context[_this.entityName] = item;
            /** @type {?} */
            var arrayItemId = _this.generateCombinedId(id, item, index);
            entitiesIdArray.push(arrayItemId);
            _this.layer.update(contextEntity, arrayItemId);
        });
        if (previousEntitiesIdArray) {
            /** @type {?} */
            var entitiesToRemove = this.idGetter ?
                previousEntitiesIdArray.filter(function (entityId) { return entitiesIdArray.indexOf(entityId) < 0; }) :
                previousEntitiesIdArray;
            if (entitiesToRemove) {
                entitiesToRemove.forEach(function (entityId) { return _this.layer.remove(entityId); });
            }
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    AcArrayDescComponent.prototype.remove = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var entitiesIdArray = this.entitiesMap.get(id);
        if (entitiesIdArray) {
            entitiesIdArray.forEach(function (entityId) { return _this.layer.remove(entityId); });
        }
        this.entitiesMap.delete(id);
    };
    /**
     * @return {?}
     */
    AcArrayDescComponent.prototype.removeAll = /**
     * @return {?}
     */
    function () {
        this.layer.removeAll();
        this.entitiesMap.clear();
    };
    /**
     * @return {?}
     */
    AcArrayDescComponent.prototype.getAcForString = /**
     * @return {?}
     */
    function () {
        return "let " + (this.entityName + '___temp') + " of arrayObservable$";
    };
    /**
     * @private
     * @param {?} entityId
     * @param {?} arrayItem
     * @param {?} index
     * @return {?}
     */
    AcArrayDescComponent.prototype.generateCombinedId = /**
     * @private
     * @param {?} entityId
     * @param {?} arrayItem
     * @param {?} index
     * @return {?}
     */
    function (entityId, arrayItem, index) {
        /** @type {?} */
        var arrayItemId;
        if (this.idGetter) {
            arrayItemId = this.idGetter(arrayItem, index);
        }
        else {
            arrayItemId = (this.id++) % Number.MAX_SAFE_INTEGER;
        }
        return entityId + arrayItemId;
    };
    AcArrayDescComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ac-array-desc',
                    template: "\n    <ac-layer #layer [acFor]=\"getAcForString()\"\n              [context]=\"layerService.context\"\n              [options]=\"layerService.options\"\n              [show]=\"layerService.show && show\"\n              [zIndex]=\"layerService.zIndex\">\n      <ng-content #content></ng-content>\n    </ac-layer>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    AcArrayDescComponent.ctorParameters = function () { return [
        { type: LayerService },
        { type: ChangeDetectorRef }
    ]; };
    AcArrayDescComponent.propDecorators = {
        acFor: [{ type: Input }],
        idGetter: [{ type: Input }],
        show: [{ type: Input }],
        layer: [{ type: ViewChild, args: ['layer',] }],
        basicDescs: [{ type: ContentChildren, args: [BasicDesc, { descendants: false },] }],
        arrayDescs: [{ type: ContentChildren, args: [AcArrayDescComponent, { descendants: false },] }]
    };
    return AcArrayDescComponent;
}());
export { AcArrayDescComponent };
if (false) {
    /** @type {?} */
    AcArrayDescComponent.prototype.acFor;
    /** @type {?} */
    AcArrayDescComponent.prototype.idGetter;
    /** @type {?} */
    AcArrayDescComponent.prototype.show;
    /**
     * @type {?}
     * @private
     */
    AcArrayDescComponent.prototype.layer;
    /**
     * @type {?}
     * @private
     */
    AcArrayDescComponent.prototype.basicDescs;
    /**
     * @type {?}
     * @private
     */
    AcArrayDescComponent.prototype.arrayDescs;
    /**
     * @type {?}
     * @private
     */
    AcArrayDescComponent.prototype.entitiesMap;
    /**
     * @type {?}
     * @private
     */
    AcArrayDescComponent.prototype.layerServiceSubscription;
    /**
     * @type {?}
     * @private
     */
    AcArrayDescComponent.prototype.id;
    /**
     * @type {?}
     * @private
     */
    AcArrayDescComponent.prototype.acForRgx;
    /** @type {?} */
    AcArrayDescComponent.prototype.entityName;
    /** @type {?} */
    AcArrayDescComponent.prototype.arrayPath;
    /** @type {?} */
    AcArrayDescComponent.prototype.arrayObservable$;
    /** @type {?} */
    AcArrayDescComponent.prototype.layerService;
    /**
     * @type {?}
     * @private
     */
    AcArrayDescComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,