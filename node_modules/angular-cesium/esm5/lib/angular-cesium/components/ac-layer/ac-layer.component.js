/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { from as observableFrom, merge as observableMerge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
// tslint:disable
import { BillboardDrawerService } from '../../services/drawers/billboard-drawer/billboard-drawer.service';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { LayerService } from '../../services/layer-service/layer-service.service';
import { ActionType } from '../../models/action-type.enum';
import { ComputationCache } from '../../services/computation-cache/computation-cache.service';
import { LabelDrawerService } from '../../services/drawers/label-drawer/label-drawer.service';
import { EllipseDrawerService } from '../../services/drawers/ellipse-drawer/ellipse-drawer.service';
import { PolylineDrawerService } from '../../services/drawers/polyline-drawer/polyline-drawer.service';
import { ArcDrawerService } from '../../services/drawers/arc-drawer/arc-drawer.service';
import { PointDrawerService } from '../../services/drawers/point-drawer/point-drawer.service';
import { PolygonDrawerService } from '../../services/drawers/polygon-drawer/polygon-drawer.service';
import { DynamicEllipseDrawerService } from '../../services/drawers/static-dynamic/ellipse-drawer/dynamic-ellipse-drawer.service';
import { DynamicPolylineDrawerService } from '../../services/drawers/static-dynamic/dynamic-polyline-drawer/dynamic-polyline-drawer.service';
import { StaticCircleDrawerService } from '../../services/drawers/static-dynamic/static-circle-drawer/static-circle-drawer.service';
import { StaticPolylineDrawerService } from '../../services/drawers/static-dynamic/static-polyline-drawer/static-polyline-drawer.service';
import { StaticPolygonDrawerService } from '../../services/drawers/static-dynamic/static-polygon-drawer/polygon-drawer.service';
import { StaticEllipseDrawerService } from '../../services/drawers/static-dynamic/ellipse-drawer/ellipse-drawer.service';
import { ModelDrawerService } from '../../services/drawers/model-drawer/model-drawer.service';
import { BoxDrawerService } from '../../services/drawers/box-dawer/box-drawer.service';
import { CorridorDrawerService } from '../../services/drawers/corridor-dawer/corridor-drawer.service';
import { CylinderDrawerService } from '../../services/drawers/cylinder-dawer/cylinder-drawer.service';
import { EllipsoidDrawerService } from '../../services/drawers/ellipoid-drawer/ellipsoid-drawer.service';
import { PolylineVolumeDrawerService } from '../../services/drawers/polyline-volume-dawer/polyline-volume-drawer.service';
import { WallDrawerService } from '../../services/drawers/wall-dawer/wall-drawer.service';
import { RectangleDrawerService } from '../../services/drawers/rectangle-dawer/rectangle-drawer.service';
import { PolylinePrimitiveDrawerService } from '../../services/drawers/polyline-primitive-drawer/polyline-primitive-drawer.service';
import { LabelPrimitiveDrawerService } from '../../services/drawers/label-primitive-drawer/label-primitive-drawer.service';
import { BillboardPrimitiveDrawerService } from '../../services/drawers/billboard-primitive-drawer/billboard-primitive-drawer.service';
import { MapLayersService } from '../../services/map-layers/map-layers.service';
import { PointPrimitiveDrawerService } from '../../services/drawers/point-primitive-drawer/point-primitive-drawer.service';
import { HtmlDrawerService } from '../../services/drawers/html-drawer/html-drawer.service';
import { CzmlDrawerService } from '../../services/drawers/czml-drawer/czml-drawer.service';
// tslint:enable
/**
 *  This is a ac-layer implementation.
 *  The ac-layer element must be a child of ac-map element.
 *  + acFor `{string}` - get the tracked observable and entityName (see the example).
 *  + show `{boolean}` - show/hide layer's entities.
 *  + context `{any}` - get the context layer that will use the componnet (most of the time equal to "this").
 *  + options `{LayerOptions}` - sets the layer options for each drawer.
 *  + zIndex `{number}` - controls the zIndex (order) of the layer, layers with greater zIndex will be in front of layers with lower zIndex
 *    (Exception For `Billboard` and `Label`, should use `[eyeOffset]` prop instead)</br>
 *    zIndex won't work for pritimitve descs (like ac-primitive-polyline...)
 *
 *
 *  __Usage :__
 *  ```
 *  <ac-map>
 *    <ac-layer acFor="let track of tracks$" [show]="show" [context]="this" [options]="options" [zIndex]="1">
 *      <ac-billboard-desc props="{
 *        image: track.image,
 *        position: track.position,
 *        scale: track.scale,
 *        color: track.color,
 *        name: track.name
 *      }">
 *      </ac-billboard-desc>
 *        <ac-label-desc props="{
 *          position: track.position,
 *          pixelOffset : [-15,20] | pixelOffset,
 *          text: track.name,
 *          font: '15px sans-serif'
 *        }">
 *      </ac-label-desc>
 *    </ac-layer>
 *  </ac-map>
 *  ```
 */
var AcLayerComponent = /** @class */ (function () {
    function AcLayerComponent(layerService, _computationCache, mapLayersService, billboardDrawerService, labelDrawerService, ellipseDrawerService, polylineDrawerService, polygonDrawerService, arcDrawerService, pointDrawerService, modelDrawerService, boxDrawerService, corridorDrawerService, cylinderDrawerService, ellipsoidDrawerSerice, polylineVolumeDrawerService, wallDrawerService, rectangleDrawerService, dynamicEllipseDrawerService, dynamicPolylineDrawerService, staticCircleDrawerService, staticPolylineDrawerService, staticPolygonDrawerService, staticEllipseDrawerService, polylinePrimitiveDrawerService, labelPrimitiveDrawerService, billboardPrimitiveDrawerService, pointPrimitiveDrawerService, htmlDrawerService, czmlDrawerService) {
        this.layerService = layerService;
        this._computationCache = _computationCache;
        this.mapLayersService = mapLayersService;
        this.show = true;
        this.store = false;
        this.zIndex = 0;
        this.acForRgx = /^let\s+.+\s+of\s+.+$/;
        this.stopObservable = new Subject();
        this._updateStream = new Subject();
        this.entitiesStore = new Map();
        this.layerDrawerDataSources = [];
        this._drawerList = new Map([
            ['billboard', billboardDrawerService],
            ['label', labelDrawerService],
            ['ellipse', ellipseDrawerService],
            ['polyline', polylineDrawerService],
            ['polygon', (/** @type {?} */ (polygonDrawerService))],
            ['arc', arcDrawerService],
            ['point', pointDrawerService],
            ['model', modelDrawerService],
            ['box', boxDrawerService],
            ['corridor', corridorDrawerService],
            ['cylinder', cylinderDrawerService],
            ['ellipsoid', ellipsoidDrawerSerice],
            ['polylineVolume', polylineVolumeDrawerService],
            ['rectangle', rectangleDrawerService],
            ['wall', wallDrawerService],
            ['polylinePrimitive', polylinePrimitiveDrawerService],
            ['labelPrimitive', labelPrimitiveDrawerService],
            ['billboardPrimitive', billboardPrimitiveDrawerService],
            ['pointPrimitive', pointPrimitiveDrawerService],
            ['html', htmlDrawerService],
            ['czml', czmlDrawerService],
            ['dynamicEllipse', dynamicEllipseDrawerService],
            ['dynamicPolyline', dynamicPolylineDrawerService],
            ['staticCircle', staticCircleDrawerService],
            ['staticPolyline', staticPolylineDrawerService],
            ['staticPolygon', staticPolygonDrawerService],
            ['staticEllipse', staticEllipseDrawerService],
        ]);
    }
    /**
     * @return {?}
     */
    AcLayerComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.initValidParams();
        observableMerge(this._updateStream, this.observable).pipe(takeUntil(this.stopObservable)).subscribe(function (notification) {
            _this._computationCache.clear();
            /** @type {?} */
            var contextEntity = notification.entity;
            if (_this.store) {
                contextEntity = _this.updateStore(notification);
            }
            _this.context[_this.entityName] = contextEntity;
            _this.layerService.getDescriptions().forEach(function (descriptionComponent) {
                switch (notification.actionType) {
                    case ActionType.ADD_UPDATE:
                        descriptionComponent.draw(_this.context, notification.id, contextEntity);
                        break;
                    case ActionType.DELETE:
                        descriptionComponent.remove(notification.id);
                        break;
                    default:
                        console.error('[ac-layer] unknown AcNotification.actionType for notification: ' + notification);
                }
            });
        });
    };
    /**
     * @private
     * @param {?} notification
     * @return {?}
     */
    AcLayerComponent.prototype.updateStore = /**
     * @private
     * @param {?} notification
     * @return {?}
     */
    function (notification) {
        if (notification.actionType === ActionType.DELETE) {
            this.entitiesStore.delete(notification.id);
            return undefined;
        }
        else {
            if (this.entitiesStore.has(notification.id)) {
                /** @type {?} */
                var entity = this.entitiesStore.get(notification.id);
                Object.assign(entity, notification.entity);
                return entity;
            }
            else {
                this.entitiesStore.set(notification.id, notification.entity);
                return notification.entity;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    AcLayerComponent.prototype.initValidParams = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.context) {
            throw new Error('ac-layer: must initialize [context] ');
        }
        if (!this.acForRgx.test(this.acFor)) {
            throw new Error("ac-layer: Invalid [acFor] syntax. Expected: [acFor]=\"let item of observable\" .Instead received: " + this.acFor);
        }
        /** @type {?} */
        var acForArr = this.acFor.split(' ');
        this.observable = this.context[acForArr[3]];
        this.entityName = acForArr[1];
        if (!this.isObservable(this.observable)) {
            throw new Error('ac-layer: must initailize [acFor] with rx observable, instead received: ' + this.observable);
        }
        this.layerService.context = this.context;
        this.layerService.setEntityName(this.entityName);
    };
    /** Test for a rxjs Observable */
    /**
     * Test for a rxjs Observable
     * @private
     * @param {?} obj
     * @return {?}
     */
    AcLayerComponent.prototype.isObservable = /**
     * Test for a rxjs Observable
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /* check via duck-typing rather than instance of
         * to allow passing between window contexts */
        return obj && typeof obj.subscribe === 'function';
    };
    /**
     * @return {?}
     */
    AcLayerComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @return {?}
     */
    AcLayerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.layerService.context = this.context;
        this.layerService.options = this.options;
        this.layerService.show = this.show;
        this.layerService.zIndex = this.zIndex;
        this._drawerList.forEach(function (drawer, drawerName) {
            var _a;
            /** @type {?} */
            var initOptions = _this.options ? _this.options[drawerName] : undefined;
            /** @type {?} */
            var drawerDataSources = drawer.init(initOptions);
            // only entities drawers create data sources
            if (drawerDataSources) {
                // this.mapLayersService.registerLayerDataSources(drawerDataSources, this.zIndex);
                // TODO: Check if the following line causes Bad Performance
                (_a = _this.layerDrawerDataSources).push.apply(_a, tslib_1.__spread(drawerDataSources));
            }
            drawer.setShow(_this.show);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AcLayerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.show && !changes.show.firstChange) {
            /** @type {?} */
            var showValue_1 = changes['show'].currentValue;
            this.layerService.show = showValue_1;
            this._drawerList.forEach(function (drawer) { return drawer.setShow(showValue_1); });
        }
        if (changes.zIndex && !changes.zIndex.firstChange) {
            /** @type {?} */
            var zIndexValue = changes['zIndex'].currentValue;
            this.layerService.zIndex = zIndexValue;
            this.mapLayersService.updateAndRefresh(this.layerDrawerDataSources, zIndexValue);
        }
    };
    /**
     * @return {?}
     */
    AcLayerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.mapLayersService.removeDataSources(this.layerDrawerDataSources);
        this.stopObservable.next(true);
        this.removeAll();
    };
    /**
     * @return {?}
     */
    AcLayerComponent.prototype.getLayerService = /**
     * @return {?}
     */
    function () {
        return this.layerService;
    };
    /**
     * Returns an array of DataSources registered by a drawer of this layer
     * @return Array of Cesium.DataSources
     */
    /**
     * Returns an array of DataSources registered by a drawer of this layer
     * @return {?} Array of Cesium.DataSources
     */
    AcLayerComponent.prototype.getLayerDrawerDataSources = /**
     * Returns an array of DataSources registered by a drawer of this layer
     * @return {?} Array of Cesium.DataSources
     */
    function () {
        return this.layerDrawerDataSources;
    };
    /**
     * Returns an Array of DataSources of the drawer with the provided DataSource.name
     * Example: getDataSourceOfDrawer('polyline') returns the dataSource of polyline drawer
     * @return Array of Cesium.DataSources
     */
    /**
     * Returns an Array of DataSources of the drawer with the provided DataSource.name
     * Example: getDataSourceOfDrawer('polyline') returns the dataSource of polyline drawer
     * @param {?} name
     * @return {?} Array of Cesium.DataSources
     */
    AcLayerComponent.prototype.getDrawerDataSourcesByName = /**
     * Returns an Array of DataSources of the drawer with the provided DataSource.name
     * Example: getDataSourceOfDrawer('polyline') returns the dataSource of polyline drawer
     * @param {?} name
     * @return {?} Array of Cesium.DataSources
     */
    function (name) {
        return this.layerDrawerDataSources.filter(function (d) { return d.name === name; });
    };
    /**
     * Returns the store.
     */
    /**
     * Returns the store.
     * @return {?}
     */
    AcLayerComponent.prototype.getStore = /**
     * Returns the store.
     * @return {?}
     */
    function () {
        return this.entitiesStore;
    };
    /**
     * Remove all the entities from the layer.
     */
    /**
     * Remove all the entities from the layer.
     * @return {?}
     */
    AcLayerComponent.prototype.removeAll = /**
     * Remove all the entities from the layer.
     * @return {?}
     */
    function () {
        this.layerService.getDescriptions().forEach(function (description) { return description.removeAll(); });
        this.entitiesStore.clear();
    };
    /**
     * remove entity from the layer
     */
    /**
     * remove entity from the layer
     * @param {?} entityId
     * @return {?}
     */
    AcLayerComponent.prototype.remove = /**
     * remove entity from the layer
     * @param {?} entityId
     * @return {?}
     */
    function (entityId) {
        this._updateStream.next({ id: entityId, actionType: ActionType.DELETE });
        this.entitiesStore.delete(entityId);
    };
    /**
     * add/update entity to/from the layer
     */
    /**
     * add/update entity to/from the layer
     * @param {?} notification
     * @return {?}
     */
    AcLayerComponent.prototype.updateNotification = /**
     * add/update entity to/from the layer
     * @param {?} notification
     * @return {?}
     */
    function (notification) {
        this._updateStream.next(notification);
    };
    /**
     * add/update entity to/from the layer
     */
    /**
     * add/update entity to/from the layer
     * @param {?} entity
     * @param {?} id
     * @return {?}
     */
    AcLayerComponent.prototype.update = /**
     * add/update entity to/from the layer
     * @param {?} entity
     * @param {?} id
     * @return {?}
     */
    function (entity, id) {
        this._updateStream.next({ entity: entity, id: id, actionType: ActionType.ADD_UPDATE });
    };
    /**
     * @param {?} collection
     * @return {?}
     */
    AcLayerComponent.prototype.refreshAll = /**
     * @param {?} collection
     * @return {?}
     */
    function (collection) {
        var _this = this;
        // TODO make entity interface: collection of type entity not notification
        observableFrom(collection).subscribe(function (entity) { return _this._updateStream.next(entity); });
    };
    AcLayerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ac-layer',
                    template: '<ng-content></ng-content>',
                    providers: [
                        LayerService,
                        ComputationCache,
                        BillboardDrawerService,
                        LabelDrawerService,
                        EllipseDrawerService,
                        PolylineDrawerService,
                        ArcDrawerService,
                        PointDrawerService,
                        PolygonDrawerService,
                        ModelDrawerService,
                        BoxDrawerService,
                        CorridorDrawerService,
                        CylinderDrawerService,
                        EllipsoidDrawerService,
                        PolylineVolumeDrawerService,
                        WallDrawerService,
                        RectangleDrawerService,
                        PolylinePrimitiveDrawerService,
                        LabelPrimitiveDrawerService,
                        BillboardPrimitiveDrawerService,
                        PointPrimitiveDrawerService,
                        HtmlDrawerService,
                        CzmlDrawerService,
                        DynamicEllipseDrawerService,
                        DynamicPolylineDrawerService,
                        StaticCircleDrawerService,
                        StaticPolylineDrawerService,
                        StaticPolygonDrawerService,
                        StaticEllipseDrawerService,
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    AcLayerComponent.ctorParameters = function () { return [
        { type: LayerService },
        { type: ComputationCache },
        { type: MapLayersService },
        { type: BillboardDrawerService },
        { type: LabelDrawerService },
        { type: EllipseDrawerService },
        { type: PolylineDrawerService },
        { type: PolygonDrawerService },
        { type: ArcDrawerService },
        { type: PointDrawerService },
        { type: ModelDrawerService },
        { type: BoxDrawerService },
        { type: CorridorDrawerService },
        { type: CylinderDrawerService },
        { type: EllipsoidDrawerService },
        { type: PolylineVolumeDrawerService },
        { type: WallDrawerService },
        { type: RectangleDrawerService },
        { type: DynamicEllipseDrawerService },
        { type: DynamicPolylineDrawerService },
        { type: StaticCircleDrawerService },
        { type: StaticPolylineDrawerService },
        { type: StaticPolygonDrawerService },
        { type: StaticEllipseDrawerService },
        { type: PolylinePrimitiveDrawerService },
        { type: LabelPrimitiveDrawerService },
        { type: BillboardPrimitiveDrawerService },
        { type: PointPrimitiveDrawerService },
        { type: HtmlDrawerService },
        { type: CzmlDrawerService }
    ]; };
    AcLayerComponent.propDecorators = {
        show: [{ type: Input }],
        acFor: [{ type: Input }],
        context: [{ type: Input }],
        store: [{ type: Input }],
        options: [{ type: Input }],
        zIndex: [{ type: Input }]
    };
    return AcLayerComponent;
}());
export { AcLayerComponent };
if (false) {
    /** @type {?} */
    AcLayerComponent.prototype.show;
    /** @type {?} */
    AcLayerComponent.prototype.acFor;
    /** @type {?} */
    AcLayerComponent.prototype.context;
    /** @type {?} */
    AcLayerComponent.prototype.store;
    /** @type {?} */
    AcLayerComponent.prototype.options;
    /** @type {?} */
    AcLayerComponent.prototype.zIndex;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype.acForRgx;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype.entityName;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype.stopObservable;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype.observable;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype._drawerList;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype._updateStream;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype.entitiesStore;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype.layerDrawerDataSources;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype.layerService;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype._computationCache;
    /**
     * @type {?}
     * @private
     */
    AcLayerComponent.prototype.mapLayersService;
}
//# sourceMappingURL=data:application/json;base64,