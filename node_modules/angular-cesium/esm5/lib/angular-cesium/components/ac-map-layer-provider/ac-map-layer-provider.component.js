/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { CesiumService } from '../../services/cesium/cesium.service';
import { Checker } from '../../utils/checker';
import { MapLayerProviderOptions } from '../../models';
/**
 *  This component is used for adding a map provider service to the map (ac-map)
 *  options according to selected map provider MapLayerProviderOptions enum.
 *  additional setting can be done with cesium imageryLayer (exposed as class member)
 *  check out: https://cesiumjs.org/Cesium/Build/Documentation/ImageryLayer.html
 *  and: https://cesiumjs.org/Cesium/Build/Documentation/ImageryLayerCollection.html
 *
 *
 *  __Usage :__
 *  ```
 *    <ac-map-layer-provider [options]="optionsObject" [provider]="myProvider">
 *    </ac-map-layer-provider>
 *  ```
 */
var AcMapLayerProviderComponent = /** @class */ (function () {
    function AcMapLayerProviderComponent(cesiumService) {
        this.cesiumService = cesiumService;
        /**
         * refer to cesium docs for details https://cesiumjs.org/Cesium/Build/Documentation/ImageryProvider.html
         */
        this.options = {};
        /**
         * the provider
         */
        this.provider = MapLayerProviderOptions.OFFLINE;
        /**
         * show (optional) - Determines if the map layer is shown.
         */
        this.show = true;
        /**
         * The alpha blending value of this layer: 0.0 to 1.0
         */
        this.alpha = 1.0;
        /**
         * The brightness of this layer: 0.0 to 1.0
         */
        this.brightness = 1.0;
        /**
         * The contrast of this layer: 0.0 to 1.0
         */
        this.contrast = 1.0;
        this.imageryLayersCollection = this.cesiumService.getScene().imageryLayers;
    }
    /**
     * @private
     * @return {?}
     */
    AcMapLayerProviderComponent.prototype.createOfflineMapProvider = /**
     * @private
     * @return {?}
     */
    function () {
        return Cesium.createTileMapServiceImageryProvider({
            url: Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII')
        });
    };
    /**
     * @return {?}
     */
    AcMapLayerProviderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!Checker.present(this.options.url) && this.provider !== MapLayerProviderOptions.OFFLINE) {
            throw new Error('options must have a url');
        }
        switch (this.provider) {
            case MapLayerProviderOptions.WebMapService:
            case MapLayerProviderOptions.WebMapTileService:
            case MapLayerProviderOptions.ArcGisMapServer:
            case MapLayerProviderOptions.SingleTileImagery:
            case MapLayerProviderOptions.BingMaps:
            case MapLayerProviderOptions.GoogleEarthEnterpriseMaps:
            case MapLayerProviderOptions.MapBox:
            case MapLayerProviderOptions.UrlTemplateImagery:
                this.layerProvider = new this.provider(this.options);
                break;
            case MapLayerProviderOptions.MapTileService:
            case MapLayerProviderOptions.OpenStreetMap:
                this.layerProvider = this.provider(this.options);
                break;
            case MapLayerProviderOptions.OFFLINE:
                this.layerProvider = this.createOfflineMapProvider();
                break;
            default:
                console.log('ac-map-layer-provider: [provider] wasn\'t found. setting OFFLINE provider as default');
                this.layerProvider = this.createOfflineMapProvider();
                break;
        }
        if (this.show) {
            this.imageryLayer = this.imageryLayersCollection.addImageryProvider(this.layerProvider, this.index);
            this.imageryLayer.alpha = this.alpha;
            this.imageryLayer.contrast = this.contrast;
            this.imageryLayer.brightness = this.brightness;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AcMapLayerProviderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['show'] && !changes['show'].isFirstChange()) {
            /** @type {?} */
            var showValue = changes['show'].currentValue;
            if (showValue) {
                if (this.imageryLayer) {
                    this.imageryLayersCollection.add(this.imageryLayer, this.index);
                }
                else {
                    this.imageryLayer = this.imageryLayersCollection.addImageryProvider(this.layerProvider, this.index);
                    this.imageryLayer.alpha = this.alpha;
                    this.imageryLayer.contrast = this.contrast;
                    this.imageryLayer.brightness = this.brightness;
                }
            }
            else if (this.imageryLayer) {
                this.imageryLayersCollection.remove(this.imageryLayer, false);
            }
        }
        if (changes['alpha'] && !changes['alpha'].isFirstChange() && this.imageryLayer) {
            this.imageryLayer.alpha = this.alpha;
        }
        if (changes['contrast'] && !changes['contrast'].isFirstChange() && this.imageryLayer) {
            this.imageryLayer.contrast = this.contrast;
        }
        if (changes['brightness'] && !changes['brightness'].isFirstChange() && this.imageryLayer) {
            this.imageryLayer.brightness = this.brightness;
        }
    };
    /**
     * @return {?}
     */
    AcMapLayerProviderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.imageryLayer) {
            this.imageryLayersCollection.remove(this.imageryLayer, true);
        }
    };
    AcMapLayerProviderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ac-map-layer-provider',
                    template: ''
                }] }
    ];
    /** @nocollapse */
    AcMapLayerProviderComponent.ctorParameters = function () { return [
        { type: CesiumService }
    ]; };
    AcMapLayerProviderComponent.propDecorators = {
        options: [{ type: Input }],
        provider: [{ type: Input }],
        index: [{ type: Input }],
        show: [{ type: Input }],
        alpha: [{ type: Input }],
        brightness: [{ type: Input }],
        contrast: [{ type: Input }]
    };
    return AcMapLayerProviderComponent;
}());
export { AcMapLayerProviderComponent };
if (false) {
    /**
     * refer to cesium docs for details https://cesiumjs.org/Cesium/Build/Documentation/ImageryProvider.html
     * @type {?}
     */
    AcMapLayerProviderComponent.prototype.options;
    /**
     * the provider
     * @type {?}
     */
    AcMapLayerProviderComponent.prototype.provider;
    /**
     * index (optional) - The index to add the layer at. If omitted, the layer will added on top of all existing layers.
     * @type {?}
     */
    AcMapLayerProviderComponent.prototype.index;
    /**
     * show (optional) - Determines if the map layer is shown.
     * @type {?}
     */
    AcMapLayerProviderComponent.prototype.show;
    /**
     * The alpha blending value of this layer: 0.0 to 1.0
     * @type {?}
     */
    AcMapLayerProviderComponent.prototype.alpha;
    /**
     * The brightness of this layer: 0.0 to 1.0
     * @type {?}
     */
    AcMapLayerProviderComponent.prototype.brightness;
    /**
     * The contrast of this layer: 0.0 to 1.0
     * @type {?}
     */
    AcMapLayerProviderComponent.prototype.contrast;
    /** @type {?} */
    AcMapLayerProviderComponent.prototype.imageryLayer;
    /** @type {?} */
    AcMapLayerProviderComponent.prototype.imageryLayersCollection;
    /** @type {?} */
    AcMapLayerProviderComponent.prototype.layerProvider;
    /**
     * @type {?}
     * @private
     */
    AcMapLayerProviderComponent.prototype.cesiumService;
}
//# sourceMappingURL=data:application/json;base64,