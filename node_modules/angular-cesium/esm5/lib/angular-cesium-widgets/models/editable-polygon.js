/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AcEntity } from '../../angular-cesium/models/ac-entity';
import { EditPoint } from './edit-point';
import { EditPolyline } from './edit-polyline';
import { GeoUtilsService } from '../../angular-cesium/services/geo-utils/geo-utils.service';
import { defaultLabelProps } from './label-props';
var EditablePolygon = /** @class */ (function (_super) {
    tslib_1.__extends(EditablePolygon, _super);
    function EditablePolygon(id, polygonsLayer, pointsLayer, polylinesLayer, coordinateConverter, polygonOptions, positions) {
        var _this = _super.call(this) || this;
        _this.id = id;
        _this.polygonsLayer = polygonsLayer;
        _this.pointsLayer = pointsLayer;
        _this.polylinesLayer = polylinesLayer;
        _this.coordinateConverter = coordinateConverter;
        _this.positions = [];
        _this.polylines = [];
        _this.doneCreation = false;
        _this._enableEdit = true;
        _this._labels = [];
        _this.polygonProps = polygonOptions.polygonProps;
        _this.defaultPointProps = polygonOptions.pointProps;
        _this.defaultPolylineProps = polygonOptions.polylineProps;
        if (positions && positions.length >= 3) {
            _this.createFromExisting(positions);
        }
        return _this;
    }
    Object.defineProperty(EditablePolygon.prototype, "labels", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labels;
        },
        set: /**
         * @param {?} labels
         * @return {?}
         */
        function (labels) {
            if (!labels) {
                return;
            }
            /** @type {?} */
            var positions = this.getRealPositions();
            this._labels = labels.map(function (label, index) {
                if (!label.position) {
                    label.position = positions[index];
                }
                return Object.assign({}, defaultLabelProps, label);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditablePolygon.prototype, "defaultPolylineProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultPolylineProps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._defaultPolylineProps = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditablePolygon.prototype, "defaultPointProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultPointProps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._defaultPointProps = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditablePolygon.prototype, "polygonProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._polygonProps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._polygonProps = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditablePolygon.prototype, "enableEdit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableEdit;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._enableEdit = value;
            this.positions.forEach(function (point) {
                point.show = value;
                _this.updatePointsLayer(false, point);
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    EditablePolygon.prototype.createFromExisting = /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    function (positions) {
        var _this = this;
        positions.forEach(function (position) {
            _this.addPointFromExisting(position);
        });
        this.addAllVirtualEditPoints();
        this.updatePolygonsLayer();
        this.doneCreation = true;
    };
    /**
     * @param {?} points
     * @param {?=} polygonProps
     * @return {?}
     */
    EditablePolygon.prototype.setPointsManually = /**
     * @param {?} points
     * @param {?=} polygonProps
     * @return {?}
     */
    function (points, polygonProps) {
        var _this = this;
        if (!this.doneCreation) {
            throw new Error('Update manually only in edit mode, after polygon is created');
        }
        this.positions.forEach(function (p) { return _this.pointsLayer.remove(p.getId()); });
        /** @type {?} */
        var newPoints = [];
        for (var i = 0; i < points.length; i++) {
            /** @type {?} */
            var pointOrCartesian = points[i];
            /** @type {?} */
            var newPoint = null;
            if (pointOrCartesian.pointProps) {
                newPoint = new EditPoint(this.id, pointOrCartesian.position, pointOrCartesian.pointProps);
            }
            else {
                newPoint = new EditPoint(this.id, pointOrCartesian, this.defaultPointProps);
            }
            newPoints.push(newPoint);
        }
        this.positions = newPoints;
        this.polygonProps = polygonProps ? polygonProps : this.polygonProps;
        this.updatePointsLayer.apply(this, tslib_1.__spread([true], this.positions));
        this.addAllVirtualEditPoints();
        this.updatePolygonsLayer();
    };
    /**
     * @private
     * @return {?}
     */
    EditablePolygon.prototype.addAllVirtualEditPoints = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var currentPoints = tslib_1.__spread(this.positions);
        currentPoints.forEach(function (pos, index) {
            /** @type {?} */
            var currentPoint = pos;
            /** @type {?} */
            var nextIndex = (index + 1) % (currentPoints.length);
            /** @type {?} */
            var nextPoint = currentPoints[nextIndex];
            /** @type {?} */
            var midPoint = _this.setMiddleVirtualPoint(currentPoint, nextPoint);
            _this.updatePointsLayer(false, midPoint);
        });
    };
    /**
     * @private
     * @param {?} firstP
     * @param {?} secondP
     * @return {?}
     */
    EditablePolygon.prototype.setMiddleVirtualPoint = /**
     * @private
     * @param {?} firstP
     * @param {?} secondP
     * @return {?}
     */
    function (firstP, secondP) {
        /** @type {?} */
        var currentCart = Cesium.Cartographic.fromCartesian(firstP.getPosition());
        /** @type {?} */
        var nextCart = Cesium.Cartographic.fromCartesian(secondP.getPosition());
        /** @type {?} */
        var midPointCartesian3 = this.coordinateConverter.midPointToCartesian3(currentCart, nextCart);
        /** @type {?} */
        var midPoint = new EditPoint(this.id, midPointCartesian3, this.defaultPointProps);
        midPoint.setVirtualEditPoint(true);
        /** @type {?} */
        var firstIndex = this.positions.indexOf(firstP);
        this.positions.splice(firstIndex + 1, 0, midPoint);
        return midPoint;
    };
    /**
     * @private
     * @param {?} virtualEditPoint
     * @param {?} prevPoint
     * @param {?} nextPoint
     * @return {?}
     */
    EditablePolygon.prototype.updateMiddleVirtualPoint = /**
     * @private
     * @param {?} virtualEditPoint
     * @param {?} prevPoint
     * @param {?} nextPoint
     * @return {?}
     */
    function (virtualEditPoint, prevPoint, nextPoint) {
        /** @type {?} */
        var prevPointCart = Cesium.Cartographic.fromCartesian(prevPoint.getPosition());
        /** @type {?} */
        var nextPointCart = Cesium.Cartographic.fromCartesian(nextPoint.getPosition());
        virtualEditPoint.setPosition(this.coordinateConverter.midPointToCartesian3(prevPointCart, nextPointCart));
    };
    /**
     * @param {?} point
     * @return {?}
     */
    EditablePolygon.prototype.changeVirtualPointToRealPoint = /**
     * @param {?} point
     * @return {?}
     */
    function (point) {
        point.setVirtualEditPoint(false); // virtual point becomes a real point
        // virtual point becomes a real point
        /** @type {?} */
        var pointsCount = this.positions.length;
        /** @type {?} */
        var pointIndex = this.positions.indexOf(point);
        /** @type {?} */
        var nextIndex = (pointIndex + 1) % (pointsCount);
        /** @type {?} */
        var preIndex = ((pointIndex - 1) + pointsCount) % pointsCount;
        /** @type {?} */
        var nextPoint = this.positions[nextIndex];
        /** @type {?} */
        var prePoint = this.positions[preIndex];
        /** @type {?} */
        var firstMidPoint = this.setMiddleVirtualPoint(prePoint, point);
        /** @type {?} */
        var secMidPoint = this.setMiddleVirtualPoint(point, nextPoint);
        this.updatePointsLayer(true, firstMidPoint, secMidPoint, point);
        this.updatePolygonsLayer();
    };
    /**
     * @private
     * @return {?}
     */
    EditablePolygon.prototype.renderPolylines = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.polylines.forEach(function (polyline) { return _this.polylinesLayer.remove(polyline.getId()); });
        this.polylines = [];
        /** @type {?} */
        var realPoints = this.positions.filter(function (pos) { return !pos.isVirtualEditPoint(); });
        realPoints.forEach(function (point, index) {
            /** @type {?} */
            var nextIndex = (index + 1) % (realPoints.length);
            /** @type {?} */
            var nextPoint = realPoints[nextIndex];
            /** @type {?} */
            var polyline = new EditPolyline(_this.id, point.getPosition(), nextPoint.getPosition(), _this.defaultPolylineProps);
            _this.polylines.push(polyline);
            _this.polylinesLayer.update(polyline, polyline.getId());
        });
    };
    /**
     * @param {?} position
     * @return {?}
     */
    EditablePolygon.prototype.addPointFromExisting = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var newPoint = new EditPoint(this.id, position, this.defaultPointProps);
        this.positions.push(newPoint);
        this.updatePointsLayer(true, newPoint);
    };
    /**
     * @param {?} position
     * @return {?}
     */
    EditablePolygon.prototype.addPoint = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (this.doneCreation) {
            return;
        }
        /** @type {?} */
        var isFirstPoint = !this.positions.length;
        if (isFirstPoint) {
            /** @type {?} */
            var firstPoint = new EditPoint(this.id, position, this.defaultPointProps);
            this.positions.push(firstPoint);
            this.updatePointsLayer(true, firstPoint);
        }
        this.movingPoint = new EditPoint(this.id, position.clone(), this.defaultPointProps);
        this.positions.push(this.movingPoint);
        this.updatePointsLayer(true, this.movingPoint);
        this.updatePolygonsLayer();
    };
    /**
     * @param {?} toPosition
     * @param {?} editPoint
     * @return {?}
     */
    EditablePolygon.prototype.movePoint = /**
     * @param {?} toPosition
     * @param {?} editPoint
     * @return {?}
     */
    function (toPosition, editPoint) {
        editPoint.setPosition(toPosition);
        this.updatePolygonsLayer();
        if (this.doneCreation) {
            if (editPoint.isVirtualEditPoint()) {
                this.changeVirtualPointToRealPoint(editPoint);
            }
            /** @type {?} */
            var pointsCount = this.positions.length;
            /** @type {?} */
            var pointIndex = this.positions.indexOf(editPoint);
            /** @type {?} */
            var nextVirtualPoint = this.positions[(pointIndex + 1) % (pointsCount)];
            /** @type {?} */
            var nextRealPoint = this.positions[(pointIndex + 2) % (pointsCount)];
            /** @type {?} */
            var prevVirtualPoint = this.positions[((pointIndex - 1) + pointsCount) % pointsCount];
            /** @type {?} */
            var prevRealPoint = this.positions[((pointIndex - 2) + pointsCount) % pointsCount];
            this.updateMiddleVirtualPoint(nextVirtualPoint, editPoint, nextRealPoint);
            this.updateMiddleVirtualPoint(prevVirtualPoint, editPoint, prevRealPoint);
            this.updatePointsLayer(false, nextVirtualPoint);
            this.updatePointsLayer(false, prevVirtualPoint);
        }
        this.updatePointsLayer(true, editPoint);
    };
    /**
     * @param {?} toPosition
     * @return {?}
     */
    EditablePolygon.prototype.moveTempMovingPoint = /**
     * @param {?} toPosition
     * @return {?}
     */
    function (toPosition) {
        if (this.movingPoint) {
            this.movePoint(toPosition, this.movingPoint);
        }
    };
    /**
     * @param {?} startMovingPosition
     * @param {?} draggedToPosition
     * @return {?}
     */
    EditablePolygon.prototype.movePolygon = /**
     * @param {?} startMovingPosition
     * @param {?} draggedToPosition
     * @return {?}
     */
    function (startMovingPosition, draggedToPosition) {
        var _this = this;
        if (!this.doneCreation) {
            return;
        }
        if (!this.lastDraggedToPosition) {
            this.lastDraggedToPosition = startMovingPosition;
        }
        /** @type {?} */
        var delta = GeoUtilsService.getPositionsDelta(this.lastDraggedToPosition, draggedToPosition);
        this.positions.forEach(function (point) {
            GeoUtilsService.addDeltaToPosition(point.getPosition(), delta, true);
        });
        this.updatePointsLayer();
        this.lastDraggedToPosition = draggedToPosition;
        this.positions.forEach(function (point) { return _this.updatePointsLayer(true, point); });
    };
    /**
     * @return {?}
     */
    EditablePolygon.prototype.endMovePolygon = /**
     * @return {?}
     */
    function () {
        this.lastDraggedToPosition = undefined;
    };
    /**
     * @param {?} pointToRemove
     * @return {?}
     */
    EditablePolygon.prototype.removePoint = /**
     * @param {?} pointToRemove
     * @return {?}
     */
    function (pointToRemove) {
        var _this = this;
        this.removePosition(pointToRemove);
        this.positions
            .filter(function (p) { return p.isVirtualEditPoint(); })
            .forEach(function (p) { return _this.removePosition(p); });
        this.addAllVirtualEditPoints();
        this.renderPolylines();
        if (this.getPointsCount() >= 3) {
            this.polygonsLayer.update(this, this.id);
        }
    };
    /**
     * @param {?} position
     * @return {?}
     */
    EditablePolygon.prototype.addLastPoint = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.doneCreation = true;
        this.removePosition(this.movingPoint); // remove movingPoint
        this.movingPoint = null;
        this.updatePolygonsLayer();
        this.addAllVirtualEditPoints();
    };
    /**
     * @return {?}
     */
    EditablePolygon.prototype.getRealPositions = /**
     * @return {?}
     */
    function () {
        return this.getRealPoints().map(function (position) { return position.getPosition(); });
    };
    /**
     * @return {?}
     */
    EditablePolygon.prototype.getRealPoints = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.positions.filter(function (position) { return !position.isVirtualEditPoint() && position !== _this.movingPoint; });
    };
    /**
     * @return {?}
     */
    EditablePolygon.prototype.getPositionsHierarchy = /**
     * @return {?}
     */
    function () {
        return this.positions.filter(function (position) { return !position.isVirtualEditPoint(); }).map(function (position) { return position.getPosition(); });
    };
    /**
     * @return {?}
     */
    EditablePolygon.prototype.getPositionsHierarchyCallbackProperty = /**
     * @return {?}
     */
    function () {
        return new Cesium.CallbackProperty(this.getPositionsHierarchy.bind(this), false);
    };
    /**
     * @private
     * @param {?} point
     * @return {?}
     */
    EditablePolygon.prototype.removePosition = /**
     * @private
     * @param {?} point
     * @return {?}
     */
    function (point) {
        /** @type {?} */
        var index = this.positions.findIndex(function (p) { return p === point; });
        if (index < 0) {
            return;
        }
        this.positions.splice(index, 1);
        this.pointsLayer.remove(point.getId());
    };
    /**
     * @private
     * @return {?}
     */
    EditablePolygon.prototype.updatePolygonsLayer = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.getPointsCount() >= 3) {
            this.polygonsLayer.update(this, this.id);
        }
    };
    /**
     * @private
     * @param {?=} renderPolylines
     * @param {...?} points
     * @return {?}
     */
    EditablePolygon.prototype.updatePointsLayer = /**
     * @private
     * @param {?=} renderPolylines
     * @param {...?} points
     * @return {?}
     */
    function (renderPolylines) {
        var _this = this;
        if (renderPolylines === void 0) { renderPolylines = true; }
        var points = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            points[_i - 1] = arguments[_i];
        }
        if (renderPolylines) {
            this.renderPolylines();
        }
        points.forEach(function (p) { return _this.pointsLayer.update(p, p.getId()); });
    };
    /**
     * @return {?}
     */
    EditablePolygon.prototype.dispose = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.polygonsLayer.remove(this.id);
        this.positions.forEach(function (editPoint) {
            _this.pointsLayer.remove(editPoint.getId());
        });
        this.polylines.forEach(function (line) { return _this.polylinesLayer.remove(line.getId()); });
        if (this.movingPoint) {
            this.pointsLayer.remove(this.movingPoint.getId());
            this.movingPoint = undefined;
        }
        this.positions.length = 0;
    };
    /**
     * @return {?}
     */
    EditablePolygon.prototype.getPointsCount = /**
     * @return {?}
     */
    function () {
        return this.positions.length;
    };
    /**
     * @return {?}
     */
    EditablePolygon.prototype.getId = /**
     * @return {?}
     */
    function () {
        return this.id;
    };
    return EditablePolygon;
}(AcEntity));
export { EditablePolygon };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.positions;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.polylines;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.movingPoint;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.doneCreation;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._enableEdit;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._polygonProps;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._defaultPointProps;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._defaultPolylineProps;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.lastDraggedToPosition;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype._labels;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.id;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.polygonsLayer;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.pointsLayer;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.polylinesLayer;
    /**
     * @type {?}
     * @private
     */
    EditablePolygon.prototype.coordinateConverter;
}
//# sourceMappingURL=data:application/json;base64,