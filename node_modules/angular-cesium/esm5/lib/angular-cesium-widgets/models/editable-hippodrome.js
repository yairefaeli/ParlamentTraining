/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { AcEntity } from '../../angular-cesium/models/ac-entity';
import { EditPoint } from './edit-point';
import { GeoUtilsService } from '../../angular-cesium/services/geo-utils/geo-utils.service';
import { defaultLabelProps } from './label-props';
var EditableHippodrome = /** @class */ (function (_super) {
    tslib_1.__extends(EditableHippodrome, _super);
    function EditableHippodrome(id, pointsLayer, hippodromeLayer, coordinateConverter, editOptions, positions) {
        var _this = _super.call(this) || this;
        _this.id = id;
        _this.pointsLayer = pointsLayer;
        _this.hippodromeLayer = hippodromeLayer;
        _this.coordinateConverter = coordinateConverter;
        _this.positions = [];
        _this.done = false;
        _this._enableEdit = true;
        _this._labels = [];
        _this.defaultPointProps = editOptions.pointProps;
        _this.hippodromeProps = editOptions.hippodromeProps;
        if (positions && positions.length === 2) {
            _this.createFromExisting(positions);
        }
        else if (positions) {
            throw new Error('Hippodrome consist of 2 points but provided ' + positions.length);
        }
        return _this;
    }
    Object.defineProperty(EditableHippodrome.prototype, "labels", {
        get: /**
         * @return {?}
         */
        function () {
            return this._labels;
        },
        set: /**
         * @param {?} labels
         * @return {?}
         */
        function (labels) {
            if (!labels) {
                return;
            }
            /** @type {?} */
            var positions = this.getRealPositions();
            this._labels = labels.map(function (label, index) {
                if (!label.position) {
                    label.position = positions[index];
                }
                return Object.assign({}, defaultLabelProps, label);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditableHippodrome.prototype, "hippodromeProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._hippodromeProps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._hippodromeProps = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditableHippodrome.prototype, "defaultPointProps", {
        get: /**
         * @return {?}
         */
        function () {
            return this._defaultPointProps;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._defaultPointProps = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditableHippodrome.prototype, "enableEdit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableEdit;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            this._enableEdit = value;
            this.positions.forEach(function (point) {
                point.show = value;
                _this.updatePointsLayer(point);
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    EditableHippodrome.prototype.createFromExisting = /**
     * @private
     * @param {?} positions
     * @return {?}
     */
    function (positions) {
        var _this = this;
        positions.forEach(function (position) {
            _this.addPointFromExisting(position);
        });
        this.createHeightEditPoints();
        this.updateHippdromeLayer();
        this.updatePointsLayer.apply(this, tslib_1.__spread(this.positions));
        this.done = true;
    };
    /**
     * @param {?} points
     * @param {?=} widthMeters
     * @return {?}
     */
    EditableHippodrome.prototype.setPointsManually = /**
     * @param {?} points
     * @param {?=} widthMeters
     * @return {?}
     */
    function (points, widthMeters) {
        var _this = this;
        if (!this.done) {
            throw new Error('Update manually only in edit mode, after polyline is created');
        }
        this.hippodromeProps.width = widthMeters ? widthMeters : this.hippodromeProps.width;
        this.positions.forEach(function (p) { return _this.pointsLayer.remove(p.getId()); });
        this.positions = points;
        this.createHeightEditPoints();
        this.updatePointsLayer.apply(this, tslib_1.__spread(points));
        this.updateHippdromeLayer();
    };
    /**
     * @param {?} position
     * @return {?}
     */
    EditableHippodrome.prototype.addPointFromExisting = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        /** @type {?} */
        var newPoint = new EditPoint(this.id, position, this.defaultPointProps);
        this.positions.push(newPoint);
        this.updatePointsLayer(newPoint);
    };
    /**
     * @param {?} position
     * @return {?}
     */
    EditableHippodrome.prototype.addPoint = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        if (this.done) {
            return;
        }
        /** @type {?} */
        var isFirstPoint = !this.positions.length;
        if (isFirstPoint) {
            /** @type {?} */
            var firstPoint = new EditPoint(this.id, position, this.defaultPointProps);
            this.positions.push(firstPoint);
            this.movingPoint = new EditPoint(this.id, position.clone(), this.defaultPointProps);
            this.positions.push(this.movingPoint);
            this.updatePointsLayer(firstPoint);
        }
        else {
            this.createHeightEditPoints();
            this.updatePointsLayer.apply(this, tslib_1.__spread(this.positions));
            this.updateHippdromeLayer();
            this.done = true;
            this.movingPoint = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    EditableHippodrome.prototype.createHeightEditPoints = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.positions.filter(function (p) { return p.isVirtualEditPoint(); }).forEach(function (p) { return _this.removePosition(p); });
        /** @type {?} */
        var firstP = this.getRealPoints()[0];
        /** @type {?} */
        var secP = this.getRealPoints()[1];
        /** @type {?} */
        var midPointCartesian3 = Cesium.Cartesian3.lerp(firstP.getPosition(), secP.getPosition(), 0.5, new Cesium.Cartesian3());
        /** @type {?} */
        var bearingDeg = this.coordinateConverter.bearingToCartesian(firstP.getPosition(), secP.getPosition());
        /** @type {?} */
        var upAzimuth = Cesium.Math.toRadians(bearingDeg) - Math.PI / 2;
        this.createMiddleEditablePoint(midPointCartesian3, upAzimuth);
        /** @type {?} */
        var downAzimuth = Cesium.Math.toRadians(bearingDeg) + Math.PI / 2;
        this.createMiddleEditablePoint(midPointCartesian3, downAzimuth);
    };
    /**
     * @private
     * @param {?} midPointCartesian3
     * @param {?} azimuth
     * @return {?}
     */
    EditableHippodrome.prototype.createMiddleEditablePoint = /**
     * @private
     * @param {?} midPointCartesian3
     * @param {?} azimuth
     * @return {?}
     */
    function (midPointCartesian3, azimuth) {
        /** @type {?} */
        var upEditCartesian3 = GeoUtilsService.pointByLocationDistanceAndAzimuth(midPointCartesian3, this.hippodromeProps.width / 2, azimuth, true);
        /** @type {?} */
        var midPoint = new EditPoint(this.id, upEditCartesian3, this.defaultPointProps);
        midPoint.setVirtualEditPoint(true);
        this.positions.push(midPoint);
    };
    /**
     * @param {?} toPosition
     * @param {?} editPoint
     * @return {?}
     */
    EditableHippodrome.prototype.movePoint = /**
     * @param {?} toPosition
     * @param {?} editPoint
     * @return {?}
     */
    function (toPosition, editPoint) {
        if (!editPoint.isVirtualEditPoint()) {
            editPoint.setPosition(toPosition);
            this.createHeightEditPoints();
            this.updatePointsLayer.apply(this, tslib_1.__spread(this.positions));
            this.updateHippdromeLayer();
        }
        else {
            this.changeWidthByNewPoint(toPosition);
        }
    };
    /**
     * @private
     * @param {?} toPosition
     * @return {?}
     */
    EditableHippodrome.prototype.changeWidthByNewPoint = /**
     * @private
     * @param {?} toPosition
     * @return {?}
     */
    function (toPosition) {
        /** @type {?} */
        var firstP = this.getRealPoints()[0];
        /** @type {?} */
        var secP = this.getRealPoints()[1];
        /** @type {?} */
        var midPointCartesian3 = Cesium.Cartesian3.lerp(firstP.getPosition(), secP.getPosition(), 0.5, new Cesium.Cartesian3());
        /** @type {?} */
        var bearingDeg = this.coordinateConverter.bearingToCartesian(midPointCartesian3, toPosition);
        /** @type {?} */
        var normalizedBearingDeb = bearingDeg;
        if (bearingDeg > 270) {
            normalizedBearingDeb = bearingDeg - 270;
        }
        else if (bearingDeg > 180) {
            normalizedBearingDeb = bearingDeg - 180;
        }
        /** @type {?} */
        var bearingDegHippodromeDots = this.coordinateConverter.bearingToCartesian(firstP.getPosition(), secP.getPosition());
        if (bearingDegHippodromeDots > 180) {
            bearingDegHippodromeDots = this.coordinateConverter.bearingToCartesian(secP.getPosition(), firstP.getPosition());
        }
        /** @type {?} */
        var fixedBearingDeg = bearingDegHippodromeDots > normalizedBearingDeb
            ? bearingDegHippodromeDots - normalizedBearingDeb
            : normalizedBearingDeb - bearingDegHippodromeDots;
        if (bearingDeg > 270) {
            fixedBearingDeg = bearingDeg - bearingDegHippodromeDots;
        }
        /** @type {?} */
        var distanceMeters = Math.abs(GeoUtilsService.distance(midPointCartesian3, toPosition));
        /** @type {?} */
        var radiusWidth = Math.sin(Cesium.Math.toRadians(fixedBearingDeg)) * distanceMeters;
        this.hippodromeProps.width = Math.abs(radiusWidth) * 2;
        this.createHeightEditPoints();
        this.updatePointsLayer.apply(this, tslib_1.__spread(this.positions));
        this.updateHippdromeLayer();
    };
    /**
     * @param {?} startMovingPosition
     * @param {?} draggedToPosition
     * @return {?}
     */
    EditableHippodrome.prototype.moveShape = /**
     * @param {?} startMovingPosition
     * @param {?} draggedToPosition
     * @return {?}
     */
    function (startMovingPosition, draggedToPosition) {
        if (!this.lastDraggedToPosition) {
            this.lastDraggedToPosition = startMovingPosition;
        }
        /** @type {?} */
        var delta = GeoUtilsService.getPositionsDelta(this.lastDraggedToPosition, draggedToPosition);
        this.getRealPoints().forEach(function (point) {
            GeoUtilsService.addDeltaToPosition(point.getPosition(), delta, true);
        });
        this.createHeightEditPoints();
        this.updatePointsLayer.apply(this, tslib_1.__spread(this.positions));
        this.updateHippdromeLayer();
        this.lastDraggedToPosition = draggedToPosition;
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.endMoveShape = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.lastDraggedToPosition = undefined;
        this.createHeightEditPoints();
        this.positions.forEach(function (point) { return _this.updatePointsLayer(point); });
        this.updateHippdromeLayer();
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.endMovePoint = /**
     * @return {?}
     */
    function () {
        this.createHeightEditPoints();
        this.updatePointsLayer.apply(this, tslib_1.__spread(this.positions));
    };
    /**
     * @param {?} toPosition
     * @return {?}
     */
    EditableHippodrome.prototype.moveTempMovingPoint = /**
     * @param {?} toPosition
     * @return {?}
     */
    function (toPosition) {
        if (this.movingPoint) {
            this.movePoint(toPosition, this.movingPoint);
        }
    };
    /**
     * @param {?} pointToRemove
     * @return {?}
     */
    EditableHippodrome.prototype.removePoint = /**
     * @param {?} pointToRemove
     * @return {?}
     */
    function (pointToRemove) {
        var _this = this;
        this.removePosition(pointToRemove);
        this.positions.filter(function (p) { return p.isVirtualEditPoint(); }).forEach(function (p) { return _this.removePosition(p); });
    };
    /**
     * @param {?} position
     * @return {?}
     */
    EditableHippodrome.prototype.addLastPoint = /**
     * @param {?} position
     * @return {?}
     */
    function (position) {
        this.done = true;
        this.removePosition(this.movingPoint); // remove movingPoint
        this.movingPoint = null;
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.getRealPositions = /**
     * @return {?}
     */
    function () {
        return this.getRealPoints().map(function (position) { return position.getPosition(); });
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.getRealPositionsCallbackProperty = /**
     * @return {?}
     */
    function () {
        return new Cesium.CallbackProperty(this.getRealPositions.bind(this), false);
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.getRealPoints = /**
     * @return {?}
     */
    function () {
        return this.positions.filter(function (position) { return !position.isVirtualEditPoint(); });
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.getWidth = /**
     * @return {?}
     */
    function () {
        return this.hippodromeProps.width;
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.getPositions = /**
     * @return {?}
     */
    function () {
        return this.positions.map(function (position) { return position.getPosition(); });
    };
    /**
     * @private
     * @param {?} point
     * @return {?}
     */
    EditableHippodrome.prototype.removePosition = /**
     * @private
     * @param {?} point
     * @return {?}
     */
    function (point) {
        /** @type {?} */
        var index = this.positions.findIndex(function (p) { return p === point; });
        if (index < 0) {
            return;
        }
        this.positions.splice(index, 1);
        this.pointsLayer.remove(point.getId());
    };
    /**
     * @private
     * @param {...?} point
     * @return {?}
     */
    EditableHippodrome.prototype.updatePointsLayer = /**
     * @private
     * @param {...?} point
     * @return {?}
     */
    function () {
        var _this = this;
        var point = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            point[_i] = arguments[_i];
        }
        point.forEach(function (p) { return _this.pointsLayer.update(p, p.getId()); });
    };
    /**
     * @private
     * @return {?}
     */
    EditableHippodrome.prototype.updateHippdromeLayer = /**
     * @private
     * @return {?}
     */
    function () {
        this.hippodromeLayer.update(this, this.id);
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.dispose = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.hippodromeLayer.remove(this.id);
        this.positions.forEach(function (editPoint) {
            _this.pointsLayer.remove(editPoint.getId());
        });
        if (this.movingPoint) {
            this.pointsLayer.remove(this.movingPoint.getId());
            this.movingPoint = undefined;
        }
        this.positions.length = 0;
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.getPointsCount = /**
     * @return {?}
     */
    function () {
        return this.positions.length;
    };
    /**
     * @return {?}
     */
    EditableHippodrome.prototype.getId = /**
     * @return {?}
     */
    function () {
        return this.id;
    };
    return EditableHippodrome;
}(AcEntity));
export { EditableHippodrome };
if (false) {
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.positions;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.movingPoint;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.done;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype._enableEdit;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype._defaultPointProps;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype._hippodromeProps;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.lastDraggedToPosition;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype._labels;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.id;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.pointsLayer;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.hippodromeLayer;
    /**
     * @type {?}
     * @private
     */
    EditableHippodrome.prototype.coordinateConverter;
}
//# sourceMappingURL=data:application/json;base64,