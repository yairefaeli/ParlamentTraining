/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { CoordinateConverter } from '../../../angular-cesium/services/coordinate-converter/coordinate-converter.service';
import { EditActions } from '../../models/edit-actions.enum';
import { EditModes } from '../../models/edit-mode.enum';
import { PolylinesEditorService } from '../../services/entity-editors/polyline-editor/polylines-editor.service';
/**
 *
 * Range and bearing component that is used to draw range and bearing on the map.
 * The inputs are used to customize the range and bearing style and behavior.
 * Create component reference and use the `create()` function to start creating R&B on the map.
 * The function receives an optional RangeAndBearingOptions object that defines the created range and bearing style and behavior
 * (on top of the default and global definitions).
 *
 * Usage:
 *
 * my-component.ts:
 *
 * ```
 * \\@ViewChild('rangeAndBearing') private rangeAndBearing: RangeAndBearingComponent; // Get R&B reference
 *  // ...
 * this.rangeAndBearing.create({style: { pointProps: { pixelSize: 12 } }, bearingLabelsStyle: { fillColor: Cesium.Color.GREEN } });
 * ```
 *
 * my-component.html
 * ```
 * <range-and-bearing #rangeAndBearing></range-and-bearing> // Optional inputs defines global style and behavior.
 * ```
 *
 */
var RangeAndBearingComponent = /** @class */ (function () {
    function RangeAndBearingComponent(polylineEditor, coordinateConverter) {
        this.polylineEditor = polylineEditor;
        this.coordinateConverter = coordinateConverter;
        this.lineEditOptions = {};
        this.labelsStyle = {};
        this.distanceLabelsStyle = {};
        this.bearingLabelsStyle = {};
    }
    /**
     * @param {?=} __0
     * @return {?}
     */
    RangeAndBearingComponent.prototype.create = /**
     * @param {?=} __0
     * @return {?}
     */
    function (_a) {
        var _this = this;
        var _b = _a === void 0 ? { lineEditOptions: {}, labelsStyle: {}, distanceLabelsStyle: {}, bearingLabelsStyle: {} } : _a, _c = _b.lineEditOptions, lineEditOptions = _c === void 0 ? {} : _c, _d = _b.labelsStyle, labelsStyle = _d === void 0 ? {} : _d, _e = _b.distanceLabelsStyle, distanceLabelsStyle = _e === void 0 ? {} : _e, _f = _b.bearingLabelsStyle, bearingLabelsStyle = _f === void 0 ? {} : _f, bearingStringFn = _b.bearingStringFn, distanceStringFn = _b.distanceStringFn, labelsRenderFn = _b.labelsRenderFn;
        /** @type {?} */
        var rnb = this.polylineEditor.create(tslib_1.__assign({ allowDrag: false, pointProps: {
                showVirtual: false,
                pixelSize: 8,
            }, polylineProps: {
                width: 2,
            } }, this.lineEditOptions, lineEditOptions));
        if (labelsRenderFn) {
            rnb.setLabelsRenderFn(labelsRenderFn);
        }
        else if (this.labelsRenderFn) {
            rnb.setLabelsRenderFn(this.labelsRenderFn);
        }
        else {
            rnb.setLabelsRenderFn(function (update) {
                /** @type {?} */
                var positions = update.positions;
                /** @type {?} */
                var totalDistance = 0;
                if (!positions || positions.length === 0) {
                    return [];
                }
                return (update.editMode === EditModes.CREATE && update.editAction !== EditActions.ADD_LAST_POINT
                    ? tslib_1.__spread(positions, [update.updatedPosition]) : positions).reduce(function (labels, position, index, array) {
                    if (index !== 0) {
                        /** @type {?} */
                        var previousPosition = array[index - 1];
                        /** @type {?} */
                        var bearing = _this.coordinateConverter.bearingToCartesian(previousPosition, position);
                        /** @type {?} */
                        var distance = Cesium.Cartesian3.distance(previousPosition, position) / 1000;
                        labels.push(tslib_1.__assign({ text: (bearingStringFn && bearingStringFn(bearing)) ||
                                (_this.bearingStringFn && _this.bearingStringFn(bearing)) ||
                                bearing.toFixed(2) + "\u00B0", scale: 0.2, font: '80px Helvetica', pixelOffset: new Cesium.Cartesian2(-20, -8), position: new Cesium.Cartesian3((position.x + previousPosition.x) / 2, (position.y + previousPosition.y) / 2, (position.z + previousPosition.z) / 2), fillColor: Cesium.Color.WHITE, outlineColor: Cesium.Color.WHITE, showBackground: true }, ((/** @type {?} */ (_this.labelsStyle))), ((/** @type {?} */ (labelsStyle))), ((/** @type {?} */ (_this.bearingLabelsStyle))), ((/** @type {?} */ (bearingLabelsStyle)))), tslib_1.__assign({ text: (distanceStringFn && distanceStringFn(totalDistance + distance)) ||
                                (_this.distanceStringFn && _this.distanceStringFn(totalDistance + distance)) ||
                                (totalDistance + distance).toFixed(2) + " Km", scale: 0.2, font: '80px Helvetica', pixelOffset: new Cesium.Cartesian2(-35, -8), position: position, fillColor: Cesium.Color.WHITE, outlineColor: Cesium.Color.WHITE, showBackground: true }, ((/** @type {?} */ (_this.labelsStyle))), ((/** @type {?} */ (labelsStyle))), ((/** @type {?} */ (_this.distanceLabelsStyle))), ((/** @type {?} */ (distanceLabelsStyle)))));
                        totalDistance += distance;
                    }
                    return labels;
                }, [
                    tslib_1.__assign({ text: (distanceStringFn && distanceStringFn(0)) || (_this.distanceStringFn && _this.distanceStringFn(0)) || "0 Km", scale: 0.2, font: '80px Helvetica', pixelOffset: new Cesium.Cartesian2(-20, -8), position: positions[0], fillColor: Cesium.Color.WHITE, outlineColor: Cesium.Color.WHITE, showBackground: true }, ((/** @type {?} */ (_this.labelsStyle))), ((/** @type {?} */ (labelsStyle))), ((/** @type {?} */ (_this.distanceLabelsStyle))), ((/** @type {?} */ (distanceLabelsStyle)))),
                ]);
            });
        }
        return rnb;
    };
    RangeAndBearingComponent.decorators = [
        { type: Component, args: [{
                    selector: 'range-and-bearing',
                    template: "\n    <polylines-editor></polylines-editor>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [PolylinesEditorService]
                }] }
    ];
    /** @nocollapse */
    RangeAndBearingComponent.ctorParameters = function () { return [
        { type: PolylinesEditorService },
        { type: CoordinateConverter }
    ]; };
    RangeAndBearingComponent.propDecorators = {
        lineEditOptions: [{ type: Input }],
        labelsStyle: [{ type: Input }],
        distanceLabelsStyle: [{ type: Input }],
        bearingLabelsStyle: [{ type: Input }],
        bearingStringFn: [{ type: Input }],
        distanceStringFn: [{ type: Input }],
        labelsRenderFn: [{ type: Input }]
    };
    return RangeAndBearingComponent;
}());
export { RangeAndBearingComponent };
if (false) {
    /** @type {?} */
    RangeAndBearingComponent.prototype.lineEditOptions;
    /** @type {?} */
    RangeAndBearingComponent.prototype.labelsStyle;
    /** @type {?} */
    RangeAndBearingComponent.prototype.distanceLabelsStyle;
    /** @type {?} */
    RangeAndBearingComponent.prototype.bearingLabelsStyle;
    /** @type {?} */
    RangeAndBearingComponent.prototype.bearingStringFn;
    /** @type {?} */
    RangeAndBearingComponent.prototype.distanceStringFn;
    /** @type {?} */
    RangeAndBearingComponent.prototype.labelsRenderFn;
    /**
     * @type {?}
     * @private
     */
    RangeAndBearingComponent.prototype.polylineEditor;
    /**
     * @type {?}
     * @private
     */
    RangeAndBearingComponent.prototype.coordinateConverter;
}
/**
 * @record
 */
export function RangeAndBearingOptions() { }
if (false) {
    /** @type {?|undefined} */
    RangeAndBearingOptions.prototype.lineEditOptions;
    /** @type {?|undefined} */
    RangeAndBearingOptions.prototype.labelsStyle;
    /** @type {?|undefined} */
    RangeAndBearingOptions.prototype.distanceLabelsStyle;
    /** @type {?|undefined} */
    RangeAndBearingOptions.prototype.bearingLabelsStyle;
    /** @type {?|undefined} */
    RangeAndBearingOptions.prototype.bearingStringFn;
    /** @type {?|undefined} */
    RangeAndBearingOptions.prototype.distanceStringFn;
    /** @type {?|undefined} */
    RangeAndBearingOptions.prototype.labelsRenderFn;
}
//# sourceMappingURL=data:application/json;base64,