/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';
import { EditModes } from '../../models/edit-mode.enum';
import { EditActions } from '../../models/edit-actions.enum';
import { AcLayerComponent } from '../../../angular-cesium/components/ac-layer/ac-layer.component';
import { CoordinateConverter } from '../../../angular-cesium/services/coordinate-converter/coordinate-converter.service';
import { MapEventsManagerService } from '../../../angular-cesium/services/map-events-mananger/map-events-manager';
import { Subject } from 'rxjs';
import { CameraService } from '../../../angular-cesium/services/camera/camera.service';
import { PolylinesEditorService } from '../../services/entity-editors/polyline-editor/polylines-editor.service';
import { PolylinesManagerService } from '../../services/entity-editors/polyline-editor/polylines-manager.service';
var PolylinesEditorComponent = /** @class */ (function () {
    function PolylinesEditorComponent(polylinesEditor, coordinateConverter, mapEventsManager, cameraService, polylinesManager) {
        this.polylinesEditor = polylinesEditor;
        this.coordinateConverter = coordinateConverter;
        this.mapEventsManager = mapEventsManager;
        this.cameraService = cameraService;
        this.polylinesManager = polylinesManager;
        this.Cesium = Cesium;
        this.editPoints$ = new Subject();
        this.editPolylines$ = new Subject();
        this.polylineLabels$ = new Subject();
        this.polylinesEditor.init(this.mapEventsManager, this.coordinateConverter, this.cameraService, polylinesManager);
        this.startListeningToEditorUpdates();
    }
    /**
     * @private
     * @return {?}
     */
    PolylinesEditorComponent.prototype.startListeningToEditorUpdates = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.polylinesEditor.onUpdate().subscribe(function (update) {
            if (update.editMode === EditModes.CREATE || update.editMode === EditModes.CREATE_OR_EDIT) {
                _this.handleCreateUpdates(update);
            }
            else if (update.editMode === EditModes.EDIT) {
                _this.handleEditUpdates(update);
            }
        });
    };
    /**
     * @param {?} element
     * @param {?} index
     * @return {?}
     */
    PolylinesEditorComponent.prototype.getLabelId = /**
     * @param {?} element
     * @param {?} index
     * @return {?}
     */
    function (element, index) {
        return index.toString();
    };
    /**
     * @param {?} polyline
     * @param {?} update
     * @param {?=} labels
     * @return {?}
     */
    PolylinesEditorComponent.prototype.renderEditLabels = /**
     * @param {?} polyline
     * @param {?} update
     * @param {?=} labels
     * @return {?}
     */
    function (polyline, update, labels) {
        update.positions = polyline.getRealPositions();
        update.points = polyline.getRealPoints();
        if (labels) {
            polyline.labels = labels;
            this.polylineLabelsLayer.update(polyline, polyline.getId());
            return;
        }
        if (!this.editLabelsRenderFn) {
            return;
        }
        polyline.labels = this.editLabelsRenderFn(update, polyline.labels);
        this.polylineLabelsLayer.update(polyline, polyline.getId());
    };
    /**
     * @param {?} polyline
     * @return {?}
     */
    PolylinesEditorComponent.prototype.removeEditLabels = /**
     * @param {?} polyline
     * @return {?}
     */
    function (polyline) {
        polyline.labels = [];
        this.polylineLabelsLayer.remove(polyline.getId());
    };
    /**
     * @param {?} update
     * @return {?}
     */
    PolylinesEditorComponent.prototype.handleCreateUpdates = /**
     * @param {?} update
     * @return {?}
     */
    function (update) {
        switch (update.editAction) {
            case EditActions.INIT: {
                this.polylinesManager.createEditablePolyline(update.id, this.editPointsLayer, this.editPolylinesLayer, this.coordinateConverter, update.polylineOptions);
                break;
            }
            case EditActions.MOUSE_MOVE: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (update.updatedPosition) {
                    polyline.moveTempMovingPoint(update.updatedPosition);
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            case EditActions.ADD_POINT: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (update.updatedPosition) {
                    polyline.addPoint(update.updatedPosition);
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            case EditActions.ADD_LAST_POINT: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (update.updatedPosition) {
                    polyline.addLastPoint(update.updatedPosition);
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            case EditActions.DISPOSE: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                polyline.dispose();
                this.removeEditLabels(polyline);
                this.editLabelsRenderFn = undefined;
                break;
            }
            case EditActions.SET_EDIT_LABELS_RENDER_CALLBACK: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                this.editLabelsRenderFn = update.labelsRenderFn;
                this.renderEditLabels(polyline, update);
                break;
            }
            case EditActions.UPDATE_EDIT_LABELS: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                this.renderEditLabels(polyline, update, update.updateLabels);
                break;
            }
            case EditActions.SET_MANUALLY: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                this.renderEditLabels(polyline, update, update.updateLabels);
                break;
            }
            default: {
                return;
            }
        }
    };
    /**
     * @param {?} update
     * @return {?}
     */
    PolylinesEditorComponent.prototype.handleEditUpdates = /**
     * @param {?} update
     * @return {?}
     */
    function (update) {
        switch (update.editAction) {
            case EditActions.INIT: {
                this.polylinesManager.createEditablePolyline(update.id, this.editPointsLayer, this.editPolylinesLayer, this.coordinateConverter, update.polylineOptions, update.positions);
                break;
            }
            case EditActions.DRAG_POINT: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (polyline && polyline.enableEdit) {
                    polyline.movePoint(update.updatedPosition, update.updatedPoint);
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            case EditActions.DRAG_POINT_FINISH: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (polyline && polyline.enableEdit && update.updatedPoint.isVirtualEditPoint()) {
                    polyline.changeVirtualPointToRealPoint(update.updatedPoint);
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            case EditActions.REMOVE_POINT: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (polyline && polyline.enableEdit) {
                    polyline.removePoint(update.updatedPoint);
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            case EditActions.DISABLE: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (polyline) {
                    polyline.enableEdit = false;
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            case EditActions.ENABLE: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (polyline) {
                    polyline.enableEdit = true;
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            case EditActions.DRAG_SHAPE: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (polyline && polyline.enableEdit) {
                    polyline.moveShape(update.draggedPosition, update.updatedPosition);
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            case EditActions.DRAG_SHAPE_FINISH: {
                /** @type {?} */
                var polyline = this.polylinesManager.get(update.id);
                if (polyline && polyline.enableEdit) {
                    polyline.endMoveShape();
                    this.renderEditLabels(polyline, update);
                }
                break;
            }
            default: {
                return;
            }
        }
    };
    /**
     * @return {?}
     */
    PolylinesEditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.polylinesManager.clear();
    };
    /**
     * @param {?} point
     * @return {?}
     */
    PolylinesEditorComponent.prototype.getPointSize = /**
     * @param {?} point
     * @return {?}
     */
    function (point) {
        return point.isVirtualEditPoint() ? point.props.virtualPointPixelSize : point.props.pixelSize;
    };
    /**
     * @param {?} point
     * @return {?}
     */
    PolylinesEditorComponent.prototype.getPointShow = /**
     * @param {?} point
     * @return {?}
     */
    function (point) {
        return point.show && (point.isVirtualEditPoint() ? point.props.showVirtual : point.props.show);
    };
    PolylinesEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'polylines-editor',
                    template: /*html*/ "\n    <ac-layer #editPolylinesLayer acFor=\"let polyline of editPolylines$\" [context]=\"this\">\n      <ac-polyline-primitive-desc\n        props=\"{\n        positions: polyline.getPositions(),\n        width: polyline.props.width,\n        material: polyline.props.material()\n    }\"\n      >\n      </ac-polyline-primitive-desc>\n    </ac-layer>\n\n    <ac-layer #editPointsLayer acFor=\"let point of editPoints$\" [context]=\"this\">\n      <ac-point-desc\n        props=\"{\n        position: point.getPosition(),\n        pixelSize: getPointSize(point),\n        color: point.props.color,\n        outlineColor: point.props.outlineColor,\n        outlineWidth: point.props.outlineWidth,\n        show: getPointShow(point)\n    }\"\n      >\n      </ac-point-desc>\n    </ac-layer>\n\n    <ac-layer #polylineLabelsLayer acFor=\"let polylineLabels of polylineLabels$\" [context]=\"this\">\n      <ac-array-desc acFor=\"let label of polylineLabels.labels\" [idGetter]=\"getLabelId\">\n        <ac-label-primitive-desc\n          props=\"{\n            position: label.position,\n            backgroundColor: label.backgroundColor,\n            backgroundPadding: label.backgroundPadding,\n            distanceDisplayCondition: label.distanceDisplayCondition,\n            eyeOffset: label.eyeOffset,\n            fillColor: label.fillColor,\n            font: label.font,\n            heightReference: label.heightReference,\n            horizontalOrigin: label.horizontalOrigin,\n            outlineColor: label.outlineColor,\n            outlineWidth: label.outlineWidth,\n            pixelOffset: label.pixelOffset,\n            pixelOffsetScaleByDistance: label.pixelOffsetScaleByDistance,\n            scale: label.scale,\n            scaleByDistance: label.scaleByDistance,\n            show: label.show,\n            showBackground: label.showBackground,\n            style: label.style,\n            text: label.text,\n            translucencyByDistance: label.translucencyByDistance,\n            verticalOrigin: label.verticalOrigin\n        }\"\n        >\n        </ac-label-primitive-desc>\n      </ac-array-desc>\n    </ac-layer>\n  ",
                    providers: [CoordinateConverter, PolylinesManagerService],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    PolylinesEditorComponent.ctorParameters = function () { return [
        { type: PolylinesEditorService },
        { type: CoordinateConverter },
        { type: MapEventsManagerService },
        { type: CameraService },
        { type: PolylinesManagerService }
    ]; };
    PolylinesEditorComponent.propDecorators = {
        editPointsLayer: [{ type: ViewChild, args: ['editPointsLayer',] }],
        editPolylinesLayer: [{ type: ViewChild, args: ['editPolylinesLayer',] }],
        polylineLabelsLayer: [{ type: ViewChild, args: ['polylineLabelsLayer',] }]
    };
    return PolylinesEditorComponent;
}());
export { PolylinesEditorComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PolylinesEditorComponent.prototype.editLabelsRenderFn;
    /** @type {?} */
    PolylinesEditorComponent.prototype.Cesium;
    /** @type {?} */
    PolylinesEditorComponent.prototype.editPoints$;
    /** @type {?} */
    PolylinesEditorComponent.prototype.editPolylines$;
    /** @type {?} */
    PolylinesEditorComponent.prototype.polylineLabels$;
    /**
     * @type {?}
     * @private
     */
    PolylinesEditorComponent.prototype.editPointsLayer;
    /**
     * @type {?}
     * @private
     */
    PolylinesEditorComponent.prototype.editPolylinesLayer;
    /**
     * @type {?}
     * @private
     */
    PolylinesEditorComponent.prototype.polylineLabelsLayer;
    /**
     * @type {?}
     * @private
     */
    PolylinesEditorComponent.prototype.polylinesEditor;
    /**
     * @type {?}
     * @private
     */
    PolylinesEditorComponent.prototype.coordinateConverter;
    /**
     * @type {?}
     * @private
     */
    PolylinesEditorComponent.prototype.mapEventsManager;
    /**
     * @type {?}
     * @private
     */
    PolylinesEditorComponent.prototype.cameraService;
    /**
     * @type {?}
     * @private
     */
    PolylinesEditorComponent.prototype.polylinesManager;
}
//# sourceMappingURL=data:application/json;base64,