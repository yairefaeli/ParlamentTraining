/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { fromEvent as observableFromEvent, Subject } from 'rxjs';
import { map, merge, takeUntil, tap } from 'rxjs/operators';
import { Inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { MapsManagerService } from '../../angular-cesium/services/maps-manager/maps-manager.service';
/**
 * @record
 */
export function IconDragEvent() { }
if (false) {
    /** @type {?} */
    IconDragEvent.prototype.initialScreenPosition;
    /** @type {?} */
    IconDragEvent.prototype.screenPosition;
    /** @type {?} */
    IconDragEvent.prototype.mapPosition;
    /** @type {?} */
    IconDragEvent.prototype.drop;
}
/**
 * The Service is used to preform, handle and subscribe to icon dragging when using the `DraggableToMapDirective`.
 * For more info check `DraggableToMapDirective` docs.
 */
var DraggableToMapService = /** @class */ (function () {
    function DraggableToMapService(document, mapsManager) {
        this.document = document;
        this.mapsManager = mapsManager;
        this.mainSubject = new Subject();
    }
    /**
     * @param {?} coordinateConverter
     * @return {?}
     */
    DraggableToMapService.prototype.setCoordinateConverter = /**
     * @param {?} coordinateConverter
     * @return {?}
     */
    function (coordinateConverter) {
        this.coordinateConverter = coordinateConverter;
    };
    /**
     * @param {?} imageSrc
     * @param {?=} style
     * @return {?}
     */
    DraggableToMapService.prototype.drag = /**
     * @param {?} imageSrc
     * @param {?=} style
     * @return {?}
     */
    function (imageSrc, style) {
        var _this = this;
        if (!this.coordinateConverter) {
            /** @type {?} */
            var mapComponent = this.mapsManager.getMap();
            if (mapComponent) {
                this.coordinateConverter = mapComponent.getCoordinateConverter();
            }
        }
        this.cancel();
        /** @type {?} */
        var imgElement = document.createElement('img');
        imgElement.src = imageSrc;
        imgElement.style.position = 'fixed';
        imgElement.style.visibility = 'hidden';
        imgElement.style.width = '30px';
        imgElement.style.height = '30px';
        imgElement.style['user-drag'] = 'none';
        imgElement.style['user-select'] = 'none';
        imgElement.style['-moz-user-select'] = 'none';
        imgElement.style['-webkit-user-drag'] = 'none';
        imgElement.style['-webkit-user-select'] = 'none';
        imgElement.style['-ms-user-select'] = 'none';
        Object.assign(imgElement.style, style);
        document.body.appendChild(imgElement);
        this.createDragObservable();
        this.dragObservable.subscribe(function (e) {
            imgElement.style.visibility = 'visible';
            imgElement.style.left = e.screenPosition.x - imgElement.clientWidth / 2 + 'px';
            imgElement.style.top = e.screenPosition.y - imgElement.clientHeight / 2 + 'px';
            _this.mainSubject.next(e);
            if (e.drop) {
                imgElement.remove();
            }
        }, function (e) {
            imgElement.remove();
        }, function () {
            imgElement.remove();
        });
    };
    /**
     * @return {?}
     */
    DraggableToMapService.prototype.dragUpdates = /**
     * @return {?}
     */
    function () {
        return this.mainSubject;
    };
    /**
     * @return {?}
     */
    DraggableToMapService.prototype.cancel = /**
     * @return {?}
     */
    function () {
        if (this.stopper) {
            this.stopper.next(true);
            this.stopper = undefined;
            this.dragObservable = undefined;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DraggableToMapService.prototype.createDragObservable = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var stopper = new Subject();
        /** @type {?} */
        var dropSubject = new Subject();
        /** @type {?} */
        var pointerUp = observableFromEvent(document, 'pointerup');
        /** @type {?} */
        var pointerMove = observableFromEvent(document, 'pointermove');
        /** @type {?} */
        var dragStartPositionX;
        /** @type {?} */
        var dragStartPositionY;
        /** @type {?} */
        var lastMove;
        /** @type {?} */
        var moveObservable = pointerMove.pipe(map(function (e) {
            dragStartPositionX = dragStartPositionX ? dragStartPositionX : e.x;
            dragStartPositionY = dragStartPositionY ? dragStartPositionY : e.y;
            lastMove = {
                drop: false,
                initialScreenPosition: {
                    x: dragStartPositionX,
                    y: dragStartPositionY,
                },
                screenPosition: {
                    x: e.x,
                    y: e.y,
                },
                mapPosition: _this.coordinateConverter ?
                    _this.coordinateConverter.screenToCartesian3({ x: e.x, y: e.y }) : undefined,
            };
            return lastMove;
        }), takeUntil(pointerUp), tap(undefined, undefined, function () {
            if (lastMove) {
                /** @type {?} */
                var dropEvent = Object.assign({}, lastMove);
                dropEvent.drop = true;
                dropSubject.next(dropEvent);
            }
        }));
        this.dragObservable = moveObservable.pipe(merge(dropSubject), takeUntil(stopper));
        this.stopper = stopper;
    };
    DraggableToMapService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DraggableToMapService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: MapsManagerService }
    ]; };
    return DraggableToMapService;
}());
export { DraggableToMapService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DraggableToMapService.prototype.coordinateConverter;
    /**
     * @type {?}
     * @private
     */
    DraggableToMapService.prototype.dragObservable;
    /**
     * @type {?}
     * @private
     */
    DraggableToMapService.prototype.stopper;
    /**
     * @type {?}
     * @private
     */
    DraggableToMapService.prototype.mainSubject;
    /**
     * @type {?}
     * @private
     */
    DraggableToMapService.prototype.document;
    /**
     * @type {?}
     * @private
     */
    DraggableToMapService.prototype.mapsManager;
}
//# sourceMappingURL=data:application/json;base64,